<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://hackqiang.org/2017/10/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[曲面ergodox--dactyl]]></title>
      <url>http://hackqiang.org/2017/07/24/e6-9b-b2-e9-9d-a2ergodox-dactyl/</url>
      <content type="html"><![CDATA[<p>dactyl应该也是Kinesis的衍生项目，原作者的项目：<a href="https://github.com/adereth/dactyl-keyboard" target="_blank" rel="external">https://github.com/adereth/dactyl-keyboard</a></p>
<p>我对模型稍作了一点修改：<a href="https://github.com/hackqiang/dactyl-keyboard" target="_blank" rel="external">https://github.com/hackqiang/dactyl-keyboard</a></p>
<p>二狗用多了，便也对这个键盘产生了兴趣，反正有打印机，那就做做呗。</p>
<a id="more"></a>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/07/20170723_220120-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170723_005525-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170722_003518-1024x768.jpg" alt="">  <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170722_003506-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170721_214828-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170721_211739-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170721_211720-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170716_123236-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170710_070801-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/20170713_221657-1024x768.jpg" alt=""></p>
<p>使用ergodone的固件和BL，完全按照ergodone的原理图来连线，有一个坑就是右手的vss和gnd在原理图中并没有连接，实际需要连接。另外trrs可以参考下图：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/07/20170708_204739.jpg" alt=""></p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/07/left.png" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/07/right.png" alt=""></p>
<p>（在标签页打开图片可看原图）</p>
<p>（“SW5：7” 表示 “ row5 col7”）</p>
<p>另外因为dactyl相对ergodone少了两列，刚好烧配列的键没了，所以我就把‘T’补到那个位置了，这样按T可以刷配列了，但是就没法用原版的<a href="http://tkg.io" target="_blank" rel="external">tkg</a>生成正确的eep了，所以我clone了原版的tkg，增加了dactyl ergodone的键盘类型，放到自己的<a href="https://tkg.hackqiang.org" target="_blank" rel="external">tkg</a>，<del>因为没有改chrome插件，就没法在线刷配列了，需要下载eep在本地用tkg-toolkit-master刷。 </del>修改了chrome插件：<a href="https://github.com/hackqiang/tkg/raw/master/tkg-chrome-app.crx，支持在线刷了。" target="_blank" rel="external">https://github.com/hackqiang/tkg/raw/master/tkg-chrome-app.crx，支持在线刷了。</a></p>
<p>感谢KTEC的ergodone固件，给我带来了极大的方便。</p>
]]></content>
      
        <categories>
            
            <category> DIY </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[部分四月番总结]]></title>
      <url>http://hackqiang.org/2017/06/30/e9-83-a8-e5-88-86-e5-9b-9b-e6-9c-88-e7-95-aa-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>不知道从什么时候开始，我开始追番了。就是属于业余选手罢了。</p>
<p>这个季度主要追了这几部:</p>
<p>《末日时在做什么？》</p>
<p>我给99分，结局有点不爽，虽然莲也很惹人爱。不过据说动画已经比较照顾观众的情绪了，原版小说更虐。后面明显是经费不够了，幸好最后一话的Scarborough fair挽救了一点。</p>
<p>《月色真美》</p>
<p>这包狗粮真甜，真大份！</p>
<a id="more"></a>
<p>《路人女主》</p>
<p>第一季里我喜欢学姐，第二季刚开始就成了慧党。我巡璃美如画。</p>
<p><a href="https://hackqiang.org/wp-content/uploads/2017/06/wp-1498803673641.png"><img src="https://hackqiang.org/wp-content/uploads/2017/06/wp-1498803673641.png" alt=""></a></p>
<p>图片来自以为贴友。</p>
<p>《黄漫老师》</p>
<p>从俺妹追过来的，套路太多感觉没意思。</p>
<p>《不正经的魔法讲师》</p>
<p>看过就会忘掉</p>
<p>《零之魔法师》</p>
<p>怎么zero总让我想起露易丝。</p>
<p>《Re:creators》</p>
<p>没看完。</p>
<p>《恋爱暴君》</p>
<p>勉强看完了，感觉没什么意思。</p>
<p>总结，现在后宫卖肉横行，还是需要月色和末日这股清流啊。</p>
]]></content>
      
        <categories>
            
            <category> 动漫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[月色真美]]></title>
      <url>http://hackqiang.org/2017/06/30/e6-9c-88-e8-89-b2-e7-9c-9f-e7-be-8e/</url>
      <content type="html"><![CDATA[<p>完结。</p>
<p>拯救了刚刚看完末日的我。</p>
<p>分享東山奈央的单曲《月がきれい (TV动画《月色真美》片尾曲 / TVアニメ「月がきれい」EDテーマ)》: <a href="http://music.163.com/song/480097178/?userid=11203834" target="_blank" rel="external">http://music.163.com/song/480097178/?userid=11203834</a> (来自@网易云音乐)<br>相比于op，我更喜欢月色的ED，可能是因为片尾的狗粮（哦我来说并不是）加分了吧。</p>
<p>我一直觉得自己是个怀旧的人，以前的日记，照片，情书，短信我都保存着，偶尔会拿出来翻翻，回忆下过去，甜的酸的苦的，离开校园越久越是怀念校园的生活。</p>
<p>最后来一碗原汁原味的狗粮，心里承受能力差的单身狗请 ctrl+w：</p>
<p>因为这是初恋，所以我还什么都不明白，我非常紧张，无论是牵手的方式，还是亲吻的方式，对朋友保密，因为很害羞，我总是不知所措，但那时是你鼓足勇气，把心意传达给了我，所以我们才能一直走下去，我深信着，我喜欢的人，也喜欢着自己，我认为这就是奇迹。</p>
]]></content>
      
        <categories>
            
            <category> 动漫 </category>
            
            <category> 心情琐事 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里域名自动更新A记录]]></title>
      <url>http://hackqiang.org/2017/05/21/e9-98-bf-e9-87-8c-e5-9f-9f-e5-90-8d-e8-87-aa-e5-8a-a8-e6-9b-b4-e6-96-b0a-e8-ae-b0-e5-bd-95/</url>
      <content type="html"><![CDATA[<p>本来设置一个@的CNAME指向我的花生壳域名是很OK的，</p>
<p>但是最近遇到的两点变化让我不得不用A记录：</p>
<ol>
<li>网站基于let’s encrypt实现了https，而let’s encrypt的证书获取要求域名必须有A记录；</li>
<li>开始使用自己的域名邮箱了（@hackqiang.org），需要把@给MX记录了。<br>因为IP是变化的，所以手动去更新记录太蠢了，只能想办法去自动更新A记录了。</li>
</ol>
<p>一番搜索发现原来阿里有SDK可以支持更新域名记录的，所以就实现了一个很简单的自动更新A记录的脚本。</p>
<p>项目地址：<a href="https://github.com/hackqiang/aliDomainAUpdate" target="_blank" rel="external">https://github.com/hackqiang/aliDomainAUpdate</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 工具 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[3d打印机优化]]></title>
      <url>http://hackqiang.org/2017/04/28/3d-e6-89-93-e5-8d-b0-e6-9c-ba-e4-bc-98-e5-8c-96/</url>
      <content type="html"><![CDATA[<p>ref：</p>
<p><a href="http://geek-cn.com/3Dprinter/58.html" target="_blank" rel="external">http://geek-cn.com/3Dprinter/58.html</a></p>
]]></content>
      
        <categories>
            
            <category> DIY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 3d打印机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你现在所担心的一切，不过是未来忆起往事的小插曲罢了。]]></title>
      <url>http://hackqiang.org/2017/04/25/e4-bd-a0-e7-8e-b0-e5-9c-a8-e6-89-80-e6-8b-85-e5-bf-83-e7-9a-84-e4-b8-80-e5-88-87-ef-bc-8c-e4-b8-8d-e8-bf-87-e6-98-af-e6-9c-aa-e6-9d-a5-e5-bf-86-e8-b5-b7-e5-be-80-e4-ba-8b-e7-9a-84-e5-b0-8f-e6-8f-92/</url>
      <content type="html"><![CDATA[<p>回头想想，确实如此。</p>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[trackpoint]]></title>
      <url>http://hackqiang.org/2017/04/19/trackpoint/</url>
      <content type="html"><![CDATA[<p>ref:</p>
<ol>
<li><a href="https://geekhack.org/index.php?topic=55960.msg1291412#msg1291412" target="_blank" rel="external">https://geekhack.org/index.php?topic=55960.msg1291412#msg1291412</a></li>
<li><a href="https://deskthority.net/workshop-f7/t400-keyboard-trackpoint-pinout-t7678.html" target="_blank" rel="external">https://deskthority.net/workshop-f7/t400-keyboard-trackpoint-pinout-t7678.html</a></li>
<li><a href="https://deskthority.net/workshop-f7/tmk-chibios-stm32-with-ps-2-mouse-trackpoint-t12666.html" target="_blank" rel="external">https://deskthority.net/workshop-f7/tmk-chibios-stm32-with-ps-2-mouse-trackpoint-t12666.html</a></li>
<li><a href="https://github.com/rampadc/arduino-trackpoint-extended" target="_blank" rel="external">https://github.com/rampadc/arduino-trackpoint-extended</a></li>
<li><a href="https://www.facebook.com/notes/wez-furlong/building-a-keyboard-ii/10154296367151787" target="_blank" rel="external">https://www.facebook.com/notes/wez-furlong/building-a-keyboard-ii/10154296367151787</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> DIY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> trackpoint </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DIY 优联版本的atreus]]></title>
      <url>http://hackqiang.org/2017/04/18/diy-e4-bc-98-e8-81-94-e7-89-88-e6-9c-ac-e7-9a-84atreus/</url>
      <content type="html"><![CDATA[<p>atreus项目应该是受到了ergodox的启发产生的，项目地址是：</p>
<p><a href="https://github.com/technomancy/atreus" target="_blank" rel="external">https://github.com/technomancy/atreus</a></p>
<p>我觉得这么小的键盘不搞个无线的话没什么意思，正好看到yang DIY的40优联，决定也做一个优联版的，配合usb2usb实现自定义的配列。</p>
<a id="more"></a>
<p>既然是自己DIY，那么能自己做的东西一定要自己做起来，外壳和定位板先打印出来：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/20170410_184910-1024x768.jpg" alt=""> <img src="https://hackqiang.org/wp-content/uploads/2017/04/20170416_070126-1024x768.jpg" alt=""></p>
<p>正好翻出了以前diy牛反的碳纤维贴纸，贴顶层。</p>
<p>选择罗技 k230的主控，便宜也够用。</p>
<p>因为atreus的键只有42个，所以没必要按照原来的k230矩阵飞线了，为了简化飞线，我就选取了其中的4行，加上12列，矩阵如下：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/matrix-1024x625.png" alt=""></p>
<p>因为原本的k230矩阵是经过优化的，一定程度上减少了按键冲突，但是我这么一简化飞线，按键冲突就会比较明显了，所以要为每一个轴增加一个二极管防冲突：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/QQ截图20170418234454-1024x516.png" alt=""></p>
<p>最后使用两块CR2032，保守估计1年不用换电池了。</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/222222222222-1024x577.png" alt=""></p>
<p>在此借用yang的一张矩阵图，下半部分是按照我这个矩阵得到的key映射表，这长表后面配置usb2usb的固件时要用到：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/QQ截图20170418234646-1024x638.png" alt=""></p>
<p>再凑点垃圾键帽，装上壳子，硬件上，键盘就差不多OK了（上面我的ergodone露出了半截）：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/1111111-1024x628.png" alt=""></p>
<p>下面就该去改usb2usb的代码了：</p>
<p><a href="https://github.com/hackqiang/tmk_keyboard/commit/fb83b1830349ff4fda5468b250f61a0b531b1d4f" target="_blank" rel="external">https://github.com/hackqiang/tmk_keyboard/commit/fb83b1830349ff4fda5468b250f61a0b531b1d4f</a></p>
<p>配列的修改有两种方式：</p>
<ol>
<li>首先定义一个key的映射，在源码中里定义好配列，就不多说了。参考keymap_unifyingAtreus.c。直接make KEYMAP=unifyingAtreus</li>
<li><p>通过KLE以及TKG，图形化的配置。</p>
<ol>
<li>tkg的地址为<a href="https://tkg.io，KLE为http://www.keyboard-layout-editor.com。" target="_blank" rel="external">https://tkg.io，KLE为http://www.keyboard-layout-editor.com。</a></li>
<li>这是原本的<a href="http://www.keyboard-layout-editor.com/##@_name=unifying%20matrix%20for%20Atreus&amp;notes=%5B%7Ba%2F:7%7D,%22C%22,%22E%22,%7Ba%2F:5%7D,%22%7C%5Cn%5C%5C%22,%7Ba%2F:7%7D,%22enter%22,%22I%22,%7Bx%2F:2%7D,%22D%22,%7Ba%2F:5%7D,%22!%5Cn1%22,%22~%5Cn%60%22,%22$%5Cn4%22,%7Ba%2F:7%7D,%22esc%22%5D,%0A%5B%22B%22,%7Ba%2F:5%7D,%223%5Cnpgdn%22,%226%5Cn%E2%86%92%22,%7Ba%2F:7%7D,%22L%22,%22P%22,%7Bx%2F:2%7D,%22Q%22,%7Ba%2F:5%7D,%22%7B%5Cn%5B%22,%7Ba%2F:7%7D,%22T%22,%22F8%22,%22F4%22%5D,%0A%5B%22N%22,%22numlock%22,%7Ba%2F:5%7D,%229%5Cnpgup%22,%22%2F:%5Cn%2F%3B%22,%7Ba%2F:7%7D,%22Y%22,%7Bx%2F:2%7D,%22caps%22,%22F12%22,%22X%22,%22F9%22,%22F5%22%5D,%0A%5B%22space%22,%22+%22,%22bs%22,%7Ba%2F:5%7D,%228%5Cn%E2%86%91%22,%22%5E%5Cn6%22,%7Ba%2F:7%7D,%22Z%22,%22F11%22,%22F1%22,%22F2%22,%22W%22,%22tab%22,%22F6%22%5D%3B&amp;@_r:10&amp;rx:1&amp;y:-0.09999999999999998&amp;x:2&amp;a:5%3B&amp;=%7C%0A%5C%3B&amp;@_y:-0.65&amp;x:1&amp;a:7%3B&amp;=E&amp;_x:1%3B&amp;=enter%3B&amp;@_y:-0.75%3B&amp;=C%3B&amp;@_y:-0.9&amp;x:4%3B&amp;=I%3B&amp;@_y:-0.7000000000000001&amp;x:2&amp;a:5%3B&amp;=6%0A%E2%86%92%3B&amp;@_y:-0.6499999999999999&amp;x:1%3B&amp;=3%0Apgdn&amp;_x:1&amp;a:7%3B&amp;=L%3B&amp;@_y:-0.75%3B&amp;=B%3B&amp;@_y:-0.8999999999999999&amp;x:4%3B&amp;=P%3B&amp;@_y:-0.7000000000000002&amp;x:2&amp;a:5%3B&amp;=9%0Apgup%3B&amp;@_y:-0.6499999999999999&amp;x:1&amp;a:7%3B&amp;=numlock&amp;_x:1&amp;a:5%3B&amp;=%2F:%0A%2F%3B%3B&amp;@_y:-0.75&amp;a:7%3B&amp;=N%3B&amp;@_y:-0.8999999999999999&amp;x:4%3B&amp;=Y%3B&amp;@_y:-0.75&amp;x:5&amp;h:1.5%3B&amp;=Z%3B&amp;@_y:-0.9500000000000002&amp;x:2%3B&amp;=bs%3B&amp;@_y:-0.6499999999999999&amp;x:1%3B&amp;=+&amp;_x:1&amp;a:5%3B&amp;=8%0A%E2%86%91%3B&amp;@_y:-0.75&amp;a:7%3B&amp;=space%3B&amp;@_y:-0.8999999999999999&amp;x:4&amp;a:5%3B&amp;=%5E%0A6%3B&amp;@_r:-10&amp;rx:7&amp;ry:0.965&amp;y:-0.20000000000000018&amp;x:2%3B&amp;=~%0A%60%3B&amp;@_y:-0.6499999999999999&amp;x:1%3B&amp;=!%0A1&amp;_x:1%3B&amp;=$%0A4%3B&amp;@_y:-0.75&amp;x:4&amp;a:7%3B&amp;=esc%3B&amp;@_y:-0.8999999999999999%3B&amp;=D%3B&amp;@_y:-0.7000000000000002&amp;x:2%3B&amp;=T%3B&amp;@_y:-0.6499999999999999&amp;x:1&amp;a:5%3B&amp;=%7B%0A%5B&amp;_x:1&amp;a:7%3B&amp;=F8%3B&amp;@_y:-0.75&amp;x:4%3B&amp;=F4%3B&amp;@_y:-0.8999999999999999%3B&amp;=Q%3B&amp;@_y:-0.7000000000000002&amp;x:2%3B&amp;=X%3B&amp;@_y:-0.6499999999999999&amp;x:1%3B&amp;=F12&amp;_x:1%3B&amp;=F9%3B&amp;@_y:-0.7500000000000004&amp;x:4%3B&amp;=F5%3B&amp;@_y:-0.9000000000000004%3B&amp;=caps%3B&amp;@_y:-0.7499999999999996&amp;x:-1&amp;h:1.5%3B&amp;=F11%3B&amp;@_y:-0.9499999999999997&amp;x:2%3B&amp;=W%3B&amp;@_y:-0.6500000000000004&amp;x:1%3B&amp;=F2&amp;_x:1%3B&amp;=tab%3B&amp;@_y:-0.75&amp;x:4%3B&amp;=F6%3B&amp;@_y:-0.9000000000000004%3B&amp;=F1" target="_blank" rel="external">矩阵</a>，把raw中的数据复制到tkg的USB2USB的”设定“中.</li>
<li>在KLE中配置自己的配列，例如<a href="http://www.keyboard-layout-editor.com/##@_backcolor=%23b3aaaa&amp;name=qiang" target="_blank" rel="external">我的</a>，复制raw到TKG的”层”中，选择“简单”模式，设置下fn的效果。</li>
<li>点击下载.c文件，放到tmk_keyboard/converter/usb_usb中，重命名为keymap_tkg.c，然后make KEYMAP=tkg<br>生成的hex通过Arduloader烧到USB2USB中就可以了。</li>
</ol>
</li>
</ol>
<p>&nbsp;</p>
]]></content>
      
        <categories>
            
            <category> DIY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> atreus </tag>
            
            <tag> keyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git tips]]></title>
      <url>http://hackqiang.org/2017/04/14/git-tips/</url>
      <content type="html"><![CDATA[<p>git remote add upstream URL<br>git fetch upstream<br>git merge upstream/master</p>
<pre>htpasswd -m -c /home/www/git/.htpasswd &lt;username&gt;</pre>]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[usb2usb]]></title>
      <url>http://hackqiang.org/2017/04/13/usb2usb/</url>
      <content type="html"><![CDATA[<p>因为要做一个优联版本的无线小键盘atreus，所以usb2usb是必须的。</p>
<p>usb2usb我就不多说了，看原作者hasu的帖子。</p>
<p>只要USB Host Shield 2.0和pro micro，就可以自己DIY了，可以把成本控制在22+40（不含邮费）。</p>
<p>具体的硬件连接yang已经说的比较详细了，我再总结归纳下。</p>
<a id="more"></a>
<p>首先，USB Host Shield 2.0哪里买， <a href="http://duinopeak.com/store/index.php?route=product/product&amp;product_id=47，理论上来说，长的一样应该都可以。" target="_blank" rel="external">http://duinopeak.com/store/index.php?route=product/product&amp;product_id=47，理论上来说，长的一样应该都可以。</a></p>
<p>然后，pro micro一定要买3.3v的版本，一般对于的晶振就是8MHZ。</p>
<p>正好这两个板子可以叠起来，尺寸会做的比较小。</p>
<p>还有就是因为接了3.3v，所以usb端口的电压就不够了，需要切断一处pcb上的走线，并接上5v的电压。</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/cut.jpg" alt=""></p>
<p>固件的话，记得要再makefile中把频率改成8MHZ，可以参考我的代码：</p>
<p><a href="https://github.com/hackqiang/tmk_keyboard/commit/fb83b1830349ff4fda5468b250f61a0b531b1d4f" target="_blank" rel="external">https://github.com/hackqiang/tmk_keyboard/commit/fb83b1830349ff4fda5468b250f61a0b531b1d4f</a></p>
<p>最后增加一个rst按钮，再打印个外壳：</p>
<p><img src="https://hackqiang.org/wp-content/uploads/2017/04/20170418_214951-1024x768.jpg" alt=""></p>
<p>外壳stl下载地址：</p>
<p><a href="http://www.thingiverse.com/thing:2256751" target="_blank" rel="external">http://www.thingiverse.com/thing:2256751</a></p>
<p>ref：</p>
<ol>
<li><a href="https://forum.colemak.com/topic/2158-dreymars-big-bag-of-keyboard-tricks-usb2usb-edition/" target="_blank" rel="external">https://forum.colemak.com/topic/2158-dreymars-big-bag-of-keyboard-tricks-usb2usb-edition/</a></li>
<li><a href="https://geekhack.org/index.php?topic=69169.0" target="_blank" rel="external">https://geekhack.org/index.php?topic=69169.0</a></li>
<li><a href="https://geekhack.org/index.php?topic=80421" target="_blank" rel="external">https://geekhack.org/index.php?topic=80421</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> DIY </category>
            
        </categories>
        
        
        <tags>
            
            <tag> keyboard </tag>
            
            <tag> DIY </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的博客数据回来了]]></title>
      <url>http://hackqiang.org/2017/04/07/e5-87-86-e5-a4-87-e6-81-a2-e5-a4-8d-e6-95-b0-e6-8d-ae/</url>
      <content type="html"><![CDATA[<p>之前提到我的数据找不到了，后面发现Archive.org对我的站点收录的很全，nice啊。</p>
<p>赶紧抽空写了个python脚本尝试恢复数据。</p>
<p>主要原理流程：</p>
<ol>
<li>从web.archive.org上抓blog页面</li>
<li>分析blog页面，提取出文章信息</li>
<li>生成支持wordpress导入的XML格式</li>
<li>从wordpress后台导入XML<br>代码写很糟糕，不过好歹是能用了，基本上数据都找回来了，就是以前的格式排版都丢了，不过无所谓啦。</li>
</ol>
<p>代码地址：<a href="https://github.com/hackqiang/RWFA.git" target="_blank" rel="external">https://github.com/hackqiang/RWFA.git</a></p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Archive.org </tag>
            
            <tag> wordpress </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oops...  lost all my blog data]]></title>
      <url>http://hackqiang.org/2017/03/24/oops-lost-data/</url>
      <content type="html"><![CDATA[<p>其实我是有危机意识的，所以一直都有定时的备份数据，直到qiang.ws域名到期，发现续费太坑爹后，免费空间收回去了后就没继续备份。</p>
<p>映像中备份的文件一直存放在E:\qiang.ws。</p>
<p>过年在老家把hexo摸清楚了，markdown也学了，新域名也申请好了，git page也准备就绪了。</p>
<p>然而，<strong>年后回家后发现备份的数据不见了</strong>。我的天！我感觉世界塌了一半。</p>
<p>尝试了各种方式找回数据，花了几十个小时尝试恢复4块可能存放过数据的硬盘，把我的各个网盘，邮箱翻了个底朝天，甚至厚着脸皮找goaddy的客服，最后仍然没有找回数据。</p>
<p>数据恢复的过程中又发生意外，导致我又丢了3T的电影动漫，我当时想死了。。。难道这是对我用黑裙的惩罚吗？</p>
<p>群晖还是适合小白，虽然现在支持docker了，但是还是完全不够我折腾，于是换回ubuntu了.</p>
<p>这件事给我的打击太大了，以致我意志消沉了个把月，一度不再想写blog了。</p>
<p>这两天突然发现，电信竟然没有封443？那赶紧的吧https搞起来吧。</p>
<p>从头再来吧。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 琐事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zRAM分析1：zram设备]]></title>
      <url>http://hackqiang.org/2015/03/19/zram-e5-88-86-e6-9e-901-ef-bc-9azram-e8-ae-be-e5-a4-87/</url>
      <content type="html"><![CDATA[<p>zRAM虽然说出来的时间挺长的，但是细节的资料不是很多，我把这几天看到的东西记录下，也方便后人。<br>zRAM是依赖swap机制的，核心的思想就是将待写入swap分区的页面压缩后写入内存，就要就避免了实际的swap分区，并且速度也相对快，最最关键的是对于一些使用flash设备的友好。<br>zRAM的主要文件都在drivers/block/zram中，核心文件很少：<br>zram_drv.c<br>以及为了减少内存碎片使用的一个内存分配器：<br>zsmalloc.c<br>关于这个内存分配器，后面再说。<br>惯例从init看起：</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kernel </tag>
            
            <tag> zram </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[她掉眼泪你也不大紧张了]]></title>
      <url>http://hackqiang.org/2015/03/18/e5-a5-b9-e6-8e-89-e7-9c-bc-e6-b3-aa-e4-bd-a0-e4-b9-9f-e4-b8-8d-e5-a4-a7-e7-b4-a7-e5-bc-a0-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>一双鞋，刚买的时候蹭上一点灰都要蹲下来擦干净，穿久之后即使被人踩一脚可能也很少低头。人大抵都是如此，不论对物还是对情，最初，她皱一下眉你都心疼，到后来，她掉眼泪你也不大紧张了。<br>Nerver be like this.</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[近况–随便写写]]></title>
      <url>http://hackqiang.org/2015/03/12/e8-bf-91-e5-86-b5-e9-9a-8f-e4-be-bf-e5-86-99-e5-86-99/</url>
      <content type="html"><![CDATA[<p>不知不觉新的一年都要过去一个季度了，我竟然才反应过来。<br>过年开车回老家，来回700km，幸运的是没有选择免费的时间出行，避免了堵车和潜在的事故，经过这700km的磨练，觉得对车的掌控又上升了一个等级～<br>年前众筹的3D打印机失败了，发货也是一直再推迟，索性自己DIY一个，目前进度30%，还在淘宝上疯狂采购零件。<br>春天已经来了，气温上升了，同时我观星的欲望也是蠢蠢欲动，想着是不是该买设备了。<br>本来想去HK玩一玩，最近发现HK也不太平了，打算放弃了。<br>最近开始深入linux MM，希望在这方面有所建树。<br>后续的事还有不少，拍婚纱照，拿结婚证，办产权证，回家办酒席，想想都觉得烦和怕。<br>新年新迹象，今年在工作上的改进是：<br>每天都自己写工作记录，记录和总结工作中遇到的问题<br>使用redmine指定和追踪工作任务<br>在生活上的改进是：<br>早起（早睡还没有做到^_^）<br>使用todo软件安排生活<br>多做饭，锻炼厨艺<br>游戏玩的少了<br>希望能保持下去。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2014年终总结]]></title>
      <url>http://hackqiang.org/2015/01/22/2014-e5-b9-b4-e7-bb-88-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>2014，是忙碌的一年，也是碌碌无为的一年。<br>工作<br>年初的时候，进入了一个新的项目组，进行kernel相关的工作，期间分析了很多oops的问题，得到了HQ资深工程师的培训，学习了众多samsung对kernel改进的patch，重温了VFS，MM，scheduler等模块，总体上来说，虽然没有学习到太多新鲜的东西，但是对kernel skill帮助是很大的。<br>随着公司大力推动tizen，下半年开始接触tizen，期间做了一些tizen移植的工作，移植tizen到SAMSUNG私有的电视板子上，后来又移植到了开源硬件cubieboard上。<br>生活<br>在女朋友家过了一个很有意思的春节。<br>因为担心限牌，在丈母娘的支持下买了车–2012款福克斯，手动的，可惜不是2.0排量，感觉还行。6月份拿到驾照，到目前为止已经有3个违章。<br>10月终于收房了，因为是精装交付的，所以自己只搞了软装，元旦节就正式入住了。<br>今年突然流行起了智能家居，我也跟风了解了下，并众筹了一台3D打印机，UM2结构的，感觉应该会不错。<br>今年一整年的博文还是各位数，发现自己越来越不注重记录了，以后一定要改变。<br>现在已经用todo list来管理自己的生活了。<br>记得3年前写了一封给未来自己的信，其中提出了一些要求，现在发现完全没有做到，非常的惭愧。所以在新的一年，我希望自己能做到：<br>少玩游戏<br>注重知识的积累（记录）<br>养成早起的习惯<br>更用心的对待周围的人和事</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[补：2013年终总结]]></title>
      <url>http://hackqiang.org/2015/01/21/e8-a1-a5-ef-bc-9a2013-e5-b9-b4-e7-bb-88-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>出大事了，2013年我竟然没有写年终总结？<br>年纪大了，记忆越来越不行了，只能从about页面中的近况慢慢回忆2013年了。<br>工作<br>2013年，是我到SAMSUNG的第二年，有关eCos的项目基本结束了，当时在HQ经历了2轮demo，虽然最终没有量产计划，但是还是拿到了一个不小的奖项。<br>然后开始专注与另一个SAMSUNG TV OS（因为保密协议，不能透露太多），去HQ出差两次，也得到了韩国工程师的赞誉，算是为我们项目组挣了面子。<br>下半年开始了关于JTAG performance调试器的研究，分析了TARCE32的工作机理，深度的学习了EJTAG协议和openJTAG硬件，并对FPGA有一定的了解。<br>生活<br>2013年最大的事就是房子买到了。我清楚的记得，我和女朋友在售楼处刷卡交钱的“喜悦”，虽然面积很小–只有89平，虽然位置很偏–距离新街口30+km，虽然交房很晚–2014年9月30日，但是我们还是喜欢的不得了。<br>在我的6通电直梦被我女朋友一次又一次扑灭的时候，我开始了DIY四轴的征途，学习开源的姿态控制代码，硬件，综合比较各种方案，从硬件到软件，都研究了一把。最终确定自己的设计，期间学会了用git与朋友协作，使用Kicad画原理图和PCB。这个项目的输出：<a href="https://bitbucket.org/hackqiang" target="_blank" rel="external">https://bitbucket.org/hackqiang</a><br>因为公司经常有编程大赛，有段时间一有空就去POJ刷题，可惜自己资质不行，距离大牛还很远，慢慢的拿不到成绩也冷淡了下来。<br>总体上来说，2013年不管是工作上的收获还是生活上的点滴，都给我很不错的充实感，可能唯一的遗憾就是忘了写年终总结了。^_^||</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[活着]]></title>
      <url>http://hackqiang.org/2014/02/27/e6-b4-bb-e7-9d-80/</url>
      <content type="html"><![CDATA[<p>看得我好揪心，也不懂他活着的意义。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[莫名悲伤–原来自己老了]]></title>
      <url>http://hackqiang.org/2014/01/27/e8-8e-ab-e5-90-8d-e6-82-b2-e4-bc-a4-e5-8e-9f-e6-9d-a5-e8-87-aa-e5-b7-b1-e8-80-81-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>喜欢听老歌，喜欢看老电脑。<br>幸好有你在身边，谢谢！</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[我们最大的错误就是把最差的脾气和最糟糕的一面都给了最亲近和最爱的人，却把耐心和宽容给了陌生人。]]></title>
      <url>http://hackqiang.org/2014/01/06/e6-88-91-e4-bb-ac-e6-9c-80-e5-a4-a7-e7-9a-84-e9-94-99-e8-af-af-e5-b0-b1-e6-98-af-e6-8a-8a-e6-9c-80-e5-b7-ae-e7-9a-84-e8-84-be-e6-b0-94-e5-92-8c-e6-9c-80-e7-b3-9f-e7-b3-95-e7-9a-84-e4-b8-80-e9-9d-a2/</url>
      <content type="html"><![CDATA[<p>对身边的最亲说一句对不起吧。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JEWEL SONG]]></title>
      <url>http://hackqiang.org/2013/10/26/jewel-song/</url>
      <content type="html"><![CDATA[<p>无意间再次听到这首歌，突然觉得自己回到了零六年的九月，那会的我在飓风，看着灵灵的空间，这首歌就是她空间的BGM。<br>很怀恋那个年代，每个人都是一张青涩的脸，都有一颗纯粹的心。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[周日杂念–说说十一区动漫]]></title>
      <url>http://hackqiang.org/2013/08/18/e5-91-a8-e6-97-a5-e6-9d-82-e5-bf-b5-e8-af-b4-e8-af-b4-e5-8d-81-e4-b8-80-e5-8c-ba-e5-8a-a8-e6-bc-ab/</url>
      <content type="html"><![CDATA[<p>现在当地时间凌晨零点二十，这篇文章发自suwon的一个小宾馆。<br>向来我一直都是对日本充满憎恶的–抵制日本人，抵制日本货。但是唯有两点，是不能不直视的：武士道精神与动漫。<br>武士道精神自不必多说，动漫确实也是日本人重要的文化输出。<br>刚刚还文思泉涌，突然脑袋空空。。。<br>花了一整天，重温了宫崎骏的经典作。。<br>挖坑待续吧~</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[无题～]]></title>
      <url>http://hackqiang.org/2013/07/22/e6-97-a0-e9-a2-98-ef-bd-9e/</url>
      <content type="html"><![CDATA[<p>我不是李商隐，不会作无题诗。<br>额，现在凌晨4点。刚刚在POJ上做完一道不算难的题，时间没达到需求。现在我正悠哉的喝着beer，听着《雨一直下》–初中时期流行的歌，感触颇多啊～<br>前段时间猝死案例频发，对比了下不良生活习惯，10条中我占了8条，真是高危啊。最近失眠的厉害，不到2点是不可能有睡意，2点之后要看运气。<br>我是典型的苦逼程序员作息规律：早上9点起，9点40到公司，19点下班，吃完饭到家20点，开练DOTA2，打到24点，一天结束。凌晨看看算法到2点左右，睡觉，睡不着了起来继续DOTA，困了为止。<br>唉，前段时间我的枫叶挂掉了，临走之前下了个蛋，看样子是受精蛋，希望我能把它孵出来吧。乌乌和蛋蛋但是还很活泼，天天使不玩的劲。<br>哦对了，无法再忍受笔记本打游戏了，去弄了台机器，配置还说得过去，E3+7850，基本主流游戏无压力。<br>最近写算法，发现C++忘的干干净净，STL中有哪些东西都不记得了，囧～驱动和OS的代码写多了，都见不到C++了。<br>估计过段时间又要去总部出差了，擦，一想到要和棒子交流，就不爽。<br>既然提到棒子了，我得再说说前段时间在dota2国际服上遇到的几个奇葩。有一局，对面棒子4人黑店，开打之前的第一句话就是“fuck china”，我当即就回“fuck korea”, 哎，那局就没怎么打了。尽和棒子喷了。还有一局，一个棒子在我们队伍，其他应该有老毛子，老美，棒子看到我是中文ID，又开始喷中国，最后不知谁把小鸡送了，老毛子直接说“must be the storm”(棒子玩的storm)，可见棒子的臭名在就飘洋过海了。再有一局，一个菲律宾的2货直接就喷中国人，我就没和他喷了，他英语不好，说了听不懂。。事后直接举报了。哎，难道我大天朝在国际上糟那么多人记恨么？<br>再说说日货的问题，上周去珠江路，南京中天，应该也是在南京做外设比较不错的店了，打算过去买把机械键盘，老板一个劲的向我推荐filco，我就说我不要日货，老板就开始喷我，日本的东西那么好，你怎么不要，抵制日货有什么意义？我卖东西从来不管他是从哪来的，只关心好不好，我扭头就走了，这种经历还发生过一次，我去买DVD-RW盘，店里只有sony的，我说我不要日货，同样被喷。我就不懂了，你们的节操呢，没有去过南京大屠杀纪念馆？或者难道只是为了钱？我这么说别人说我是愤青，愤青就愤青，反正我还是那句话，我不买日本鬼子的东西，周围的人买了我还是要喷。<br>实在想不通有些人，别人骂你中国人，你毫无感觉，别人欺负你，你还腆着脸上去，更有甚者，说爱国的就是SB，我不懂了，没有国家，哪有你，是不是你们这些就是将来的汉奸卖国贼。当然，这和我dang又是另一回事了。越写越气，满肚子怒气发不出去。。。。。。。。。<br>中国，你何时能强大，中国人，你何时能觉醒。<br>我不懂，中国政府持有那么多美国国债作什么？这些钱，放到西部做教育难道不好吗？中国官员，你们一年的三公消费9000亿是教育投入的多少倍？恨自己没有能力去改变，每每想到每月那么多的税被他们这样花掉，我就特难受。。。<br>哎，算了，不发牢骚了，天发白了，赶紧睡会把。。。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[交叉编译没有ldd，怎么办？]]></title>
      <url>http://hackqiang.org/2013/06/08/e4-ba-a4-e5-8f-89-e7-bc-96-e8-af-91-e6-b2-a1-e6-9c-89ldd-ef-bc-8c-e6-80-8e-e4-b9-88-e5-8a-9e-ef-bc-9f/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>C<br>1<br>mipsel<br>-<br>linux<br>-<br>gnu<br>-<br>readelf<br>-<br>d a.<br>out<br>|<br>grep NEEDED</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[赞一个doxygen！]]></title>
      <url>http://hackqiang.org/2013/05/09/e8-b5-9e-e4-b8-80-e4-b8-aadoxygen-ef-bc-81/</url>
      <content type="html"><![CDATA[<p>以前一直肤浅的认为doxygen只是一个文档生成工具。<br>今天才发现，连UML图都能做出来，太强大了，落伍了！</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> doxygen </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[买房那些事–决定篇]]></title>
      <url>http://hackqiang.org/2013/04/06/e4-b9-b0-e6-88-bf-e9-82-a3-e4-ba-9b-e4-ba-8b-e5-86-b3-e5-ae-9a-e7-af-87/</url>
      <content type="html"><![CDATA[<p>清明到了，父母和大姨一家来给我参谋房子的事。<br>大家一致对我们看好的盘评价不错。于是，交定金，签认购合同，房子到手了。<br>觉得买房子确实是脑袋一热的事啊，看的盘不超过10个。呵呵。<br>之后就是要去办各种手续了。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[买房那些事–序篇]]></title>
      <url>http://hackqiang.org/2013/04/03/e4-b9-b0-e6-88-bf-e9-82-a3-e4-ba-9b-e4-ba-8b-e5-ba-8f-e7-af-87/</url>
      <content type="html"><![CDATA[<p>前天凌晨5点才睡，昨天晚上骑车去下马坊夜钓了一把，没什么收获，又是凌晨3点才睡，不过今天早上6点多又起床了。<br>睡的很少，也不觉得累，我这是怎么了？<br>———————————————————很猥琐的分割线—————————————————————<br>金三银四，一点不假，最近房价又开始涨起来了。<br>我开始准备买房了：<br>1. 主城区的房子太贵，没想过；<br>2. 江宁基本已经没有低于1w的房了，上周去了百家湖，没有低于1.3w的；<br>3. 桥北的房子价格能接受，地铁3号线开通之后交通能方便一点点（那边人太多），但是环境让我没法接受；<br>4. 城南（板桥）交通太不方便，关键是也不便宜，直逼桥北；<br>这么看来，貌似江浦是比较适合我了，虽然我知道那边的配套很差，学区很差，但是有10号线，交通还行，有老山，环境很好。<br>目前看好万科的一个盘，精装交付，户型觉得也不错。<br>剧有经验的同事讲，其实买房，就是脑袋一热的事。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[痛定思痛]]></title>
      <url>http://hackqiang.org/2013/03/25/e7-97-9b-e5-ae-9a-e6-80-9d-e7-97-9b/</url>
      <content type="html"><![CDATA[<p>虽然已经23点了，这个对于我来说，最起码还有两个小时我才会上床睡觉。<br>这么晚，我干什么呢？<br>今天收到公司的内部邮件，是一个类似于topcoder的站点，鼓励员工上去竞赛。看了前两期的题目，我的思绪慢慢的就飘到了大学的时候。<br>那时候，我很喜欢编程，喜欢研究网上的各类算法，也会为了实现一个算法熬到凌晨。<br>但是再看看现在的自己，不思进取，天天游戏，学习早被我丢到九霄云外了。我之前窃以为自己是个聪明的人，如今看来，我蠢的不行。<br>《算法导论》里写了哪些算法我已经不再记得，《编程珠玑》里的内容我也开始模糊，我现在做什么东西都是“不求甚解”，糊弄糊弄就过去了。<br>我需要重新燃烧自己的斗志！！！</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CLANNAD–超弦下的那丝忧伤]]></title>
      <url>http://hackqiang.org/2013/02/13/clannad-e8-b6-85-e5-bc-a6-e4-b8-8b-e7-9a-84-e9-82-a3-e4-b8-9d-e5-bf-a7-e4-bc-a4/</url>
      <content type="html"><![CDATA[<p>一口气看完了CLANNAD两部。目前看来，它是给我印象最深的动漫，没有之一。 尤其是第二部，说他是Key社名作三大催泪弹，确实是名副其实。<br>“这次该你好好的哭一场了，觉得撑不下去的时候，还有我在，在你哭完之前，我都会在你的身边”<br>这是朋也决定和汐一起生活后秋生对早苗说的话，他们坚持了5年，终于等到了朋也的醒悟，这对夫妻，曾经都有自己的梦想，渚出生后，便成了他们的新的梦想，渚走后，汐也成了他们唯一的寄托。而如今，寄托突然不见的失落，让早苗潸然泪下，但是这泪水中同时又包含了许多对朋也的期待和祝福。<br>“已经。。。可以了吗，我已经，完成了自己的使命了吗”<br>这句话从一个丧妻多年、儿子离家出走的父亲嘴中说出来，是多么的可悲，在看到朋也能够让他放心离去的时候，他终于解脱了，不必继续靠酒精麻痹自己了。<br>我没学过超弦理论，也不了解平行空间，虽然最后朋也和他的朋友们都生活在幸福之中，但是，另一个平行空间的朋也确实是一个人孤独终老的吧。在我看来，那些存在于记忆中的这些忧伤并不会因为美满的结局而被淡忘。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CLANNAD </tag>
            
            <tag> 动漫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2012年终总结]]></title>
      <url>http://hackqiang.org/2013/01/05/2012-e5-b9-b4-e7-bb-88-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>。<br>——————–2013/02/03———————<br>1月初的时候，我在这挖了个坑，打算以后有感触了完成年终总结的，但是因为出差的缘故（借口！）拖了整整一个月。<br>其实一直觉得自己今年没有干什么事，所以无东西可写。后来看到朋友的一篇年终，觉得自己很肤浅，于是开始思索自己的生活。<br>不管怎么样，还是先记下流水账吧。<br>11年末的时候，因为工作方向的问题，我已经在考虑跳槽的事了。过完年回南京后，开始在网上投简历，最终收到了三家比较大公司的offer：<br>1. 苏宁：机顶盒系统的定制开发，mips+linux；<br>2. 普天：嵌入式视频监控的一个项目，arm+linux；<br>3. SAMSUNG： linux kernel的优化、移植以及驱动，其实是DTV system，mips（后话）。<br>收到这三家的offer后，我基本上没有怎么犹豫的选择了SAMSUNG，虽然待遇不是最好的，但是我相信在SAMSUNG的发展空间会更大。<br>之前没有接触过DTV和mips，所以入职后的前两个月，除了培训在外的时间，我在公司一直都是恶补这些方面的知识，现在看来，这段时间是我今年学习最扎实的时候了。5月正式进入了一个新的项目组。<br>这个项目组并不是基于linux的系统，而是eCos。于是又开始学习eCos，好在eCos远没有linux那么复杂。前期的学习主要通过QEMU，后来因为硬件的确定，开始porting eCos到mips SOC板子上。porting的过程中又对mips有了更深的理解。<br>这个项目一直持续到1月底，只是做了一个电视系统的原型，还有后续的项目。通过了这个项目，我学到了很多新知识：<br>1. mips体系结构；<br>2. ecos；<br>3. dtv的相关知识，tuner，demux。。。<br>工作的话，应该在年前是告一段落了。<br>情感上，没有波澜，一切有条不紊的进行。<br>但是，学习上，激情在退化，这是我在新的一年需要反思的地方。<br>简而概之，今年的我，工作环境好了，但是自身也松懈了。我希望现在的这种状态不要带到年后。<br>关于新的一年的展望与希望，我想的很现实，稳定工作，扎实学习，买房结婚。<br>我要通过自己的努力不让对我抱有期待的家人失望。<br>最后，给自己打气，加油！</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mips delay slot那点事]]></title>
      <url>http://hackqiang.org/2012/11/30/mips-delay-slot-e9-82-a3-e7-82-b9-e4-ba-8b/</url>
      <content type="html"><![CDATA[<p>接触mips也有一段时间了，发现了delay slot的一个有趣的地方。<br>首先，问题是怎么引入的呢？<br>最近做mips exception方面的东西，基于ecos，打算支持coredump，以便系统发生崩溃的时候得到一些信息，但是ecos的一些特性（如不支持MMU，kernel space和user space未隔离），导致coredump不能像在linux kernel中那么得到，最终coredump的内容还是生成了，但是我要怎么把它写入u盘呢？显然在exception模式下是不现实的。于是，EPC登场了，mips 有个precise exception的概念，也就是when exception occured, EPC总是指向受害指令，但是有一个例外，那就是如果受害指令处于delay slot，那么epc会指向受害指令之前的那条分支指令。我的想法是直接用一条jal指令替换掉受害指令，这样就能在exception返回后运行我的函数。<br>那么，如果受害指令处于delay slot中，那么我修改后的代码就类似于：<br>jal xxxx<br>jal yyyy<br>nop<br>第二条就由原本的受害指令被我修改成一条跳转指令，它在“jal xxxx”的delay slot中，但是他本身又是一条分支指令，应该再去执行它delay slot中的指令，这就让人费解了，到底这样的指令执行的结果会是怎么样的？<br>实践证明，第二条和第三条指令不会被执行到，不明白这是特性呢，还是bug？</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jay，过去的记忆]]></title>
      <url>http://hackqiang.org/2012/09/27/jay-ef-bc-8c-e8-bf-87-e5-8e-bb-e7-9a-84-e8-ae-b0-e5-bf-86/</url>
      <content type="html"><![CDATA[<p>半岛铁盒，简单爱，爱在西元前，双截棍，心情。。。<br>听到这些熟悉却又遥远的歌，就突然觉得自己回到了高中那单纯的时代。<br>那时候，还没有吊丝，还没有高帅富，也没有地沟油，喝奶粉也是喝不死人的，药是治病的。。。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查看编译链用的库文件位置]]></title>
      <url>http://hackqiang.org/2012/09/05/e6-9f-a5-e7-9c-8b-e7-bc-96-e8-af-91-e9-93-be-e7-94-a8-e7-9a-84-e5-ba-93-e6-96-87-e4-bb-b6-e4-bd-8d-e7-bd-ae/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>BASH<br>1<br>XXX-gcc<br>-print-file-name<br>libc.a<br>同理可得头文件位置。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[麦兜]]></title>
      <url>http://hackqiang.org/2012/08/24/e9-ba-a6-e5-85-9c/</url>
      <content type="html"><![CDATA[<p>今天去豆瓣，加入了麦兜小组。<br>回想起半个月前看的《麦兜当当伴我心》，那股子忧伤的基调深深的烙在我心中。<br>其实《伴我心》已经是我做了心理准备才看的，因为之前的《菠萝油王子》让我映像特别深，甚至于我都不敢一个人孤独的看。<br>不了解麦兜之前，我只认为它是一只可爱的卡通猪，看了系列电影后，让我想了很多，让我不在觉得它只是一个卡通动物。<br>感觉这种东西，一切尽在不言中吧。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 麦兜 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[We are all just prisoners here, of our own device]]></title>
      <url>http://hackqiang.org/2012/07/28/we-are-all-just-prisoners-here-of-our-own-device/</url>
      <content type="html"><![CDATA[<p>We are all just prisoners here, of our own device<br>form 《hotel california》</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Time to Say Goodbye]]></title>
      <url>http://hackqiang.org/2012/07/28/time-to-say-goodbye/</url>
      <content type="html"><![CDATA[<p>前段时间看了一个迪拜音乐喷泉的视频，喷泉的背景音乐吸引了我，一直记在心上。<br>今天听虾米电台，竟然再次听到，果断收藏，冥冥之中必有天意啊！<br>话说班得瑞的专辑我没有漏掉一个，怎么唯独对这个曲子没记忆呢？</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> music </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[刚刚看完《战马》，挺感动]]></title>
      <url>http://hackqiang.org/2012/07/01/e5-88-9a-e5-88-9a-e7-9c-8b-e5-ae-8c-e3-80-8a-e6-88-98-e9-a9-ac-e3-80-8b-ef-bc-8c-e6-8c-ba-e6-84-9f-e5-8a-a8/</url>
      <content type="html"><![CDATA[<p>RT</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[201206 keys]]></title>
      <url>http://hackqiang.org/2012/06/11/201206-keys/</url>
      <content type="html"><![CDATA[<p>经营自己<br>欲无止也<br>老板问你问题之前已经有答案了<br>never excuse</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人活着的意义]]></title>
      <url>http://hackqiang.org/2012/06/07/e4-ba-ba-e6-b4-bb-e7-9d-80-e7-9a-84-e6-84-8f-e4-b9-89/</url>
      <content type="html"><![CDATA[<p>看到的时候突然想到那句“我死后，我写的代码该有多寂寞啊”。<br>人死了究竟会怎样？真的会有灵魂吗？真的会投胎转世吗？倘若不是，那么我的意识会去哪？这个问题太深奥，我反正是想不通。<br>由死转而想到活着的意义，这是我一直在思考的问题，今天又有了新的觉悟：<br>人活着的意义在于，对身边的人负责，对生存的环境负责。<br>需要对父母负责，他们抚育你，希望你生活的美好；<br>需要对妻子负责，他们已你为精神和物质依托，你要给他们美好的生活；<br>需要对朋友负责，他们视你为挚友，少了你他们会很伤心；<br>需要对社会负责，历史的车轮滚滚向前，你不能拖后腿；<br>总之，人活着的意义在于各种负责。<br>个人感悟，勿喷勿喷。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[父母]]></title>
      <url>http://hackqiang.org/2012/05/31/e7-88-b6-e6-af-8d/</url>
      <content type="html"><![CDATA[<p>昨天晚上打电话回家说了腿上长红斑的事，一大早就又接到我妈电话询问，我妈说我爸怕我出事，还叫多打几次，在这之前父亲还因为我的倔强而生气（说我的号码不吉利要我换我不同意），瞬间感动，父母的心永远牵动着你。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个碎碎念]]></title>
      <url>http://hackqiang.org/2012/05/29/e4-b8-80-e4-b8-aa-e7-a2-8e-e7-a2-8e-e5-bf-b5/</url>
      <content type="html"><![CDATA[<p>老是幻想自己被困于南太平洋的某个小岛上，像鲁滨逊那样生存下去。<br>就是想过过野人的生活，听歌吧。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[201204 keys]]></title>
      <url>http://hackqiang.org/2012/04/23/201204-keys/</url>
      <content type="html"><![CDATA[<p>时间银行<br>英语口语<br>我遵守规则的同时，规则也在守护着我<br>主动打招呼<br>矛盾的戒律<br>思维惯性<br>把失败变成财产<br>尝试猜测别人的心思<br>历史记录的重要性<br>习惯性反驳<br>猫和狗</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[西安游记]]></title>
      <url>http://hackqiang.org/2012/04/01/e8-a5-bf-e5-ae-89-e6-b8-b8-e8-ae-b0/</url>
      <content type="html"><![CDATA[<p>突然心血来潮，清明去了西安，算是圆了高中的一个愿望。<br>决定的匆忙，只买到了硬座，我倒是无所谓，以前上学的时候这点罪没少受，灵儿可就苦了。酒店定在了市中心钟楼旁，主要是考虑到交通和吃的（回民街）。 为了无痛度过火车上的慢慢长夜，我下了经典的九五版神雕侠侣，而且考虑到我的手机电池不给力，还买了移动电源，5000mah的，事后证明这个还是很有用的。<br>31日晚上七点离开南京，1日早上九点到西安站，历时十四个小时，找酒店花了点时间，作为一个吃货，我在酒店checkin后都没有休息就杀向了回民街。<br>找到了名气很大的老孙家，点了碗羊肉泡馍，果然名不虚传。<br>to be continued…</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 旅游 </tag>
            
            <tag> 西安 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知识管理！]]></title>
      <url>http://hackqiang.org/2012/03/31/e7-9f-a5-e8-af-86-e7-ae-a1-e7-90-86-ef-bc-81/</url>
      <content type="html"><![CDATA[<p>知识管理</p>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一个小故事]]></title>
      <url>http://hackqiang.org/2012/02/09/e4-b8-80-e4-b8-aa-e5-b0-8f-e6-95-85-e4-ba-8b/</url>
      <content type="html"><![CDATA[<p>无意间看那到一个小故事，觉得很有意思：<br>一个人去买鹦鹉，看到一只鹦鹉前标：此鹦鹉会两门语言，售价二百元。<br>另一只鹦鹉前则标道：此鹦鹉会四门语言，售价四百元。<br>该买哪只呢？两只都毛色光鲜，非常灵活可爱。这人转啊转，拿不定主意。<br>结果突然发现一只老掉了牙的鹦鹉，毛色暗淡散乱，标价八百元。<br>这人赶紧将老板叫来：这只鹦鹉是不是会说八门语言？<br>店主说：不。<br>这人奇怪了：那为什么又老又丑，又没有能力，会值这个数呢？<br>店主回答：因为另外两只鹦鹉叫这只鹦鹉老板。<br>永远不要觉得你的leader能力差。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 寓意 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fate stay night 有感]]></title>
      <url>http://hackqiang.org/2012/02/01/fate-stay-night-e6-9c-89-e6-84-9f/</url>
      <content type="html"><![CDATA[<p>歌名: あなたがいた森&lt;曾有你的森林&gt;<br>(TV動畫)『FATE / STAY NIGHT』ED<br>一口气看完了fate stay night，感触颇多。<br>曾经，我和saber一样，抱有回到过去改变自己挽救过失的幻想，但是听到士郎对saber的一番话后，我突然就明白，即便是满是缺陷的过去，我也是舍不得丢掉的，对回忆虽有惋惜，但是不应该有后悔。结局中两人无悔的面对未来也是很激励人心的。<br>直到第二十话，士郎才发觉他是喜欢着saber的，又或者说在他第一次见到saber的时候就开始了，只是他并未察觉。其实saber早就对士郎产生了恋人间的感情，只是一直被做为王的她“从未认为自己是女人”的想法压制着。在她明白了圣杯的本质后又做了十年前同样的事，只是这次的情境与上次是截然不同的–绝对的坚决却又带着一丝丝的不舍。<br>终于，在丢下那句“士郎，我，爱着你”后saber回到了她的时代，如果是爱情主线，那这个结局确实是个不太杯具的杯具，但是正如英雄王被saber杀掉前说的，“有些东西是无法到手才显得格外美丽”，所以这样看来，以梦的延续作为结局又是格外完美的。“有朝一日记忆也会渐渐淡溥，也许连她的声音，她的形态也都会慢慢忘记，即便如此，即使这样我曾经喜欢过一名叫saber的女孩，绝对不会忘记”。<br>游戏终于下好了，希望能留下saber，也许会像archer说的“在想象中打败他，你也只能做到这些了”。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> fate stay night </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[永恒的高达–插曲信じればこそ]]></title>
      <url>http://hackqiang.org/2012/01/16/e6-b0-b8-e6-81-92-e7-9a-84-e9-ab-98-e8-be-be-e6-8f-92-e6-9b-b2-e4-bf-a1-e3-81-98-e3-82-8c-e3-81-b0-e3-81-93-e3-81-9d/</url>
      <content type="html"><![CDATA[<p>听着这首曲子，我仿佛看到了基拉的那张忧伤的脸和旁边默默陪伴他的拉克丝，又看到了拉米亚斯在巴尔特菲尔德的鼓励下重新振作的场景，看过动漫才知道多感人。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 动漫 </tag>
            
            <tag> 高达 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2011年终总结]]></title>
      <url>http://hackqiang.org/2012/01/16/2011-e5-b9-b4-e7-bb-88-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>前言<br>现在凌晨一点了，经常在大半夜变的敏感起来，会想很多人和事。扯的有点远了，进入正题。<br>回首<br>转眼间2011过去了，这是我工作后的第二个年终总结了，刚刚看了看去年的总结，很有感触，觉得一年前的自己有点陌生了–可能是自己工作和生活的变化比较大吧。<br>10年过完春节回到南京的时候，我开始思考我的工作，觉得我该做点什么来继续我的职业规划了，我的目标并不是在linux下写应用程序，而是内核与驱动开发，因为我对硬件的操控更感兴趣。我开始看书充电，目标是linux驱动开发。五月，扬州三日游回来后，我决定离开当时的公司，这是一个key point。虽然当时的我，深受termleader的赏识，能得到的锻炼机会也是非常难得，但是这些都没有让我动摇。我将我的想法与termleader交流，虽然他也不希望我离开，但最后还是无奈的支持了我，并和我进行了许多次语重心长的谈话，现在回想起来，我真是要好好的感谢他。五月之后，我开始准备交接工作–整理代码，完善文档等等，离开的日期也确定了–七月初。<br>七月之前陆续的拿到了几个offer，最终选择了现在的公司，在徐庄软件园。在公司做的第一个项目，一直持续到今年年初，我负责驱动和bootloader ，硬件平台是ti的dm3730，软件平台为linux2.6.32 。因为以前没有真正写过驱动，开始的时候还是比较吃力的，但是在同事（带我的）指导和自己的努力下，一段时间后，我开始感觉自己上手了，工作起来也有点如鱼得水的感觉。这个项目期间修改移植的芯片驱动有: dss，DM9000，电源管理芯片tps65930（包括了rtc，sound，usb otg），usbhub，dsp。bootloader主要是x-loader和u-boot。这个项目给我的经验是非常巨大的，让我对内核的驱动的认识上升了好几个档次，最重要的是对嵌入式硬件和软件的结构有了一定的认识。<br>七月换工作的同时，我给自己换了部手机–Nexus S，本不想买棒子的东西的，但是无奈Google选择了Samsumg，我也就硬着头皮买了。当然我买这个手机不是为了赶时髦，因为这个手机相对其他手机开放性好点，而且这个手机中的cpu–s5pc110我也是比较感兴趣的，买这个手机的初衷是想学习了解android，完全因为兴趣，暂时没有做那方面的意识，定制kernel，ROM，忙的我不亦乐乎，年底的时候开始了一个为Nexus S写开源bootloader的项目，目前还在进行中。<br>七月中旬，几个大学同学都约好来南京聚一聚，那一个星期，大家同吃同睡，玩的相当尽兴。送走同学们后，灵儿带着我的准丈母娘来南京了，美名曰旅游，实则考察女婿。刚开始挺紧张的，后来慢慢的便也释然了，又带她们玩了几天，送走丈母娘后，搬到了仙林。<br>因为搬到仙林了，住的条件没以前好，但是靠近学校，吃饭就不需要自己开火了（其实也没条件），倒是有点怀念以前和灵儿一起做饭拌嘴的时光了。当然最重要的一点，住的离我的灵儿更近了，步行也就五分钟。<br>十一的假期回家了，因为一个哥们结婚了，祝福他们。<br>自评<br>今年做的比较失败的地方：<br>年初的时候虽然有这一年的计划，但是太笼统，目标不明确。<br>下半年在仙林的学习意识太弱了。<br>做事还是没有做到三思后行，许多事做的太鲁莽，与灵儿的那几次吵架就是典型的例子。<br>总体来说，我在2011还是达到了预定的目标，我算是平安的度过了自己的本命年，不管是职业规划，还是感情生活，都在有条不紊的继续着。<br>展望<br>最后说说对2012年的计划和憧憬。过两天写。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ARM的BIN文件反编译方法]]></title>
      <url>http://hackqiang.org/2012/01/07/arm-e7-9a-84bin-e6-96-87-e4-bb-b6-e5-8f-8d-e7-bc-96-e8-af-91-e6-96-b9-e6-b3-95/</url>
      <content type="html"><![CDATA[<p>来自<br><a href="http://spring-studio.net/?p=200" target="_blank" rel="external">http://spring-studio.net/?p=200</a><br>?<br>View Code<br>BASH<br>1<br>arm-linux-objdump<br>-D<br>-b<br>binary<br>-m<br>arm xxx.bin<br>&amp;<br>gt; xxx.asm</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> arm </tag>
            
            <tag> objdump </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nexus S(9023)的芯片资料]]></title>
      <url>http://hackqiang.org/2012/01/06/nexus-s9023-e7-9a-84-e8-8a-af-e7-89-87-e8-b5-84-e6-96-99/</url>
      <content type="html"><![CDATA[<p>I had made a decision to port u-boot for GT-I9023 few days ago, so I collected some chips info in this phone:<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>CPU: Samsung S5PC110A01</p>
<p>Baseband processor: Infineon<br>8824<br>XG616 X-Gold</p>
<p>Tx Front-End: Skyworks SKY77529</p>
<p>LCD: SONY NT35580</p>
<p>Touchscreen: Atmel MXT224</p>
<p>PMIC: Maxim Semiconductor MAX8998<br>/<br>National LP3974 PMIC ?</p>
<p>Audio: Woifson Microelectronics WM8994</p>
<p>MCP: Samsung KB100D00WM-A453<br>(<br>include 3Gb Mobile DDR, 1Gb OneDRAM and 8Gb OneNAND<br>)<br>NAND: SanDisk SDIN4C2</p>
<p>BT<br>/<br>Wifi: Broadcom BCM4329GKUBG</p>
<p>NFC: NXP PN544</p>
<p>USB Switch: FSA9480</p>
<p>Touch keypad: Cypress ?</p>
<p>Compass: AK8973 ?</p>
<p>acceleration sensor: KR3DM ?</p>
<p>Gyro sensor: STMicroelectronics K3G</p>
<p>Ambient light and proximity: GP2A ?<br>Maybe there are something wrong in the list, please correct me.<br>ref:<br>1. Nexus S Teardown <a href="http://www.ifixit.com/Teardown/Nexus-S-Teardown/4365/1" target="_blank" rel="external">http://www.ifixit.com/Teardown/Nexus-S-Teardown/4365/1</a><br>2. Kernel configure from <a href="https://android.googlesource.com/kernel/samsung.git" target="_blank" rel="external">https://android.googlesource.com/kernel/samsung.git</a></p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nexus s </tag>
            
            <tag> chips </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[推荐一首歌-Little Baby Pines]]></title>
      <url>http://hackqiang.org/2012/01/06/e6-8e-a8-e8-8d-90-e4-b8-80-e9-a6-96-e6-ad-8c-little-baby-pines/</url>
      <content type="html"><![CDATA[<p>Little Baby Pines</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌曲 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nexus S hack–串口输出]]></title>
      <url>http://hackqiang.org/2011/12/30/nexus-s-hack-e4-b8-b2-e5-8f-a3-e8-be-93-e5-87-ba/</url>
      <content type="html"><![CDATA[<p>Nexus S有一个串口隐藏在micro USB接口里，需要做一根线，具体做法参见<br><a href="http://trac.osuosl.org/trac/replicant/wiki/NexusSBootloader" target="_blank" rel="external">http://trac.osuosl.org/trac/replicant/wiki/NexusSBootloader</a><br>。<br>注意：原文中的RX和TX接反了！<br>贴两张我做的图：</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nexus s </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[准备做Nexus S的bootloader]]></title>
      <url>http://hackqiang.org/2011/12/27/e5-87-86-e5-a4-87-e5-81-9anexus-s-e7-9a-84bootloader/</url>
      <content type="html"><![CDATA[<p>入手NS已经半年了，当初买这个手机主要是为了玩android，因为这个手机好刷，相对其他手机比较开放。<br>经历了一段时间的刷机后，觉得刷android已经没什么意思了，就开始研究起bootloader和recovery。<br>recovery没什么好说的，就像一个小系统，有意思的是bootloader，因为没有提供源码，竟然没有源码！<br>稍微看了下android源码目录里的bootable/bootloader/legacy，<br>觉得NS的bootloader应该是基于它修改了<br>，于是萌生了自己移植一个bootloader的想法。<br>最近先收集点资料，预计元旦开工。<br>12/29更新：昨天晚上仔细看了下bootable/bootloader/legacy，发现以前的推断有错，NS的bootloader不太可能基于他修改，因为他P都没有，没有一点有用的东西，还是走老路子，从u-boot移植吧，但是手机的bootloader还是和开发板不太一样的，毕竟涉及到一些加密的东西，所以可能会比较难，不过我还是要尝试尝试。</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bootloader </tag>
            
            <tag> Nexus s </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三个问题–来自酷壳]]></title>
      <url>http://hackqiang.org/2011/12/22/e4-b8-89-e4-b8-aa-e9-97-ae-e9-a2-98-e6-9d-a5-e8-87-aa-e9-85-b7-e5-a3-b3/</url>
      <content type="html"><![CDATA[<p>今天看了陈皓的一篇文章，对里面的三个问题很有感触：<br>1）每天早上醒过来的时候，我会为什么感到兴奋？是什么在驱动着我去开始新的一天？<br>2）现在的经历有没有让我有这种兴奋的感觉？这种让我充满力量和期待的感觉？<br>3）有没有浮燥，有没有得到认可？身边的人的认可？但更重要的是自己是否对自己认可？<br>原文链接：<br><a href="http://coolshell.cn/articles/6142.html#more-6142" target="_blank" rel="external">http://coolshell.cn/articles/6142.html#more-6142</a></p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[/dev/dsplink一个及其诡异的问题]]></title>
      <url>http://hackqiang.org/2011/12/22/devdsplink-e4-b8-80-e4-b8-aa-e5-8f-8a-e5-85-b6-e8-af-a1-e5-bc-82-e7-9a-84-e9-97-ae-e9-a2-98/</url>
      <content type="html"><![CDATA[<p>编译完，dsplink的相关模块加载都没有问题，但是当我运行dsp的测试程序的时候却出错了：<br>?<br>View Code<br>BASH<br>1<br>can<br>‘t open ‘<br>/<br>dev<br>/<br>dsplink<br>‘: No such file or directory<br>奇怪了，文件是存在的阿，再用cat，发现也是同样的错误，最后用重定向输入，这次倒是没有提示文件不存在的错误了。<br>怪，怪，真怪，我的第一反应是文件权限错了，我又仔细的看了一下文件属性，看样子没问题：<br>?<br>View Code<br>BASH<br>1<br>crw——-<br>1<br>root root<br>230<br>,<br>0<br>Dec<br>21<br>21<br>:<br>41<br>/<br>dev<br>/<br>dsplink<br>于是我又在一个相对纯净的rootfs（没有装很多的软件）上试了一次，发现一切正常，所以我有了如下推断：<br>1.内核应该不是问题，两次试验用的一个内核；<br>2.VFS那层是不是出了点问题；<br>3.是不是某个程序的影响，例如udev；<br>经过一段时间的排除，觉得是VFS出了点问题，开始debug kernel，在do_sys_open上下了断点，运行<br>?<br>View Code<br>BASH<br>1<br>cat<br>/<br>dev<br>/<br>dsplink<br>后，发现现象很怪异：打开了许多alsa的库文件（其实这里得到的结果没必要debug kernel，直接strace就好），这不应该阿，完全没有链接这些库嘛。<br>我突然想到，oss用的设备名不就是/dev/dspX吗，难道和这个有关系？<br>于是我直接运行<br>?<br>View Code<br>BASH<br>1<br>cat<br>/<br>dev<br>/<br>dsp<br>发现问题了，这个设备节点压根就不存在，却没出错，再试：<br>?<br>View Code<br>BASH<br>1<br>cat<br>/<br>dev<br>/<br>dspxxx<br>同样的没出错，这让我想到了adore的一个功能：通过插入一个内核模块，劫持vfs里的系统调用，实现了文件的隐藏，当然，这里的设备节点文件肯定不是被隐藏了。同理也可以实现文件的重定向访问，但是，我们自己的文件系统，自己的kernel，肯定没做过这些，这样分析看来，最大的疑点就落到了alsa上，再仔细一想，/dev/dsp是oss的东西，基本已经被抛弃，估计是对/dev/dsp[xxx]的访问都被重定向到/dev/snd上了，那么，又是谁做了这个重定向的工作呢？<br>问了下同事，原来是alsa-oss，那alsa-oss又是怎么做到的呢？<br>前面罗嗦了那么多，今天的主角来了–LD_PRELOAD，关于它，我也不想多说什么了，都老生常谈了，推荐一篇<br>好文章<br>。<br>再看看alsa-oss的源码alsa/alsa-oss.c，确实是这么回事：<br>?<br>View Code<br>C<br>1<br>125<br>if<br>(<br>strncmp<br>(<br>pathname<br>,<br>“/dev/dsp”<br>,<br>8</p>
<h1 id=""><a href="#" class="headerlink" title=")"></a>)</h1><p>0<br>)<br>return<br>1<br>;<br>把这个地方改掉，还有alsa/pcm.c也有个类似的地方，应该就没什么问题了。<br>真是一个让人纠结的问题阿。</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> alsa </tag>
            
            <tag> dsplink </tag>
            
            <tag> oss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kgdb调试内核模块]]></title>
      <url>http://hackqiang.org/2011/12/22/kgdb-e8-b0-83-e8-af-95-e5-86-85-e6-a0-b8-e6-a8-a1-e5-9d-97/</url>
      <content type="html"><![CDATA[<p>kgdb的详细用法就不多说了，只说说怎么调试内核模块，因为内核模块的符号地址信息并没有包含在vmlinux里，所以需要载入模块的信息：<br>gdb加载内核模块的命令为：<br>?<br>View Code<br>BASH<br>1<br>add-symbol-file FILE ADDR<br>找到ADDR最直接的方法就是：在插入模块之前，在kernel/module.c中设置一个断点，因为函数module_alloc_update_bounds返回的是模块的地址：<br>?<br>View Code<br>C<br>1<br>2097<br>ptr<br>=<br>module_alloc_update_bounds<br>(<br>mod<br>-&amp;<br>gt<br>;<br>core_size<br>)<br>;<br>所以：<br>?<br>View Code<br>BASH<br>1<br>gdb<br>&amp;<br>gt; b kernel<br>/<br>module.c:<br>2097<br>这样你就可以看到模块的地址了，后面就好办了，你可以在模块里的任意函数设断点了。</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kgdb </tag>
            
            <tag> 内核模块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dsplink的一些总结]]></title>
      <url>http://hackqiang.org/2011/12/22/dsplink-e7-9a-84-e4-b8-80-e4-ba-9b-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>之前一直用的dspbridge，因为一些原因，需要换成dsplink.<br>1. 编译dsplink最好的方法是下载dvsdk，配置好后（内核路径一定要配置好）直接make dsplink就行了。<br>2. 如果要用kgdb调试dsplinkk.ko，必须要在配置编译kernel后再次编译dsplink，否则insmod时会出问题。<br>3. 注意于alsa-oss库的冲突，看<br>这里<br>。<br>以后再更新。</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dsplink </tag>
            
            <tag> dsp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让uboot按下指定键停止autoboot]]></title>
      <url>http://hackqiang.org/2011/12/19/e8-ae-a9uboot-e6-8c-89-e4-b8-8b-e6-8c-87-e5-ae-9a-e9-94-ae-e5-81-9c-e6-ad-a2autoboot/</url>
      <content type="html"><![CDATA[<p>默认uboot是按下任意键停止autoboot，有人觉得不爽，害怕终端操作用户误操作，要指定特殊按键<br>这个功能很简单，例如要按下ESC键，停止自动boot<br>只需要添加<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7</p>
<p>#define CONFIG_AUTOBOOT_KEYED 1</p>
<p>#define CONFIG_AUTOBOOT_PROMPT “Press ESC to abort autoboot in %d seconds”</p>
<p>#define CONFIG_AUTOBOOT_DELAY_STR “linux”</p>
<p>#define CONFIG_AUTOBOOT_STOP_STR “\x1b”<br>即可，0x1B就是ESC的ascii码。<br>来源：<br><a href="http://blog.chinaunix.net/space.php?uid=13889805&amp;do=blog&amp;id=1641961" target="_blank" rel="external">http://blog.chinaunix.net/space.php?uid=13889805&amp;do=blog&amp;id=1641961</a></p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android看本机IP]]></title>
      <url>http://hackqiang.org/2011/12/14/android-e7-9c-8b-e6-9c-ac-e6-9c-baip/</url>
      <content type="html"><![CDATA[<p>在手机上装了一个超级终端，结果运行ifconfig看看IP却没有输出，原来是要用：<br>?<br>View Code<br>BASH<br>1<br>getprop</p>
]]></content>
      
        <categories>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> ip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tps65930上音频部分驱动的若干问题]]></title>
      <url>http://hackqiang.org/2011/12/14/tps65930-e4-b8-8a-e9-9f-b3-e9-a2-91-e9-83-a8-e5-88-86-e9-a9-b1-e5-8a-a8-e7-9a-84-e8-8b-a5-e5-b9-b2-e9-97-ae-e9-a2-98/</url>
      <content type="html"><![CDATA[<p>这段时间主要修改了声卡驱动方面的问题，在这记录下。<br>tps65930就不多说了，以后有机会专门的介绍一下这个芯片。<br>1.使用arecord -f cd 录音的文件，放出来的是单声道。<br>因为是双声道录音，但是硬件上只接了一个mic在MIC_MAIN上，所以需要修改通过设置寄存器RX_PATH_SEL来改变输入的path，<br>根据datasheet（代号swcu050g，777页）的描述，修改这个寄存器的值为0x35就能解决这个问题。<br>待讨论。<br>2.混音。<br>只需要修改/etc/asound.conf：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>pcm.<br>dmixer<br>{<br>type dmix</p>
<p>ipc_key<br>1024<br>slave<br>{<br>pcm<br>“hw:0,0”<br>period_time<br>0<br>period_size<br>1024<br>buffer_size<br>4096<br>rate<br>48000<br>periods<br>518<br>}<br>bindings<br>{<br>0<br>0<br>1<br>1<br>}<br>}<br>pcm.<br>asymed<br>{<br>type asym</p>
<p>playback.<br>pcm<br>“dmix”<br>capture.<br>pcm<br>“dsnoop”<br>}<br>pcm.<br>!<br>default<br>{<br>type plug</p>
<p>slave.<br>pcm<br>“asymed”<br>}<br>可以参考：<br><a href="http://blog.csdn.net/hansoft/article/details/1475245" target="_blank" rel="external">http://blog.csdn.net/hansoft/article/details/1475245</a><br><a href="http://www.alsa-project.org/main/index.php/Asoundrc" target="_blank" rel="external">http://www.alsa-project.org/main/index.php/Asoundrc</a><br><a href="http://alsa.opensrc.org/.asoundrc" target="_blank" rel="external">http://alsa.opensrc.org/.asoundrc</a><br>待续。。。</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> alsa </tag>
            
            <tag> tps65930 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由“中科院以六千单价购买128MB打印机内存条”所想]]></title>
      <url>http://hackqiang.org/2011/12/01/e7-94-b1-e4-b8-ad-e7-a7-91-e9-99-a2-e4-bb-a5-e5-85-ad-e5-8d-83-e5-8d-95-e4-bb-b7-e8-b4-ad-e4-b9-b0128mb-e6-89-93-e5-8d-b0-e6-9c-ba-e5-86-85-e5-ad-98-e6-9d-a1-e6-89-80-e6-83-b3/</url>
      <content type="html"><![CDATA[<p>今天早上惯例打开google reader(翻墙，否则链接很慢)，看到了一则有关中科院的新闻，地址：<br><a href="http://hardware.solidot.org/article.pl?sid=11/11/30/1130257&amp;from=rss" target="_blank" rel="external">http://hardware.solidot.org/article.pl?sid=11/11/30/1130257&amp;from=rss</a><br>。<br>其实天朝的高校和一些研究机构中的黑暗我是有耳闻的–“老板”一方面申请国家经费（据说大部分钱未用到正道上），另一方面“老板”在校外利用手下的学生接项目，我几个在读的研究生同学如是说。但是我真没想到一个这次中科院会做的如此嚣张，当然这个数目和天朝烂在老美手中的钱不是一个数量级的，但是作为一个科研机构。。。<br>我时常会想，我们大部分底层的百姓，辛苦创造出来的物质财富，都被那些所谓的高层给剥夺和浪费了，再联系到天朝种种社会现象，让我质疑在历史课本中看到的那个强大的“九州”是否真的存在。<br>如此这般，天朝人民必将处于水深火热之中，也许已经是开始了–温水煮蛙。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[双屏输出果真很爽]]></title>
      <url>http://hackqiang.org/2011/11/20/e5-8f-8c-e5-b1-8f-e8-be-93-e5-87-ba-e6-9e-9c-e7-9c-9f-e5-be-88-e7-88-bd/</url>
      <content type="html"><![CDATA[<p>自从我的台式机挂掉后，一直用的笔记本，今天试了试双屏输出，很方便，很爽（一边上网，一边看电影，互不干扰，哈哈）。<br>现在是在win7下体验的，过会在ubuntu上试试效果。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> win7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无题]]></title>
      <url>http://hackqiang.org/2011/10/27/e6-97-a0-e9-a2-98/</url>
      <content type="html"><![CDATA[<p>使用豆瓣电台作为闹铃。<br>早上被班得瑞的微笑吵醒了。<br>n久没听了，它突然让我想到了cw。<br>那年我们高一，<br>“喂，没有好听的歌，借我听听。”<br>“我平时不听歌的，家里倒是有一张班得瑞的专辑。”<br>那时我第一次听说班得瑞，从此便爱上了那天籁之音，可能是爱屋及乌吧，我已经说不清了。<br>真的会有一首歌，让你想到一个人。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[凌晨两点，无法入眠]]></title>
      <url>http://hackqiang.org/2011/10/27/e5-87-8c-e6-99-a8-e4-b8-a4-e7-82-b9-ef-bc-8c-e6-97-a0-e6-b3-95-e5-85-a5-e7-9c-a0/</url>
      <content type="html"><![CDATA[<p>心烦的时间总是和年龄成正比。<br>不知道怎么回事，突然就想听听王心凌的第一次爱的人，打开虾米，当那很熟悉的旋律钻近我的耳朵时，我一下就被拉到了高一。<br>那时我刚刚离开家，在学校住宿很不习惯。我和家里最多的联系就是我和弟弟一起玩那个叫冒险岛的游戏，我还清楚的记得我的角色名叫冒险不忘家，每次下线的时侯，总有一种说不出的惆怅之情，那个游戏成了我心中对家的寄托，恰巧那时我迷上了王心凌，所以玩游戏的时间我基本上都在听她的歌，现在距离高一已经八年了，当我认为自己已经习惯这种漂泊在外的生活时，这首歌又勾起了我心中那种浓浓的惆怅之情。<br>今天，想到了很多，身边的一些变化本是意料之中的，却又是这般的让我措手不及，突然才意识到，我还没有做好接受这一些变化的准备。小时候的玩伴离我越来越远，与家人一年也难得能聚几天，这样的生活真的是自己想要的吗，当我在对别人的生活侃侃而谈的时候，却没有想过自己。<br>长时间不写东西，发现自己越发的意识流了。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[解决”ssh -T git@github.com”时出现的错误]]></title>
      <url>http://hackqiang.org/2011/10/24/e8-a7-a3-e5-86-b3ssh-t-gitgithub-com-e6-97-b6-e5-87-ba-e7-8e-b0-e7-9a-84-e9-94-99-e8-af-af/</url>
      <content type="html"><![CDATA[<p>在执行ssh -T git@github.com后，出现：<br>Agent admitted failure to sign using the key.<br>Permission denied (publickey).<br>只需要<br>$ ssh-keygen -t rsa -C “your_email@youremail.com”<br>原文：<br><a href="http://unixway.info/linux/agent-admitted-failure-to-sign-using-the-key-permission-denied-publickey/" target="_blank" rel="external">http://unixway.info/linux/agent-admitted-failure-to-sign-using-the-key-permission-denied-publickey/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kgdb的一些经验总结]]></title>
      <url>http://hackqiang.org/2011/10/22/kgdb-e7-9a-84-e4-b8-80-e4-ba-9b-e7-bb-8f-e9-aa-8c-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>1. initab<br>tty1::respawn:/sbin/getty -L 115200 tty1<br>2. 调试模块，<br>这里<br>。<br>随时更新。</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kgdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[卸掉gread，装上腾X订阅]]></title>
      <url>http://hackqiang.org/2011/10/14/e5-8d-b8-e6-8e-89gread-ef-bc-8c-e8-a3-85-e4-b8-8a-e8-85-bex-e8-ae-a2-e9-98-85/</url>
      <content type="html"><![CDATA[<p>之前一直用google reader，无奈老抽风，今天试了下腾讯订阅，果断删掉了google reader。<br>后来发现腾讯订阅不能保存订阅，无奈换回greader。</p>
]]></content>
      
        <categories>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 手机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[递归删除.svn]]></title>
      <url>http://hackqiang.org/2011/10/12/e9-80-92-e5-bd-92-e5-88-a0-e9-99-a4-svn/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>BASH<br>1<br>find<br>.<br>-name<br>‘.svn’<br>|<br>grep<br>‘.svn$’<br>|<br>sed<br>-e<br>‘s/^/rm -rf /g’<br>|<br>/<br>bin<br>/<br>sh</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github上与其他分支合并]]></title>
      <url>http://hackqiang.org/2011/10/06/github-e4-b8-8a-e4-b8-8e-e5-85-b6-e4-bb-96-e5-88-86-e6-94-af-e5-90-88-e5-b9-b6/</url>
      <content type="html"><![CDATA[<p>最近在github上新建了一个nexus s内核的项目，基于官方的源码，打算没事的时候改改内核给我的手机用，为了能保持我的代码与官方的代码的同步，做了一些设置：<br>首先，增加一个remote：<br>?<br>View Code<br>BASH<br>1<br>git<br>remote add samsung https:<br>//<br>android.googlesource.com<br>/<br>kernel<br>/<br>samsung.git<br>然后，取得samsung：<br>?<br>View Code<br>BASH<br>1<br>git<br>fetch samsung<br>看看本地branch：<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>git<br>branch<br>-a<br>*<br>master</p>
<p>remotes<br>/<br>origin<br>/<br>HEAD -<br>&amp;<br>gt; origin<br>/<br>master</p>
<p>remotes<br>/<br>origin<br>/<br>master</p>
<p>remotes<br>/<br>samsung<br>/<br>android-samsung-2.6.35-gingerbread</p>
<p>remotes<br>/<br>samsung<br>/<br>android-samsung-<br>3.0<br>-ics-mr1</p>
<p>remotes<br>/<br>samsung<br>/<br>master<br>最后，在本地建立一个分支：<br>?<br>View Code<br>BASH<br>1<br>git<br>branch android-samsung-<br>3.0<br>-ics-mr1 samsung<br>/<br>android-samsung-<br>3.0<br>-ics-mr1<br>这样，在本地就有一个android-samsung-3.0-ics-mr1的分支，这样就可以与我自己的master分支merge了:<br>?<br>View Code<br>BASH<br>1<br>git<br>merge samsung<br>/<br>android-samsung-<br>3.0<br>-ics-mr1<br>参考资料：<br>1. <a href="http://stackoverflow.com/questions/1123344/merging-between-forks-in-github" target="_blank" rel="external">http://stackoverflow.com/questions/1123344/merging-between-forks-in-github</a><br>2. <a href="http://ken-blog.krugler.org/2009/04/14/merging-in-a-github-fork/" target="_blank" rel="external">http://ken-blog.krugler.org/2009/04/14/merging-in-a-github-fork/</a></p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kernel </tag>
            
            <tag> Nexus s </tag>
            
            <tag> git </tag>
            
            <tag> gtihub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[交叉编译iperf]]></title>
      <url>http://hackqiang.org/2011/09/30/e4-ba-a4-e5-8f-89-e7-bc-96-e8-af-91iperf/</url>
      <content type="html"><![CDATA[<p>for s3c2440:<br>1. export ac_cv_func_malloc_0_nonnull=yes<br>2. ./configure –build=i686-linux –host=arm-none-linux-gnueabi –target=arm-none-linux-gnueabi<br>3. 修改src/Makefile: CXXFLAGS,CPPFLAGS,CFLAGS后的 “=” 换成 “+=”<br>4. make CXXFLAGS=-march=armv4t CPPFLAGS=-march=armv4t CFLAGS=-march=armvt<br>for dm3730:<br>just<br>1. export ac_cv_func_malloc_0_nonnull=yes<br>2. ./configure –build=i686-linux –host=arm-none-linux-gnueabi –target=arm-none-linux-gnueabi</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[搬家咯]]></title>
      <url>http://hackqiang.org/2011/09/22/e6-90-ac-e5-ae-b6-e5-92-af/</url>
      <content type="html"><![CDATA[<p>离公司近点，离学校近点，以后就可以起迟点，吃好点了。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[公交趣事]]></title>
      <url>http://hackqiang.org/2011/09/09/e5-85-ac-e4-ba-a4-e8-b6-a3-e4-ba-8b/</url>
      <content type="html"><![CDATA[<p>八点二十，17路上，等红灯。<br>隔壁173上一小姑娘一直隔着玻璃盯着我笑，于是我也盯着她笑。然后我觉得这个红灯是我印象中最长的。红灯完了，十七路的加速度比较大，我赶紧向她摆摆手，她看到了也向我摆摆手，呵呵，真是可爱的小姑娘，再见啦。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[最近]]></title>
      <url>http://hackqiang.org/2011/09/07/e6-9c-80-e8-bf-91/</url>
      <content type="html"><![CDATA[<p>最近换了新工作，做linux的驱动，也是我的兴趣所在，但是因为经验少的可怜，工作并部轻松。<br>刚刚进公司的时间，接到的第一个任务是修改显卡驱动，支持读取显示器的edid信息。<br>然后是优化dm9000的时序。<br>现在在做开机速度的优化。</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[凌晨一点，被厕所女神感动的一塌糊涂]]></title>
      <url>http://hackqiang.org/2011/09/07/e5-87-8c-e6-99-a8-e4-b8-80-e7-82-b9-ef-bc-8c-e8-a2-ab-e5-8e-95-e6-89-80-e5-a5-b3-e7-a5-9e-e6-84-9f-e5-8a-a8-e7-9a-84-e4-b8-80-e5-a1-8c-e7-b3-8a-e6-b6-82/</url>
      <content type="html"><![CDATA[<p>以前朋友给我推荐电影，我极少有看完的，这次无意看了部，不仅看完了，还被感动的不行。不得不承认，鬼子的电影，还是很不错的。<br>前天在女友电脑上随便down了部电影放手机上，打算在公交上打发时间，就是《厕所女神》。刚刚看完，感触很深，我外婆前段时间刚刚去世，我没能见上她最后一面，我小学之前一直是和外婆住一起的，所以和外婆的感情很深，外婆那慈祥的面孔一直深深的扎在我心里，外婆您一路走好。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[build ubuntu kernel]]></title>
      <url>http://hackqiang.org/2011/09/07/build-ubuntu-kernel/</url>
      <content type="html"><![CDATA[<p>frake make-kpkg –initrd kernel_image</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[难得一聚]]></title>
      <url>http://hackqiang.org/2011/08/13/e9-9a-be-e5-be-97-e4-b8-80-e8-81-9a/</url>
      <content type="html"><![CDATA[<p>人生苦短，难得一聚。<br>玩了一个星期，转遍了南京，没有一个晚上早睡，没有一个早上晚起，虽然很累，但是很快乐。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[linux开机logo居中显示]]></title>
      <url>http://hackqiang.org/2011/08/02/linux-e5-bc-80-e6-9c-balogo-e5-b1-85-e4-b8-ad-e6-98-be-e7-a4-ba/</url>
      <content type="html"><![CDATA[<p>参考：<br><a href="http://2836917.blog.51cto.com/2826917/511555" target="_blank" rel="external">http://2836917.blog.51cto.com/2826917/511555</a><br>1.修改drivers/video/fbmen.c<br>?<br>View Code<br>C<br>471<br>472<br>473<br>474<br>// image.dx = 0;<br>// image.dy = y;<br>image.<br>dx<br>=<br>(<br>info<br>-&amp;<br>gt<br>;<br>var.<br>xres<br>/<br>2<br>)<br>-<br>(<br>logo<br>-&amp;<br>gt<br>;<br>width<br>/<br>2<br>)<br>;<br>image.<br>dy<br>=<br>(<br>info<br>-&amp;<br>gt<br>;<br>var.<br>yres<br>/<br>2<br>)<br>-<br>(<br>logo<br>-&amp;<br>gt<br>;<br>height<br>/<br>2<br>)<br>;<br>2.修改drivers/video/console/fbcon.c<br>增加<br>?<br>View Code<br>C<br>583<br>logo_height<br>+=<br>(<br>info<br>-&amp;<br>gt<br>;<br>var.<br>yres<br>/<br>2<br>)<br>-<br>(<br>logo<br>-&amp;<br>gt<br>;<br>height<br>/<br>2<br>)<br>;<br>OK</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[kernel中添加logo]]></title>
      <url>http://hackqiang.org/2011/08/01/kernel-e4-b8-ad-e6-b7-bb-e5-8a-a0logo/</url>
      <content type="html"><![CDATA[<p>简单记一下，免得以后翻。<br>1. 做好224色的ppm文件logo_mylogo_clut224.ppm，放到drivers/video/logo下<br>2. 在include/linux/linux_logo.h中添加<br>?<br>View Code<br>C<br>1<br>extern<br>const<br>struct<br>linux_logo logo_mylogo_clut224<br>;<br>3. 在drivers/video/logo/Makefile中添加<br>?<br>View Code<br>C<br>1<br>obj<br>-<br>$<br>(<br>CONFIG_LOGO_MYLOGO_CLUT224<br>)<br>+=<br>logo_mylogo_clut224.<br>o<br>4. 修改drivers/video/logo/Kconfig<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>config LOGO_MYLOGO_CLUT224<br>bool<br>“224-color logo”<br>depends on LOGO<br>default<br>y<br>5. 修改drivers/video/logo/logo.c<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4</p>
<p>#ifdef CONFIG_LOGO_MYLOGO_CLUT224<br>/<em> M32R Linux logo </em>/<br>logo<br>=<br>&amp;<br>amp<br>;<br>logo_mylogo_clut224<br>;</p>
<p>#endif<br>至于logo的居中显示，可以参考<br><a href="http://qiang.ws/?p=613" target="_blank" rel="external">http://qiang.ws/?p=613</a></p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> logo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gedit的插件class browser不能显示]]></title>
      <url>http://hackqiang.org/2011/07/29/gedit-e7-9a-84-e6-8f-92-e4-bb-b6class-browser-e4-b8-8d-e8-83-bd-e6-98-be-e7-a4-ba/</url>
      <content type="html"><![CDATA[<p>换来新电脑，装了新系统后发现gedit的class browser插件不能显示了。<br>用vim装上ctags后，竟然能用了。<br>估计class browser是用ctags实现的。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gedit </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2>1]]></title>
      <url>http://hackqiang.org/2011/07/21/21/</url>
      <content type="html"><![CDATA[<p>echo $BADTHING &gt; /dev/null 2&gt;&amp;1</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome插件：discuz论坛隐藏贴自动回复]]></title>
      <url>http://hackqiang.org/2011/07/07/chrome-e6-8f-92-e4-bb-b6-ef-bc-9adiscuz-e8-ae-ba-e5-9d-9b-e9-9a-90-e8-97-8f-e8-b4-b4-e8-87-aa-e5-8a-a8-e5-9b-9e-e5-a4-8d/</url>
      <content type="html"><![CDATA[<p>这个插件CU上已经有牛人写好了，但是我用了发现效果不太好，就自己修改了一下。<br>本想上传到google的网站上，结果发现还需要5$，算了，我就传到自己的blog上，以后要用就下载安装吧。<br>download autoreplay.crx</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[检查linux系统用户密码]]></title>
      <url>http://hackqiang.org/2011/06/30/e6-a3-80-e6-9f-a5linux-e7-b3-bb-e7-bb-9f-e7-94-a8-e6-88-b7-e5-af-86-e7-a0-81/</url>
      <content type="html"><![CDATA[<p>网上没找到什么资料，最后还是看login源码找到的方法。<br>/*</p>
<ul>
<li>密码加密<br>*</li>
<li>编译： cc pwd.c -lcrypt</li>
<li>usage:</li>
<li>./a.out passwd<br><em>
</em><br><em>/<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>#include <stdio.h><br>#include <unistd.h><br>#include <string.h><br>#include <pwd.h><br>#include <shadow.h><br>#define SHADOW_PWD<br>int<br>checkpasswd<br>(<br>const<br>char
</shadow.h></pwd.h></string.h></unistd.h></stdio.h></em><br>username<br>,<br>const<br>char<br><em><br>passwd<br>)<br>{<br>struct<br>passwd
</em><br>pwd<br>=<br>NULL<br>;<br>char<br>*<br>salt<br>=<br>NULL<br>;<br>if<br>(<br>(<br>pwd<br>=<br>getpwnam<br>(<br>username<br>)<br>)<br>)<br>{<h1 id="ifdef-SHADOW-PWD"><a href="#ifdef-SHADOW-PWD" class="headerlink" title="ifdef SHADOW_PWD"></a>ifdef SHADOW_PWD</h1>struct<br>spwd<br>*<br>sp<br>;<br>if<br>(<br>(<br>sp<br>=<br>getspnam<br>(<br>username<br>)<br>)<br>)<br>pwd<br>-&amp;<br>gt<br>;<br>pw_passwd<br>=<br>sp<br>-&amp;<br>gt<br>;<br>sp_pwdp<br>;<h1 id="endif"><a href="#endif" class="headerlink" title="endif"></a>endif</h1>salt<br>=<br>pwd<br>-&amp;<br>gt<br>;<br>pw_passwd<br>;<br>}<br>else<br>salt<br>=<br>“xx”<br>;<br>//printf(“read from /etc/shadow passwd:\t%s\n”,pwd-&gt;pw_passwd);<br>//printf(“crypted from %s passwd:\t%s\n”,passwd,crypt(passwd, salt));<br>if<br>(<br>!<br>strncmp<br>(<br>crypt<br>(<br>passwd<br>,<br>salt<br>)<br>,<br>pwd<br>-&amp;<br>gt<br>;<br>pw_passwd<br>,<br>strlen<br>(<br>pwd<br>-&amp;<br>gt<br>;<br>pw_passwd<br>)<br>)<br>)<br>{<br>return<br>0<br>;<br>}<br>return<br>-<br>1<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br>**<br>argv<br>)<br>{<br>int<br>ret<br>=<br>checkpasswd<br>(<br>argv<br>[<br>1<br>]<br>,<br>argv<br>[<br>2<br>]<br>)<br>;<br>if<br>(<br>!<br>ret<br>)<br>printf<br>(<br>“success<br>\n<br>“<br>)<br>;<br>else<br>printf<br>(<br>“wrong passwd<br>\n<br>“<br>)<br>;<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[lcd4linux增加插件]]></title>
      <url>http://hackqiang.org/2011/06/30/lcd4linux-e5-a2-9e-e5-8a-a0-e6-8f-92-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>参考资料：<a href="http://ssl.bulix.org/projects/lcd4linux/wiki/plugin_howto" target="_blank" rel="external">http://ssl.bulix.org/projects/lcd4linux/wiki/plugin_howto</a><br>实例说明：<br>目标：写一个插件，功能为在lcd上显示字符串<br>使用的版本为lcd4linux-0.11.0-SVN<br>步骤：<br>1.<br>cp plugin_sample.c plugin_myecho.c<br>2.修改plugin.c 增加相关选项：<br>53行增加 “myecho”,<br>171行增加int plugin_init_myecho(void);<br>172行增加void plugin_exit_myecho(void);<br>267行增加 plugin_init_myecho();<br>483行增加plugin_exit_myecho();<br>3.修改makefile.in，增加相关选项；<br>71行后增加 plugin_myecho.$(OBJEXT)<br>253行增加 plugin_myecho.c<br>545行增加 @AMDEP_TRUE@@am<strong>include@ @am</strong>quote@./$(DEPDIR)/plugin_myecho.Po@am__quote@<br>4.修改plugins.m4，如果在plugin.c中如果没有使用宏开关，这个文件可不修改。<br>5.修改/etc/lcd4linux.conf。<br>附件：<br>1.      plugin_myecho.c:<br>/<em> define the include files you need </em>/</p>
<p>#include “config.h”</p>
<p>#include</p>
<p>#include</p>
<p>#include<br>/<em> these should always be included </em>/</p>
<p>#include “debug.h”</p>
<p>#include “plugin.h”</p>
<p>#ifdef WITH_DMALLOC</p>
<p>#include</p>
<p>#endif<br>static void my_myecho(RESULT <em> result, RESULT </em> arg1)<br>{<br>char <em>val = R2S(arg1);<br>SetResult(&amp;result, R_STRING, val);<br>}<br>/</em> plugin initialization <em>/<br>/</em> MUST NOT be declared ‘static’! */<br>int plugin_init_myecho(void)<br>{<br>AddFunction(“myecho”, 1, my_myecho);<br>return 0;<br>}<br>void plugin_exit_myecho(void)<br>{<br>return;<br>}<br>2.      lcd4linux.conf<br>Display LCD2USB {<br>Driver   ‘LCD2USB’<br>Port     ‘libusb’<br>Size     ’16×2′<br>}<br>Widget ECHO1 {<br>class  ‘Text’<br>expression  myecho(‘hackqiang’)<br>width  16<br>align  ‘L’<br>update tick<br>}<br>Layout Default {<br>Row1 {<br>Col1 ‘ECHO1′<br>}<br>}<br>Variables {<br>tick 50<br>}<br>Display ‘LCD2USB’<br>Layout  ‘Default’</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lcd4linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gentoo与kernel-3.0-rc1的环境下emerge nss]]></title>
      <url>http://hackqiang.org/2011/06/28/gentoo-e4-b8-8ekernel-3-0-rc1-e7-9a-84-e7-8e-af-e5-a2-83-e4-b8-8bemerge-nss/</url>
      <content type="html"><![CDATA[<p>因为用的3.0的内核，nss源码文件中没有Linux3.0.mk，emerge的时候出问题，最简单的一个方法，<br>写一个脚本：</p>
<p>#!/bin/bash<br>cp /usr/tmpportage/dev-libs/nss-3.12.9-rc1/work/nss-3.12.9/mozilla/security/coreconf/Linux2.6.mk /usr/tmpportage/dev-libs/nss-3.12.9-rc1/work/nss-3.12.9/mozilla/security/coreconf/Linux3.0.mk<br>在emerge中显示source prepared后，立即执行此脚本。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gentoo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gentoo增加笔记本触摸板支持]]></title>
      <url>http://hackqiang.org/2011/06/28/gentoo-e5-a2-9e-e5-8a-a0-e7-ac-94-e8-ae-b0-e6-9c-ac-e8-a7-a6-e6-91-b8-e6-9d-bf-e6-94-af-e6-8c-81/</url>
      <content type="html"><![CDATA[<p>支持装xorg时，没有在INPUT_DEVICE中添加synaptics，导致触摸板使用不正常，经过搜索摸索，解决了问题。<br>emerge -1 x11-drivers/xf86-input-synaptics<br>cp -r /usr/share/X11/xorg.conf.d /etc/X11<br>修改 /etc/X11/xorg.conf.d/10-evdev.conf ：<br>view plaincopy to clipboardprint?<br>Section “InputClass”<br>Identifier “evdev touchpad catchall”<br>MatchIsTouchpad “on”<br>MatchDevicePath “/dev/input/event*”<br>Driver “synaptics”<br>Option “TapButton1″ “1”<br>Option “TapButton2″ “2”<br>Option “TapButton2″ “3”<br>EndSection<br>重启。<br>参考资料：<br><a href="http://en.gentoo-wiki.com/wiki/Synaptics_Touchpad" target="_blank" rel="external">http://en.gentoo-wiki.com/wiki/Synaptics_Touchpad</a><br><a href="http://blog.csdn.net/changfengxiongfei/archive/2011/05/02/6384202.aspx" target="_blank" rel="external">http://blog.csdn.net/changfengxiongfei/archive/2011/05/02/6384202.aspx</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gentoo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的vim配置和插件]]></title>
      <url>http://hackqiang.org/2011/06/23/e6-88-91-e7-9a-84vim-e9-85-8d-e7-bd-ae-e5-92-8c-e6-8f-92-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>参考文章：<br><a href="http://www.vimer.cn/2009/10/%E6%8A%8Avim%E6%89%93%E9%80%A0%E6%88%90%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E7%9A%" target="_blank" rel="external">http://www.vimer.cn/2009/10/%E6%8A%8Avim%E6%89%93%E9%80%A0%E6%88%90%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E7%9A%</a><br>84ide2.html<br>依赖的程序或插件：<br>ctags<br>cscope<br>taglist.vim<br>a.vim<br>omnicppcomplete.vim<br>支持的功能有：<br>1.函数的跳转(ctrl+])、返回(ctrl+t);<br>2.快速打开同名的.h文件(:AV);<br>3.自动补全;<br>4.按F5自动make，按F6实行make clean；<br>5.按F3打开函数列表。<br>下载直接解压就好，不过我可不敢保证我的配置适合你，所以用之前最好先备份自己的配置。<br><a href="http://qiang.ws/wp-content/uploads/2011/06/vim_profile.tgz_.jpg" target="_blank" rel="external">http://qiang.ws/wp-content/uploads/2011/06/vim_profile.tgz_.jpg</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[周五的面试总结]]></title>
      <url>http://hackqiang.org/2011/06/17/e5-91-a8-e4-ba-94-e7-9a-84-e9-9d-a2-e8-af-95-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>今天又是两个面试。<br>早上7点半坐上了25路，快到9点时到许府巷，找了半天才找到面试公司。这家公司也是台资，前台的mm不是很热情，给我了几套试题：一套英文语法题（对你没看错），还是初中的水平做的那种，一张性格测试题，还有一套英文的专业知识题。<br>专业知识题比我之前面试的公司都要深的多，有两道算法题，我拿出来和大家分享分享：<br>1.优化下面的代码：<br>unsigned long sum=0;<br>int a[1000][10];<br>for( int i=0;i</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[周四的面试总结]]></title>
      <url>http://hackqiang.org/2011/06/16/e5-91-a8-e5-9b-9b-e7-9a-84-e9-9d-a2-e8-af-95-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>今天周四，面试了两家公司。<br>一大早，公交转地铁，历经50分钟到达了面试地点，这家公司主要做无线通讯产品的。<br>面试我的有两个人，其中一个是个小伙子，主要由他面试我技术方面的问题，还有一个应该就是team leader了，主要问一些非技术上的问题。<br>问题一：关于vfs<br>不算难<br>问题二：netlink<br>记得在哪看过，又忘了，后来回来一查，是内核与其他进程通讯的机制，怪不得，内核源码那块，进程间通讯我一直没看。<br>问题三：缓冲区溢出<br>不难<br>问题四：dma<br>不难<br>问题五：ping工作在osi的哪层？<br>悲剧啊，悲剧啊，当时我竟然脑袋空了，只记得使用的是icmp协议，在那一层呢？<br>问题六：硬件中断的处理过程<br>这个还好，之前在研究我的开发板的时候学了一点，也差不多说出来了。<br>问题七，我觉得最难：怎么样算是一个很牛的软件工程师？<br>我主要说了两点：一是对自己的环境要很了解，从硬件到操作系统；二是要有与人协调的能力。<br>面试的差不多了，team leader让我做一道算法题，其实很简单的算法，因为一点点紧张，一点点对vc的生疏，一点点的烦躁，好吧，我是给自己找借口，竟然没做出来，哎，亏我还经常吹嘘自己的算法水平呢。<br>面试出来后，接着做地铁到江宁，到第二家公司面试，这家公司是台资，规模挺大，到面试的公司后刚刚好一点半。<br>哇，大公司就是不一样。前台的MM带我到了一个会议室，我等了会，一个小伙子拿来3套题给我，一套智力题，一套性格测试题，还有一套专业知识题。<br>智力题，我从来都不怕，很快搞定；<br>性格测试题，哎，做着真是痛苦啊；<br>专业知识题，让我很失望，基本上都是有关c的特性的，连一道深一点的算法题都没有。<br>题做完后，过了会，一个看着技术很犀利的家伙过来面试我了，姑且称他为A吧，事后得知如果我来这家公司的话，A就是我的直接上司。<br>A首先问我在现在的公司主要做什么，我都一一回答，然后就转入正题了，问了我几个关于驱动上的问题，例如lcd的原理，触摸屏的原理，还好这两个玩意我研究的稍微深一点，我们又讨论了vfs，甚至人脸识别，面试的过程很愉快，我觉得挺顺利，聊聊大约一个小时后A叫来了一个MM，原来是人事部的，和我聊待遇和其他的问题，我觉得这个公司的待遇还不错，聊的差不多了，MM说如果我满意这个待遇，就找公司副总来和我聊聊，我就称他为B吧。<br>B看样子挺老的，但是人很精神，一看就知道是台湾那边的，和我聊了很多，天南地北，又是一个小时。<br>面试结束已经快六点了，打道回府。<br>今天的面试总结：越是大公司，面试的时候越不问你技术性很强的东西，而是更侧重综合方面的东西。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在gentoo中设置无线网卡(wpa_supplicant)]]></title>
      <url>http://hackqiang.org/2011/06/09/e5-9c-a8gentoo-e4-b8-ad-e8-ae-be-e7-bd-ae-e6-97-a0-e7-ba-bf-e7-bd-91-e5-8d-a1wpa-supplicant/</url>
      <content type="html"><![CDATA[<p>装好gentoo后，一直都是用的有线网卡，今天晚上捣鼓了下无线网卡的设置，成功了，在这记录一下。<br>因为我的无线使用wpa加密，刚好我的无线网卡在wpa_supplicant的支持列表中，所以我就毫不犹豫的选择了wpa_supplicant方案。<br>首先，下载安装wpa_supplicant：<br>emerge wpa_supplicant<br>然后生成一个配置文件：<br>bzip2 -d /usr/share/doc/wpa_supplicant-<br>/wpa_supplicant.conf.gz<br>cp /usr/share/doc/wpa_supplicant-<br>/wpa_supplicant.conf /etc<br>配置文件的修改可以参阅注释。<br>修改/etc/conf.d/net，添加：<br>modules=( “wpa_supplicant” )<br>config_wlan0=(“dhcp”)<br>最后添加网卡的开机启动：<br>ln -s /etc/init.d/net.lo /etc/init.d/net.wlan0<br>rc-update add net.wlan0 default<br>OK，搞定了</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gentoo </tag>
            
            <tag> 无线网卡 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3.0.0-rc1]]></title>
      <url>http://hackqiang.org/2011/06/02/3-0-0-rc1/</url>
      <content type="html"><![CDATA[<p>在2.6.39这个大版本号后，linus终于决定提高内核的词版本号了，而且这次跳跃还很大，直接上了3.0。<br>我也凑凑热闹，下了3.0的内核，编译了一把，果真如linus多说，使用起来确实感觉不到差异。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移植程序到大端CPU]]></title>
      <url>http://hackqiang.org/2011/06/01/e7-a7-bb-e6-a4-8d-e7-a8-8b-e5-ba-8f-e5-88-b0-e5-a4-a7-e7-ab-afcpu/</url>
      <content type="html"><![CDATA[<p>因为客户的机器是ibm服务器，用的PowerPC，是大端模式，所以最近我就研究了一把小端程序向大端cpu移植的注意事项，其实如果不涉及到对外接口，移植工作会很轻松。<br>首先要明白什么是大端，小端，网络字节序。先撇开“网络字节序”，大小端说白了就是cpu取数据是从高地址还是从低地址开始。因为无论是32位还是64位架构，一个字节总是由8位组成，所以对于一个字节的数据，大小端的处理都是一样的，例如char，但是如果是由多个字节组成的数据，那么麻烦就来了，例如int变量，典型的，它占了4个字节，所以大小端处理就不同。举个例子：<br>struct res<br>{<br>char type;<br>int data;<br>};<br>当小端的机器将此结构发送给大端的机器时，大端机器对data的读取就会出现问题，解决这个问题的方法是将data转换成网络字节序，网络字节序是大端的，其实网络字节序是大端还是小端并不重要，重要的是他给通讯的双方制定了一套规则，这样，不管目标机器是大端还是小端都不会对数据的读取造成影响。<br>所以，在通讯的过程中，将数据转换为网络字节序，不论是对于移植，还是对于程序的兼容性，都是大有裨益的！</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PowerPC </tag>
            
            <tag> 字节序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[clean gentoo temp]]></title>
      <url>http://hackqiang.org/2011/06/01/clean-gentoo-temp/</url>
      <content type="html"><![CDATA[<p>rm -rf /usr/portage/distfiles/<em><br>rm -rf /var/tmp/portage/</em></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gentoo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[diff patch]]></title>
      <url>http://hackqiang.org/2011/06/01/diff-patch/</url>
      <content type="html"><![CDATA[<p>diff -Naur a/ b/ &gt; patchfile<br>cd a/<br>patch -p1<br>patch to “a/“, so now “a/“ is the same as “b/“</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
            <tag> patch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mount LVM]]></title>
      <url>http://hackqiang.org/2011/05/02/mount-lvm/</url>
      <content type="html"><![CDATA[<p>sudo apt-get install lvm2<br>sudo vgscan<br>sudo vgchange -ay volGroup0<br>sudo lvs<br>sudo mount /dev/volGroup0/logvol00 /mnt</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ioctl获取所有网卡信息]]></title>
      <url>http://hackqiang.org/2011/04/26/ioctl-e8-8e-b7-e5-8f-96-e6-89-80-e6-9c-89-e7-bd-91-e5-8d-a1-e4-bf-a1-e6-81-af/</url>
      <content type="html"><![CDATA[<p>/<em> 获得网卡名 </em>/<br>struct ifreq <em>ifr, </em>ifend;<br>struct ifconf ifc;<br>struct ifreq ifs[16];<br>int sockfd;<br>sockfd = socket(AF_INET, SOCK_DGRAM, 0);<br>ifc.ifc_len = sizeof(ifs);<br>ifc.ifc_req = ifs;<br>if (ioctl(sockfd, SIOCGIFCONF, &amp;ifc) ifr_addr.sa_family == AF_INET) {<br>if ( strncmp(ifr-&gt;ifr_name,”lo”,strlen(“lo”)) ) {<br>printf(“[dev]%s\n”,ifr-&gt;ifr_name);<br>}<br>}<br>}<br>}</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[移植u-boot-2010.09到tq2440(四)]]></title>
      <url>http://hackqiang.org/2011/02/08/e7-a7-bb-e6-a4-8du-boot-2010-09-e5-88-b0tq2440-e5-9b-9b/</url>
      <content type="html"><![CDATA[<p>六．  引导zImage<br>据我了解，u-boot本身是不支持直接引导zImage的，但是天嵌提供的u-boot就可以直接引导zImage，我就对源码研究了会，结合bootm命令的实现，发现原来引导zImage是如此的简单。<br>为了实现直接引导zImage，我添加了一个u-boot的命令boot_zImage，命令添加的方法到处都是，可以到这里看一看：<a href="http://qiang.ws/index.php?p=537。我主要说下这个命令的实现原理。" target="_blank" rel="external">http://qiang.ws/index.php?p=537。我主要说下这个命令的实现原理。</a><br>因为天嵌把nand flash分了三个区，内核映像就烧在第二个分区，第二个分区的起始地址为0x200000，所以从u-boot需要从nand flash的0x200000处读取内核文件，拷贝到SDRAM的0x30008000处，然后在地址gd-&gt;bd-&gt;bi_boot_params处设置传递给内核的参数，最后跳转到0x30008000执行，下面我贴出代码进行详细的说明：<br>/*</p>
<ul>
<li>使用 tag list方式设置传递给内核的参数</li>
<li>pram_base: base address of linux paramter<br><em>/<br>static void setup_linux_param(long param_base)<br>{<br>/</em> start of tags <em>/<br>struct tag </em>params = (struct tag <em>)param_base;<br>params-&gt;hdr.tag = ATAG_CORE;<br>params-&gt;hdr.size = tag_size (tag_core);<br>params-&gt;u.core.flags = 0;<br>params-&gt;u.core.pagesize = 0;<br>params-&gt;u.core.rootdev = 0;<br>params = tag_next (params);<br>/</em> !!! importart set SDRAM <em>/<br>params-&gt;hdr.tag = ATAG_MEM;<br>params-&gt;hdr.size = tag_size (tag_mem32);<br>params-&gt;u.mem.start = PHYS_SDRAM_1;<br>params-&gt;u.mem.size = PHYS_SDRAM_1_SIZE;<br>params = tag_next (params);<br>/</em> set bootargs <em>/<br>char </em>commandline = getenv (“bootargs”);<br>if (!commandline)<br>goto end;<br>params-&gt;hdr.tag = ATAG_CMDLINE;<br>params-&gt;hdr.size = (sizeof (struct tag_header) + strlen (commandline) + 1 + 4) &gt;&gt; 2;<br>strcpy (params-&gt;u.cmdline.cmdline, commandline);<br>params = tag_next (params);<br>end:<br>/<em> end of tags </em>/<br>params-&gt;hdr.tag = ATAG_NONE;<br>params-&gt;hdr.size = 0;<br>}<br>/*</li>
<li>将内核映像从nand flash拷贝到SDRAM中</li>
<li>dst: destination address</li>
<li>src: source</li>
<li>size: size to copy</li>
<li>mt: type of storage device<br><em>/<br>static inline int copy_kernel_img(ulong dst, const char </em>src, size_t size)<br>{<br>int ret = 0;<br>if (NF_ReadID() == 0x76) {<br>ret = nand_read_ll((unsigned char <em>)dst,<br>(unsigned long)src, (int)size);<br>} else {<br>ret = nand_read_ll_lp((unsigned char </em>)dst,<br>(unsigned long)src, (int)size);<br>}<br>return ret;<br>}<br>int do_boot_zImage (cmd_tbl_t <em>cmdtp, int flag, int argc, char </em>argv[])<br>{<br>int ret;<br>ulong from=0x200000;    //这个是内核映像在nand flash中的其实地址<br>ulong to=0x30008000;    //内核在SDRAM中的起始地址<br>size_t size=0x300000;   //拷贝内核映像的大小<br>/<em> copy kernel image </em>/<br>printf(“Copy linux kernel from 0x%08lx to 0x%08lx, size = 0x%08lx … “,<br>from, to, size);<br>ret = copy_kernel_img(to, (char <em>)from, size);<br>if (ret) {<br>printf(“failed\n”);<br>return -1;<br>} else {<br>printf(“Copy Kernel to SDRAM done,”);<br>}<br>//这里进行魔数的判断，我觉得做不做无所谓，只是检查一下到底是不是zImage格式的映像而已<br>#define LINUX_ZIMAGE_MAGIC                      0x016f2818<br>if (</em>(ulong <em>)(to + 9</em>4) != LINUX_ZIMAGE_MAGIC) {<br>printf(“Warning: this binary is not compressed linux kernel image\n”);<br>printf(“zImage magic = 0x%08lx\n”, <em>(ulong </em>)(to + 9<em>4));<br>} else {<br>printf(“zImage magic = 0x%08lx\n”, </em>(ulong <em>)(to + 9</em>4));<br>;<br>}<br>printf(“NOW, Booting Linux……\n”);<br>/<em> set atag </em>/<br>setup_linux_param(gd-&gt;bd-&gt;bi_boot_params);<br>/<em> run kernel </em>/<br>void(<em>kernel)(int zero, int arch, uint params);<br>kernel = (void(</em>)(int, int, uint))(to);<br>//跳转到0x30008000，这个传递了三个参数，分别是0，机器码和传递给内核的参数的地址，为什么是这三个参数呢？详情自己看内核的源码arch/arm/boot/compressed/head.S<br>kernel(0, gd-&gt;bd-&gt;bi_arch_number,gd-&gt;bd-&gt;bi_boot_params);<br>return 0;<br>}<br>七．    总结<br>没有做移植之前移植认为bootloader很神秘，做完一遍后发现原来bootloader也很简单，并没有之前想象的那么难，希望本文档对你有所帮助，同时也希望大家给我指出不足和错误之处。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> embeded </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
            <tag> 移植 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移植u-boot-2010.09到tq2440(三)]]></title>
      <url>http://hackqiang.org/2011/02/08/e7-a7-bb-e6-a4-8du-boot-2010-09-e5-88-b0tq2440-e4-b8-89/</url>
      <content type="html"><![CDATA[<p>五．  Nand Flash驱动的移植<br>Nand flash的移植还是很重要的，因为我们的u-boot和内核镜像都是烧在nand flash中的，必须要能操作nand flash，才能继续进行下去（stage2），nand flash的驱动代码主要是取自天嵌的u-boot。<br>1.      建立文件drivers/mtd/nand/s3c2440_nand.c，添加如下内容：<br>/*</p>
<ul>
<li>Nand flash interface of s3c2440<br><em>/<br>#include<br>#if 0<br>#define DEBUGN    printf<br>#else<br>#define DEBUGN(x, args …) {}<br>#endif<br>#include<br>#include<br>#include<br>#define __REGb(x)    (</em>(volatile unsigned char <em>)(x))<br>#define __REGi(x)    (</em>(volatile unsigned int <em>)(x))<br>#define NF_BASE  0x4e000000             //Nand配置寄存器基地址<br>#define NFCONF   <strong>REGi(NF_BASE + 0x0)  //偏移后还是得到配置寄存器基地址<br>#define NFCONT   </strong>REGi(NF_BASE + 0x4)  //偏移后得到Nand控制寄存器基地址<br>#define NFCMD    <strong>REGb(NF_BASE + 0x8)  //偏移后得到Nand指令寄存器基地址<br>#define NFADDR   </strong>REGb(NF_BASE + 0xc)  //偏移后得到Nand地址寄存器基地址<br>#define NFDATA   <strong>REGb(NF_BASE + 0x10) //偏移后得到Nand数据寄存器基地址<br>#define NFMECCD0 </strong>REGi(NF_BASE + 0x14) //偏移后得到Nand主数据区域ECC0寄存器基地址<br>#define NFMECCD1 <strong>REGi(NF_BASE + 0x18) //偏移后得到Nand主数据区域ECC1寄存器基地址<br>#define NFSECCD  </strong>REGi(NF_BASE + 0x1C) //偏移后得到Nand空闲区域ECC寄存器基地址<br>#define NFSTAT   <strong>REGb(NF_BASE + 0x20) //偏移后得到Nand状态寄存器基地址<br>#define NFSTAT0  </strong>REGi(NF_BASE + 0x24) //偏移后得到Nand ECC0状态寄存器基地址<br>#define NFSTAT1  <strong>REGi(NF_BASE + 0x28) //偏移后得到Nand ECC1状态寄存器基地址<br>#define NFMECC0  </strong>REGi(NF_BASE + 0x2C) //偏移后得到Nand主数据区域ECC0状态寄存器基地址<br>#define NFMECC1  <strong>REGi(NF_BASE + 0x30) //偏移后得到Nand主数据区域ECC1状态寄存器基地址<br>#define NFSECC   </strong>REGi(NF_BASE + 0x34) //偏移后得到Nand空闲区域ECC状态寄存器基地址<br>#define NFSBLK   <strong>REGi(NF_BASE + 0x38) //偏移后得到Nand块开始地址<br>#define NFEBLK   </strong>REGi(NF_BASE + 0x3c) //偏移后得到Nand块结束地址<br>#define S3C2440_NFCONT_nCE  (1priv;<br>DEBUGN(“hwcontrol(): 0x%02x 0x%02x\n”, cmd, ctrl);<br>if (ctrl &amp; NAND_CTRL_CHANGE) {<br>IO_ADDR_W = NF_BASE;<br>if (!(ctrl &amp; NAND_CLE))                //要写的是地址<br>IO_ADDR_W |= S3C2440_ADDR_NALE;<br>if (!(ctrl &amp; NAND_ALE))                //要写的是命令<br>IO_ADDR_W |= S3C2440_ADDR_NCLE;<br>if (ctrl &amp; NAND_NCE)<br>NFCONT &amp;= ~S3C2440_NFCONT_nCE;    //使能nand flash<br>else<br>NFCONT |= S3C2440_NFCONT_nCE;     //禁止nand flash<br>}<br>if (cmd != NAND_CMD_NONE)<br>writeb(cmd,(void </em>)IO_ADDR_W);<br>}<br>static int s3c2440_dev_ready(struct mtd_info <em>mtd)<br>{<br>DEBUGN(“dev_ready\n”);<br>return (NFSTAT &amp; 0x01);<br>}<br>int board_nand_init(struct nand_chip </em>nand)<br>{<br>u_int32_t cfg;<br>u_int8_t tacls, twrph0, twrph1;<br>struct s3c24x0_clock_power <em> const clk_power = s3c24x0_get_base_clock_power();<br>DEBUGN(“board_nand_init()\n”);<br>clk_power-&gt;CLKCON |= (1 IO_ADDR_R = nand-&gt;IO_ADDR_W = (void </em>)0x4e000010;<br>/<em> read_buf and write_buf are default </em>/<br>/<em> read_byte and write_byte are default </em>/<br>/<em> hwcontrol always must be implemented </em>/<br>nand-&gt;cmd_ctrl = s3c2440_hwcontrol;<br>nand-&gt;dev_ready = s3c2440_dev_ready;<br>nand-&gt;ecc.mode = NAND_ECC_SOFT;<br>return 0;<br>}<br>2.      修改drivers/mtd/nand/Makefile，增加：<br>COBJS-y += s3c2440_nand.o<br>3.      修改include/config/tq2440.h，支持nand flash启动，随便把其他关于nand的设置一起做好：<br>#define CONFIG_NAND_S3C2440 1<br>#define CONFIG_CMD_NAND<br>#define CONFIG_SYS_NAND_BASE  0x4E000000 //Nand配置寄存器基地址<br>#define CONFIG_SYS_MAX_NAND_DEVICE      1<br>#define CONFIG_MTD_NAND_VERIFY_WRITE    1<br>#define CONFIG_ENV_IS_IN_NAND   1<br>#define CONFIG_ENV_SIZE                 0x20000<br>#define CONFIG_ENV_OFFSET               0x40000<br>4.      在arch/arm/include/asm/arch‐s3c24x0/s3c24x0.h中增加：<br>struct s3c2440_nand {<br>u32 NFCONF;<br>u32 NFCONT;<br>u32 NFCMD;<br>u32 NFADDR;<br>u32 NFDATA;<br>u32 NFMECCD0;<br>u32 NFMECCD1;<br>u32 NFSECCD;<br>u32 NFSTAT;<br>u32 NFESTAT0;<br>u32 NFESTAT1;<br>u32 NFMECC0;<br>u32 NFMECC1;<br>u32 NFSECC;<br>u32 NFSBLK;<br>u32 NFEBLK;<br>};<br>5.      在board/samsung/tq2440/tq2440.c中增加nand读写的函数：<br>#define GSTATUS1        (<em>(volatile unsigned int </em>)0x560000B0)<br>#define BUSY            1<br>#define NAND_SECTOR_SIZE        512<br>#define NAND_BLOCK_MASK (NAND_SECTOR_SIZE – 1)<br>#define NAND_SECTOR_SIZE_LP     2048<br>#define NAND_BLOCK_MASK_LP      (NAND_SECTOR_SIZE_LP – 1)<br>char bLARGEBLOCK;                       //HJ_add 20090807<br>char b128MB;                            //HJ_add 20090807<br>/<em> 供外部调用的函数 </em>/<br>void nand_init_ll(void);<br>int nand_read_ll(unsigned char <em>buf, unsigned long start_addr, int size);<br>int nand_read_ll_lp(unsigned char </em>buf, unsigned long start_addr, int size);<br>static void nand_reset(void);<br>static void wait_idle(void);<br>static void nand_select_chip(void);<br>static void nand_deselect_chip(void);<br>static void write_cmd(int cmd);<br>static void write_addr(unsigned int addr);<br>static void write_addr_lp(unsigned int addr);<br>static unsigned char read_data(void);<br>int NF_ReadID(void);                            //HJ_add 20090807<br>/<em> S3C2440的NAND Flash操作函数 </em>/<br>/<em> 复位 </em>/<br>static void nand_reset(void)<br>{<br>nand_select_chip();<br>write_cmd(0xff);  // 复位命令<br>wait_idle();<br>nand_deselect_chip();<br>}<br>/<em> 等待NAND Flash就绪 </em>/<br>static void wait_idle(void)<br>{<br>int i;<br>struct s3c2440_nand <em> s3c2440nand = (struct s3c2440_nand </em>)0x4e000000;<br>volatile unsigned char <em>p = (volatile unsigned char </em>)&amp;s3c2440nand-&gt;NFSTAT;<br>while(!(<em>p &amp; BUSY))<br>for(i=0; iNFCONT &amp;= ~(1NFCONT |= (1NFCMD;
</em>p = cmd;<br>}<br>/<em> 发出地址 </em>/<br>static void write_addr(unsigned int addr)<br>{<br>int i;<br>struct s3c2440_nand <em> s3c2440nand = (struct s3c2440_nand </em>)0x4e000000;<br>volatile unsigned char <em>p = (volatile unsigned char </em>)&amp;s3c2440nand-&gt;NFADDR;<br><em>p = addr &amp; 0xff;<br>for(i=0; i&gt; 9) &amp; 0xff;<br>for(i=0; i&gt; 17) &amp; 0xff;<br>for(i=0; i&gt; 25) &amp; 0xff;<br>for(i=0; iNFADDR;<br>int col, page;<br>col = addr &amp; NAND_BLOCK_MASK_LP;<br>page = addr / NAND_SECTOR_SIZE_LP;
</em>p = col &amp; 0xff;                        /<em> Column Address A0~A7 </em>/<br>for(i=0; i&gt; 8) &amp; 0x0f;          /<em> Column Address A8~A11 </em>/<br>for(i=0; i&gt; 8) &amp; 0xff;  /<em> Row Address A20~A27 </em>/<br>for(i=0; i&gt; 16) &amp; 0x03; /<em> Row Address A28~A29 </em>/<br>for(i=0; iNFDATA;<br>return <em>p;<br>}<br>/</em> 初始化NAND Flash <em>/<br>void nand_init_ll(void)<br>{<br>struct s3c2440_nand </em> s3c2440nand = (struct s3c2440_nand <em>)0x4e000000;<br>#define TACLS   0<br>#define TWRPH0  3<br>#define TWRPH1  0<br>/</em> 设置时序 <em>/<br>s3c2440nand-&gt;NFCONF = (TACLSNFCONT = (1NFADDR;<br>b128MB = 1;<br>n4thcycle = nBuff = 0;<br>nand_init_ll();<br>nand_select_chip();<br>write_cmd(0x90);        // read id command
</em>p=0x00 &amp; 0xff;<br>for ( i = 0; i = 0xA0)<br>{<br>b128MB = 0;<br>}<br>return (pDID);<br>}<br>#endif<br>/<em> 读函数 </em>/<br>int nand_read_ll(unsigned char <em>buf, unsigned long start_addr, int size)<br>{<br>int i, j;<br>char dat;<br>struct s3c2440_nand </em> s3c2440nand = (struct s3c2440_nand <em>)0x4e000000;<br>volatile unsigned char </em>p = (volatile unsigned char <em>)&amp;s3c2440nand-&gt;NFADDR;<br>if ((start_addr &amp; NAND_BLOCK_MASK) || (size &amp; NAND_BLOCK_MASK))<br>{<br>return -1;    /</em> 地址或长度不对齐 <em>/<br>}<br>/</em> 选中芯片 <em>/<br>nand_select_chip();<br>for(i=start_addr; i &gt; 9) &amp; 0xff;<br>for(j=0; j&gt; 17) &amp; 0xff;<br>for(j=0; j&gt; 25) &amp; 0xff;<br>for(j=0; jNFADDR;<br>if ((start_addr &amp; NAND_BLOCK_MASK_LP) || (size &amp; NAND_BLOCK_MASK_LP))<br>{<br>return -1;    /</em> 地址或长度不对齐 <em>/<br>}<br>/</em> 选中芯片 <em>/<br>nand_select_chip();<br>for(i=start_addr; i &gt; 8) &amp; 0xff;                /</em> Row Address A20~A27 <em>/<br>for(j=0; j&gt; 16) &amp; 0x03;         /</em> Row Address A28~A29 */<br>for(j=0; j</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> embeded </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
            <tag> 移植 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移植u-boot-2010.09到tq2440(二)]]></title>
      <url>http://hackqiang.org/2011/02/08/e7-a7-bb-e6-a4-8du-boot-2010-09-e5-88-b0tq2440-e4-ba-8c/</url>
      <content type="html"><![CDATA[<p>三．  移植的准备工作<br>注意：cd ~/u-boot-2010.09表示进入u-boot源码的根目录。<br>1.      修改顶层目录的Makefile，增加tq2440的配置：<br>tq2440_config:  unconfig<br>@$(MKCONFIG) $@ arm arm920t tq2440 samsung s3c24x0<br>同时修改160行为自己的交叉链，例如我的：<br>CROSS_COMPILE ?=arm-linux-<br>2.      因为2440与2410的差异并不大，所以通过复制s3c2410的源代码文件进行修改能大大减小移植的工作量：<br>cd ~/u-boot-2010.09<br>cp include/configs/smdk2410.h include/configs/tq2440.h<br>cp -r board/samsung/smdk2410 board/samsung/tq2440<br>mv board/samsung/tq2440/smdk2410.c board/samsung/tq2440/tq2440.c<br>修改board/samsung/tq2440/Makefile 的28行<br>COBJS   := smdk2410.o flash.o<br>为<br>COBJS   := tq2440.o flash.o<br>3.      在arch/arm/cpu/arm920t/u-boot.lds的43行增加：<br>board/samsung/tq2440/lowlevel_init.o (.text)<br>board/samsung/tq2440/tq2440.o (.text)<br>4.      测试准备工作<br>make distclean<br>make tq2440_config<br>make<br>如果不出问题的话，将会在u-boot的根目录生成一个u-boot.bin文件，这样，准备工作就完成了，下面就开始真正的移植啦！<br>四．    硬件相关修改<br>1.      中断部分的修改<br>修改arch/arm/cpu/arm920t/start.S的中断代码为：</p>
<p>#define pWTCON  0x53000000</p>
<p>#define INTMSK  0x4A000008</p>
<p>#define INTSUBMSK       0x4A00001C</p>
<p>#define CLKDIVN 0x4C000014<br>ldr r1, =0x7fff<br>ldr r0, =INTSUBMSK<br>str r1, [r0]<br>2.      cpu时钟设置部分的修改<br>我选择增加一个c函数clock_init的方式来修改系统时钟，因为用到了堆栈，所以将设置堆栈的代码剪切到前面，然后跳转到clock_init函数：<br>/<em> Set up the stack                                                 </em>/<br>stack_setup:<br>ldr     r0, _TEXT_BASE          /<em> upper 128 KiB: relocated uboot   </em>/<br>sub     r0, r0, #CONFIG_SYS_MALLOC_LEN  /<em> malloc area              </em>/<br>sub     r0, r0, #CONFIG_SYS_GBL_DATA_SIZE /<em> bdinfo                 </em>/</p>
<p>#ifdef CONFIG_USE_IRQ<br>sub     r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)</p>
<p>#endif<br>sub     sp, r0, #12             /<em> leave 3 words for abort-stack    </em>/<br>bl      clock_init<br>在board/samsung/tq2440/tq2440.c中删除掉board_init函数中有关时钟修改的代码，同时增加函数clock_init:<br>static inline void delay (unsigned long loops)<br>{<br><strong>asm</strong> volatile (“1:\n”<br>“subs %0, %1, #1\n”<br>“bne 1b”:”=r” (loops):”0″ (loops));<br>}<br>void clock_init(void)<br>{<br>struct s3c24x0_clock_power <em>clk_power = (struct s3c24x0_clock_power </em>)0x4C000000;</p>
<p>#define S3C2440_CLKDIV                  0x05    /<em> FCLK:HCLK:PCLK = 1:4:8, UCLK = UPLL </em>/</p>
<p>#define S3C2440_UPLL_48MHZ              ((0x38CLKDIVN = S3C2440_CLKDIV;<br>/<em> change to asynchronous bus mod </em>/<br><strong>asm</strong>(  “mrc   p15, 0, r1, c1, c0, 0\n” /<em> read ctrl register </em>/<br>“orr   r1, r1, #0xc0000000\n” /<em> Asynchronous </em>/<br>“mcr   p15, 0, r1, c1, c0, 0\n” /<em> write ctrl register  </em>/<br>:::”r1″ );<br>/<em> to reduce PLL lock time, adjust the LOCKTIME register </em>/<br>clk_power-&gt;LOCKTIME = 0xFFFFFF;<br>/<em> configure UPLL </em>/<br>clk_power-&gt;UPLLCON = S3C2440_UPLL_48MHZ;                //fin=12.000MHz<br>/<em> some delay between MPLL and UPLL </em>/<br>delay (4000);<br>/<em> configure MPLL </em>/<br>clk_power-&gt;MPLLCON = S3C2440_MPLL_400MHZ;               //fin=12.000MHz<br>}<br>同时还需要修改arch/arm/cpu/arm920t/s3c24x0/speed.c:<br>67行修改为：<br>return (CONFIG_SYS_CLK_FREQ <em> m </em> 2) / (p bd-&gt;bi_arch_number = MACH_TYPE_TQ2440;<br>4.      修改board/samung/tq2440/lowleve_init.S中的几个寄存器:</p>
<p>#define DW8                     (0x0)</p>
<p>#define DW16                    (0x1)</p>
<p>#define DW32                    (0x2)</p>
<p>#define WAIT                    (0x1</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> embeded </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
            <tag> 移植 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移植u-boot-2010.09到tq2440(一)]]></title>
      <url>http://hackqiang.org/2011/02/08/e7-a7-bb-e6-a4-8du-boot-2010-09-e5-88-b0tq2440-e4-b8-80/</url>
      <content type="html"><![CDATA[<p>前言:<br>很久之前就买了块s3c2440的开发板tq2440,之前一直都是用天嵌提供的u-boot，但是这个u-boot的版本太老，使用的还是parameter_struct的传递内核参数的方法，这种传递参数的方法主要是2.6 之前的内核使用的方式。于是我就有了移植u-boot的想法，在网上看了不少u-boot移植的资料，但是大多都是讲到一些驱动的移植后就结束了，竟然连linux内核的引导都没有讲清楚，感觉很不完整，所以我打算再做一个文档作为补充。所以，我的移植重点在于完整的实现一个最最基本的bootloader的功能—从cpu加电开始，一直到bootloader完全的把cpu的控制权限交给内核，什么NOR Flash，网卡，统统用不到，所以不移植。<br>一．    移植的硬软件环境<br>移植版本：u-boot-2010.09<br>硬件参数：tq2440开发板，s3c2440A,64M的SDRAM，256M的nand Flash。<br>二．    U-boot引导内核的基本过程<br>接触过bootloader的人都知道bootloader是分为两个部分，即stage1和stage2，stage1的主要工作为：<br>1．     定义入口，设置异常向量；<br>2．     初始化硬件，如cpu，内存；<br>3．     将rom中的代码复制到ram中；<br>4．     初始化C的运行环境；<br>5．     跳转到ram中继续运行。<br>有了stage1的铺垫，stage2的工作就显得比较简单了：<br>1．     调用一些列的初始化函数，例如初始化nand flash；<br>2．     如果是交互模式，则进入主loop()，循环的接收执行用户输入的命令；<br>3．     如果不是交互模式，对于zImage格式的内核，就复制nand flash中的内核映像到ram的指定位置（如s3c2440为0x30008000）,然后跳转到指定位置执行（这里的详细过程，以后会讲到），此刻，bootloader的使命就完成了，内核已经取得了cpu的完全控制。</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> embeded </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
            <tag> 移植 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu右键添加打开终端]]></title>
      <url>http://hackqiang.org/2011/02/03/ubuntu-e5-8f-b3-e9-94-ae-e6-b7-bb-e5-8a-a0-e6-89-93-e5-bc-80-e7-bb-88-e7-ab-af/</url>
      <content type="html"><![CDATA[<p>sudo apt-get install nautilus-open-terminal</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[姗姗来迟的2010年终总结]]></title>
      <url>http://hackqiang.org/2011/01/04/e5-a7-97-e5-a7-97-e6-9d-a5-e8-bf-9f-e7-9a-842010-e5-b9-b4-e7-bb-88-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>现在是1月4日晚上11点45分，要是再晚写15分钟，我的年终总结就要迟到整整6天了。<br>关于工作，今年6月初，我正式完成论文答辩，离开了生活了四年的校园，离开了熟悉的同学，只身来到南京工作。一直在8月初，我才转正，在公司主要做一个产品的linux客户端，说实话，并不是非常顺利，客户端的需求一直在改，一直没有稳定下来，导致我第一个版本的客户端都没怎么测试就被抛弃。虽然这个客户端并没有产生直接的经济效益，但是通过这段时间的磨练，我学到了很多东西，有些是显而易见的，而有些则是潜移默化的。 但是经过近半年的工作，我也明显的发现了工作上的不足：<br>不太注重文档上的东西，这一点可以从我每周的工作报告看得出；<br>有时考虑问题很片面，经常顾此失彼；<br>容易自我满足，经常性的沾沾自喜；<br>对系统的细节不是很清楚，直接导致有时都不敢确定自己代码的健壮；<br>对有些基本的系统调用和函数库不熟，往往是一边写代码，一边man；<br>还有一点很很重要，我一点都不够低调，说话也不够委婉；<br>10月底开始看内核，对内核有了一个大概的了解，也看了一点驱动方面的书，收获不是很大，看的似懂非懂的。在我打算深入的时候，突然发现原来自己连表面上的东西尚未掌握：前段时间我无意间翻了一翻APUE，突然发现自己有如此多的章节没有看过，大概翻了一下后，我突然觉得自己对内核和驱动有了一个新的认识，于是决定在过年前把这本书好好的在读一遍，现在已经读了将近一半。除了APUE，年前我还需要把UNP再通读一边，因为现在工作涉及网络编程不是很多，所以打算先复习下，等用到了在细细的研究。<br>关于钱，平时也怎么规划，算是一个标准的“月光”。现在我的存款还是3位数，而且刚刚工作的时候还找家里要了不少钱，比较惭愧。但是我想在新的一年里会好起来的。<br>至于我的宝贝灵灵，除了在做菜的时候我们两会争论先放油还是先放水之类的问题外，我们相处的还是很和睦的，希望我们两个人能一直保持这份和睦和相亲相爱。<br>总结<br>2010年开始工作后，知识涨了不少，与灵灵的感情也算稳定，虽然钱没存多少，但是我还是看到了我美好的未来 。2010年对我来说是一个很好的开端，希望在2011年我能保持好这份奋斗的热情，为俞强、他家人、他亲爱的阿猪崽的将来更加努力的生活。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为u-boot增加自定义命令]]></title>
      <url>http://hackqiang.org/2011/01/01/e4-b8-bau-boot-e5-a2-9e-e5-8a-a0-e8-87-aa-e5-ae-9a-e4-b9-89-e5-91-bd-e4-bb-a4/</url>
      <content type="html"><![CDATA[<p>最近需要给u-boot增加一个命令，上网搜了搜，是找到了方法，但是对于我移植的版本（2010-09）并不适用，于是自己摸索了一翻，才发现是如此的简单。<br>例如我要增加一个boot_zImage的命令，操作如下：<br>第一步：在common目录下建立一个cmd_boot_zImage.c的文件；<br>第二步：修改cmd_boot_zImage.c，在文件尾添加关键代码：<br>U_BOOT_CMD(<br>boot_zImage, 1, 0,      do_boot_zImage,<br>“cmd_boot_zImage – boot Linux’s zImage\n”,<br>“”<br>);<br>第一行中各字段含义：<br>boot_zImage：在u-boot中运行的命令；<br>1：最大参数个数<br>0：repeat last command<br>第二行为usage信息；<br>第三行为help信息。<br>第三步：修改common/Makefile，增加：<br>COBJS-y += cmd_boot_zImage.o<br>OK，搞定！</p>
]]></content>
      
        <categories>
            
            <category> embeded </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> u-boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[套接口编程的5个隐患（转）]]></title>
      <url>http://hackqiang.org/2010/12/30/e5-a5-97-e6-8e-a5-e5-8f-a3-e7-bc-96-e7-a8-8b-e7-9a-845-e4-b8-aa-e9-9a-90-e6-82-a3-ef-bc-88-e8-bd-ac-ef-bc-89/</url>
      <content type="html"><![CDATA[<p>无意间看见，觉得很不错。<br><a href="http://www.ibm.com/developerworks/cn/linux/l-sockpit/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/linux/l-sockpit/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于SIGPIPE]]></title>
      <url>http://hackqiang.org/2010/12/30/e5-85-b3-e4-ba-8esigpipe/</url>
      <content type="html"><![CDATA[<p>最近在做网络编程，有时候程序会挂掉，调试发现程序收到了SIGPIPE，造成这个信号的原因可以自行google，因为程序收到SIGPIPE的默认动作是终止程序，所以我们需要对这个信号进行屏蔽。<br>在多进程的环境下，下面代码可以解决问题：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>struct<br>sigaction sa<br>;<br>sa.<br>sa_handler<br>=<br>SIG_IGN<br>;<br>sa.<br>sa_flags<br>=<br>0<br>;<br>sigemptyset<br>(<br>&amp;<br>amp<br>;<br>sa.<br>sa_mask<br>)<br>;<br>sigaddset<br>(<br>&amp;<br>amp<br>;<br>sa.<br>sa_mask<br>,<br>SIGPIPE<br>)<br>;<br>if<br>(<br>sigaction<br>(<br>SIGPIPE<br>,<br>&amp;<br>amp<br>;<br>sa<br>,<br>0<br>)<br>)<br>{<br>perror<br>(<br>“failed to ignore SIGPIPE”<br>)<br>;<br>exit<br>(<br>-<br>1<br>)<br>;<br>}<br>如果是在多线程的环境下，在创建线程之前需要：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>sigset_t signal_mask<br>;<br>sigemptyset<br>(<br>&amp;<br>amp<br>;<br>signal_mask<br>)<br>;<br>sigaddset<br>(<br>&amp;<br>amp<br>;<br>signal_mask<br>,<br>SIGPIPE<br>)<br>;<br>if<br>(<br>pthread_sigmask<br>(<br>SIG_BLOCK<br>,<br>&amp;<br>amp<br>;<br>signal_mask<br>,<br>NULL<br>)<br>)<br>{<br>printf<br>(<br>“block sigpipe error<br>\n<br>“<br>)<br>;<br>}</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SIGPIPE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终端颜色]]></title>
      <url>http://hackqiang.org/2010/12/23/e7-bb-88-e7-ab-af-e9-a2-9c-e8-89-b2/</url>
      <content type="html"><![CDATA[<p><a href="http://basiccoder.com/output-colorful-words-in-terminal.html" target="_blank" rel="external">http://basiccoder.com/output-colorful-words-in-terminal.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 终端颜色 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[调试core文件]]></title>
      <url>http://hackqiang.org/2010/12/17/e8-b0-83-e8-af-95core-e6-96-87-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>经常遇到段错误，用core调试能很轻松的找到出错点。<br>系统默认是不产生core文件的，要产生core文件，首先用下面的命令查看：<br>ulimit -a<br>可以看到这一行：<br>core file size          (blocks, -c) 0<br>现在只要运行命令<br>ulimit -c unlimited<br>就能在程序内存错误的时候产生core文件，但是要注意，这个修改只是展示的，如果换了终端或重启，修改会被还原的。<br>现在，如果程序段错误，就会生成一个core.pid的core文件（rhel5.5），接下来，只需要：<br>gdb  a.out core.1333<br>进入后，用bt命令查看段错误发生的函数及其堆栈。<br>很方便吧</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
            <tag> core </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用VS？太别扭]]></title>
      <url>http://hackqiang.org/2010/12/16/e7-94-a8vs-ef-bc-9f-e5-a4-aa-e5-88-ab-e6-89-ad/</url>
      <content type="html"><![CDATA[<p>之前一直都是在Ubuntu下作开发，自从ubuntu挂掉之后，我就没在折腾，直接换了XP+虚拟机，目前我写代码的方式是这样的：<br>在虚拟机中装了一个rhel5.5，开启ssh；<br>在windows上用ssh客户端连接到虚拟机中的rhel5.5，我又一个习惯，喜欢在写源码之前就把makefile写好，这样我就用这个ssh客户端做编译测试；<br>同时在虚拟机中开一个与host的共享文件夹，所以我在windows上可以很方便的对源代码进行编辑，之前一直用notepad++，后来发现UE更适合写程序，现在就一直在用UE，其实这里有一个重要的原因，就是UE有ssh的插件，在写代码的时候很方便的。<br>同事（windows程序员）发现我这个组合后，建议我用vs03做代码编辑器。我就试探性的装上了vs03，结果不到一天，卸掉了。<br>原因如下：<br>1.作为一个linux程序员，在windows下写程序已经让我觉得无地自容了，现在竟然还要用vs，想想都别扭；<br>2.我的电脑配置也不咋滴（E2160，2G），本来程序开多了就卡卡的，vs运行的不是很顺畅；<br>3.用不惯vs，功能强大，但是大部分用不到。<br>刚刚开始的时候，我总是对linux下没有一个很好的IDE耿耿于怀，但是自从我能熟练的用GDB，make等等之后，我用着装了若干插件的gedit还是很爽的，呵呵。<br>有没有IDE，对我已经不是很重要了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有用的代码小片段4-C实现修改配置文件]]></title>
      <url>http://hackqiang.org/2010/12/10/e6-9c-89-e7-94-a8-e7-9a-84-e4-bb-a3-e7-a0-81-e5-b0-8f-e7-89-87-e6-ae-b54-c-e5-ae-9e-e7-8e-b0-e4-bf-ae-e6-94-b9-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>如果配置文件时这样的：</p>
<p>#this is a simple configure file<br>myname=yuqiang<br>age=23<br>..<br>..<br>..<br>那面下面两个函数应该操作的不错：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>/*</p>
<ul>
<li>getConf: get a config value from a configfile.<br>*</li>
<li>args:</li>
<li>confname:   config name</li>
<li>value:      the value of config name<br>*</li>
<li>return:</li>
<li>0:  success</li>
<li>-1: failed<br><em>
</em>/<br>int<br>getConf<br>(<br>const<br>char<br><em><br>configfile<br>,<br>const<br>char
</em><br>confname<br>,<br>char<br><em><br>value<br>)<br>{<br>int<br>i<br>;<br>char<br>line<br>[<br>128<br>]<br>=<br>{<br>0<br>}<br>;<br>char<br>conbuff<br>[<br>128<br>]<br>=<br>{<br>0<br>}<br>;<br>int<br>math<br>=<br>0<br>;<br>FILE
</em><br>f<br>=<br>fopen<br>(<br>configfile<br>,<br>“r”<br>)<br>;<br>if<br>(<h1 id="f"><a href="#f" class="headerlink" title="f"></a>f</h1>NULL<br>)<br>{<br>show_debug_info<br>(<br>1<br>,<br>“[error] open config file %s”<br>,<br>configfile<br>)<br>;<br>return<br>-<br>1<br>;<br>}<br>while<br>(<br>fgets<br>(<br>line<br>,<br>sizeof<br>(<br>line<br>)<br>,<br>f<br>)<br>)<br>{<br>if<br>(<br>*<h1 id="line"><a href="#line" class="headerlink" title="line"></a>line</h1>‘#’<br>||<br>*<h1 id="line-1"><a href="#line-1" class="headerlink" title="line"></a>line</h1>‘<br>\n<br>‘<br>)<br>{<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>continue<br>;<br>}<br>memset<br>(<br>conbuff<br>,<br>0<br>,<br>sizeof<br>(<br>conbuff<br>)<br>)<br>;<br>i<br>=<br>0<br>;<br>while<br>(<br>line<br>[<br>i<br>]<br>!=<br>‘=’<br>&amp;&amp;<br>i<br>&lt;<br>strlen<br>(<br>line<br>)<br>-<br>1<br>)<br>{<br>conbuff<br>[<br>i<br>]<br>=<br>line<br>[<br>i<br>]<br>;<br>i<br>++;<br>}<br>if<br>(<h1 id="i"><a href="#i" class="headerlink" title="i"></a>i</h1>strlen<br>(<br>line<br>)<br>)<br>{<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>continue<br>;<br>}<br>if<br>(<br>strcmp<br>(<br>conbuff<br>,<br>confname<br>)<br>)<br>{<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>continue<br>;<br>}<br>else<br>{<br>if<br>(<br>strlen<br>(<br>confname<br>)<br>+<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1>strlen<br>(<br>line<br>)<br>)<br>return<br>-<br>1<br>;<br>math<br>=<br>1<br>;<br>memset<br>(<br>value<br>,<br>0<br>,<br>strlen<br>(<br>value<br>)<br>)<br>;<br>memcpy<br>(<br>value<br>,<br>line<br>+<br>strlen<br>(<br>confname<br>)<br>+<br>1<br>,<br>strlen<br>(<br>line<br>)<br>-<br>strlen<br>(<br>confname<br>)<br>-<br>2<br>)<br>;<br>//还有一个’\n’<br>//printf(“|%s|=|%s|\n”,confname,value);<br>break<br>;<br>}<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>}<br>fclose<br>(<br>f<br>)<br>;<br>if<br>(<br>math<br>)<br>return<br>0<br>;<br>else<br>return<br>-<br>1<br>;<br>}<br>/*</li>
<li>setConf: set a config value to a configfile.<br>*</li>
<li>args:</li>
<li>confname:   config name</li>
<li>value:      the value of config name<br>*</li>
<li>return :</li>
<li>0:  success</li>
<li>1:  add a new config</li>
<li>-1: failed<br><em>
</em>/<br>int<br>setConf<br>(<br>const<br>char<br><em><br>configfile<br>,<br>const<br>char
</em><br>confname<br>,<br>const<br>char<br><em><br>value<br>)<br>{<br>char<br>conbuff<br>[<br>128<br>]<br>=<br>{<br>0<br>}<br>;<br>int<br>i<br>;<br>char<br>line<br>[<br>128<br>]<br>=<br>{<br>0<br>}<br>;<br>int<br>math<br>=<br>0<br>;<br>FILE
</em><br>f<br>=<br>fopen<br>(<br>configfile<br>,<br>“r”<br>)<br>;<br>if<br>(<h1 id="f-1"><a href="#f-1" class="headerlink" title="f"></a>f</h1>NULL<br>)<br>{<br>FILE<br>*<br>newf<br>=<br>fopen<br>(<br>configfile<br>,<br>“a”<br>)<br>;<br>if<br>(<h1 id="newf"><a href="#newf" class="headerlink" title="newf"></a>newf</h1>NULL<br>)<br>{<br>show_debug_info<br>(<br>1<br>,<br>“[error] open config file %s”<br>,<br>configfile<br>)<br>;<br>return<br>-<br>1<br>;<br>}<br>sprintf<br>(<br>conbuff<br>,<br>“%s=%s<br>\n<br>“<br>,<br>confname<br>,<br>value<br>)<br>;<br>fputs<br>(<br>conbuff<br>,<br>newf<br>)<br>;<br>fclose<br>(<br>newf<br>)<br>;<br>return<br>1<br>;<br>}<br>/<em> open a tmp file to save config </em>/<br>FILE<br>*<br>tmp<br>=<br>tmpfile<br>(<br>)<br>;<br>if<br>(<h1 id="tmp"><a href="#tmp" class="headerlink" title="tmp"></a>tmp</h1>NULL<br>)<br>{<br>return<br>-<br>1<br>;<br>}<br>/<em>parse config file and save to tmp file</em>/<br>while<br>(<br>fgets<br>(<br>line<br>,<br>sizeof<br>(<br>line<br>)<br>,<br>f<br>)<br>)<br>{<br>memset<br>(<br>conbuff<br>,<br>0<br>,<br>sizeof<br>(<br>conbuff<br>)<br>)<br>;<br>if<br>(<br>*<h1 id="line-2"><a href="#line-2" class="headerlink" title="line"></a>line</h1>‘#’<br>||<br>*<h1 id="line-3"><a href="#line-3" class="headerlink" title="line"></a>line</h1>‘<br>\n<br>‘<br>)<br>{<br>fputs<br>(<br>line<br>,<br>tmp<br>)<br>;<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>continue<br>;<br>}<br>i<br>=<br>0<br>;<br>while<br>(<br>line<br>[<br>i<br>]<br>!=<br>‘=’<br>&amp;&amp;<br>i<br>&lt;<br>strlen<br>(<br>line<br>)<br>)<br>{<br>conbuff<br>[<br>i<br>]<br>=<br>line<br>[<br>i<br>]<br>;<br>i<br>++;<br>}<br>if<br>(<br>strcmp<br>(<br>conbuff<br>,<br>confname<br>)<br>)<br>{<br>fputs<br>(<br>line<br>,<br>tmp<br>)<br>;<br>}<br>else<br>{<br>math<br>=<br>1<br>;<br>memset<br>(<br>conbuff<br>,<br>0<br>,<br>sizeof<br>(<br>conbuff<br>)<br>)<br>;<br>sprintf<br>(<br>conbuff<br>,<br>“%s=%s<br>\n<br>“<br>,<br>confname<br>,<br>value<br>)<br>;<br>fputs<br>(<br>conbuff<br>,<br>tmp<br>)<br>;<br>}<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>}<br>if<br>(<h1 id="math"><a href="#math" class="headerlink" title="math"></a>math</h1>0<br>)<br>{<br>memset<br>(<br>conbuff<br>,<br>0<br>,<br>sizeof<br>(<br>conbuff<br>)<br>)<br>;<br>sprintf<br>(<br>conbuff<br>,<br>“%s=%s<br>\n<br>“<br>,<br>confname<br>,<br>value<br>)<br>;<br>fputs<br>(<br>conbuff<br>,<br>tmp<br>)<br>;<br>}<br>fclose<br>(<br>f<br>)<br>;<br>fflush<br>(<br>tmp<br>)<br>;<br>rewind<br>(<br>tmp<br>)<br>;<br>/<em>copy tmp file’s data to config file</em>/<br>f<br>=<br>fopen<br>(<br>configfile<br>,<br>“w+”<br>)<br>;<br>if<br>(<h1 id="f-2"><a href="#f-2" class="headerlink" title="f"></a>f</h1>NULL<br>)<br>{<br>show_debug_info<br>(<br>1<br>,<br>“[error] open config file %s”<br>,<br>configfile<br>)<br>;<br>return<br>-<br>1<br>;<br>}<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>while<br>(<br>fgets<br>(<br>line<br>,<br>sizeof<br>(<br>line<br>)<br>,<br>tmp<br>)<br>)<br>{<br>fputs<br>(<br>line<br>,<br>f<br>)<br>;<br>memset<br>(<br>line<br>,<br>0<br>,<br>sizeof<br>(<br>line<br>)<br>)<br>;<br>}<br>fclose<br>(<br>tmp<br>)<br>;<br>fclose<br>(<br>f<br>)<br>;<br>if<br>(<br>math<br>)<br>return<br>0<br>;<br>else<br>return<br>1<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码片段 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[找到一篇介绍GDB的文章，不错！]]></title>
      <url>http://hackqiang.org/2010/12/02/e6-89-be-e5-88-b0-e4-b8-80-e7-af-87-e4-bb-8b-e7-bb-8dgdb-e7-9a-84-e6-96-87-e7-ab-a0-ef-bc-8c-e4-b8-8d-e9-94-99-ef-bc-81/</url>
      <content type="html"><![CDATA[<p><a href="http://dsec.pku.edu.cn/~yuhj/wiki/gdb.html" target="_blank" rel="external">http://dsec.pku.edu.cn/~yuhj/wiki/gdb.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有用的代码小片段3-linux终端进度条]]></title>
      <url>http://hackqiang.org/2010/11/26/e6-9c-89-e7-94-a8-e7-9a-84-e4-bb-a3-e7-a0-81-e5-b0-8f-e7-89-87-e6-ae-b53-linux-e7-bb-88-e7-ab-af-e8-bf-9b-e5-ba-a6-e6-9d-a1/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>int<br>progressBar<br>(<br>unsigned<br>int<br>current<br>,<br>unsigned<br>int<br>total<br>,<br>double<br>speed<br>)<br>{<br>double<br>prcnt<br>;<br>int<br>num_of_dots<br>;<br>char<br>buffer<br>[<br>80<br>]<br>=<br>{<br>0<br>}<br>;<br>int<br>width<br>;<br>/<em> get term width </em>/<br>FILE<br><em><br>fp<br>;<br>prcnt<br>=<br>1.0
</em><br>current<br>/<br>total<br>;<br>fp<br>=<br>popen<br>(<br>“stty size | cut -d<br>\”<br>\”<br>-f2”<br>,<br>“r”<br>)<br>;<br>fgets<br>(<br>buffer<br>,<br>sizeof<br>(<br>buffer<br>)<br>,<br>fp<br>)<br>;<br>pclose<br>(<br>fp<br>)<br>;<br>width<br>=<br>atoi<br>(<br>buffer<br>)<br>;<br>if<br>(<br>width<br>&lt;<br>32<br>)<br>{<br>printf<br>(<br>“\e[1A%0.2f%s  %3d%% completed.<br>\n<br>“<br>,<br>speed<br>,<br>“Mb/s”<br>,<br>(<br>int<br>)<br>(<br>prcnt<br><em><br>100<br>)<br>)<br>;<br>}<br>else<br>{<br>num_of_dots<br>=<br>width<br>-<br>20<br>;<br>char
</em><br>pline_to_print<br>=<br>(<br>char<br><em><br>)<br>malloc<br>(<br>sizeof<br>(<br>char<br>)
</em><br>width<br>)<br>;<br>int<br>dots<br>=<br>(<br>int<br>)<br>(<br>num_of_dots<br><em><br>prcnt<br>)<br>;<br>memset<br>(<br>pline_to_print<br>,<br>0<br>,<br>width<br>)<br>;<br>memset<br>(<br>pline_to_print<br>,<br>‘&gt;’<br>,<br>dots<br>)<br>;<br>memset<br>(<br>pline_to_print<br>+<br>dots<br>,<br>‘ ‘<br>,<br>num_of_dots<br>-<br>dots<br>)<br>;<br>printf<br>(<br>“\e[1A %0.2fMb/s [%s] %3d%%<br>\n<br>“<br>,<br>speed<br>,<br>pline_to_print<br>,<br>(<br>int<br>)<br>(<br>prcnt
</em><br>100<br>)<br>)<br>;<br>free<br>(<br>pline_to_print<br>)<br>;<br>}<br>return<br>0<br>;<br>}<br>使用方法：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>main<br>(<br>)<br>{<br>int<br>i<br>;<br>for<br>(<br>i<br>=<br>0<br>;<br>i<br>&lt;<br>100<br>;<br>i<br>++<br>)<br>{<br>progressBar<br>(<br>i<br>,<br>99<br>,<br>8.55<br>)<br>;<br>usleep<br>(<br>800<br>)<br>;<br>}<br>}</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码片段 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[云，真的来了。]]></title>
      <url>http://hackqiang.org/2010/11/25/e4-ba-91-ef-bc-8c-e7-9c-9f-e7-9a-84-e6-9d-a5-e4-ba-86-e3-80-82/</url>
      <content type="html"><![CDATA[<p>我知道，云计算的概念已经存在很久了，但是我却一直没明白他的真正含义，今天用了用webQQ，突然觉悟了 。<br>我平时使用虾米听歌，使用ubuntu one来备份数据到服务器，使用webQQ与朋友交流，在豆瓣上看资料，在youku上看视频电影，使用xmarks在各个系统的浏览器上同步我的书签。。。<br>也许未来的网络生涯只需要一个浏览器。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又是内存泄漏，valgrind！]]></title>
      <url>http://hackqiang.org/2010/11/24/e5-8f-88-e6-98-af-e5-86-85-e5-ad-98-e6-b3-84-e6-bc-8f-ef-bc-8cvalgrind-ef-bc-81/</url>
      <content type="html"><![CDATA[<p>今天测试程序的时候，想看看CPU的占用率怎么样，无意间发现进程使用的内存一直增长。<br>果不其然，一会之后我的程序就被操作系统kill掉了。<br>以前记得有个内存泄漏的检测工具，不过好像有点麻烦，还要修改源代码。<br>同事给我推荐valgrind，果真很强大阿！<br>?<br>View Code<br>BASH<br>1<br>valgrind<br>–leak-check<br>=full .<br>/<br>test<br>如果输出结果太多不好看的话，可以增加 –log-file=valgrind_log ，在文件中慢慢分析。</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> valgrind </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[刘翔，13.09，很犀利]]></title>
      <url>http://hackqiang.org/2010/11/24/e5-88-98-e7-bf-94-ef-bc-8c13-09-ef-bc-8c-e5-be-88-e7-8a-80-e5-88-a9/</url>
      <content type="html"><![CDATA[<p>起跑的瞬间，真的很扣人心弦啊。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 刘翔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[要装杀毒软件。]]></title>
      <url>http://hackqiang.org/2010/11/22/e8-a6-81-e8-a3-85-e6-9d-80-e6-af-92-e8-bd-af-e4-bb-b6-e3-80-82/</url>
      <content type="html"><![CDATA[<p>前段时间在淘宝上买东西，结果不是很满意，给了差评。<br>结果卖家企图用300块换我的差评，被我拒绝后，<br>竟然，竟然，我的淘宝账号被盗了，差评也被删掉了。<br>最近在和淘宝交涉恢复差评，目前已取得突破性进展。<br>虽说我没装杀毒软件，但是不至于怎么被盗的号都不知道吧。有点匪夷所思啊。<br>哎，LINUX的裸奔可不能用到windows上啊。主要还是因为linux的桌面系统不够流行啊，连一些主流的网上银行都不支持，搞的我要经常用windows买东西，这下杯具产生了。幸好没有很大的损失，算是吃一处长一智吧。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[有用的代码小片段2-TCP,Socket,Select]]></title>
      <url>http://hackqiang.org/2010/11/19/e6-9c-89-e7-94-a8-e7-9a-84-e4-bb-a3-e7-a0-81-e5-b0-8f-e7-89-87-e6-ae-b52-tcpsocketselect/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153</p>
<p>#define MAXCONN 5 //连接队列中的个数<br>int<br>main<br>(<br>)<br>{<br>int<br>fd<br>[<br>MAXCONN<br>]<br>=<br>{<br>0<br>}<br>;<br>//连接的fd<br>int<br>conn_amount<br>;<br>//当前的连接数<br>int<br>sock_fd<br>,<br>new_fd<br>;<br>//监听套接字 连接套接字<br>fd_set fdsr<br>;<br>//文件描述符集的定义<br>int<br>maxsock<br>;<br>struct<br>timeval tv<br>;<br>struct<br>sockaddr_in server_addr<br>;<br>// 服务器的地址信息<br>struct<br>sockaddr_in client_addr<br>;<br>//客户端的地址信息<br>socklen_t sin_size<br>;<br>int<br>ret<br>,<br>i<br>;<br>char<br>buf<br>[<br>256<br>]<br>=<br>{<br>0<br>}<br>;<br>memset<br>(<br>&amp;<br>server_addr<br>,<br>0<br>,<br>sizeof<br>(<br>server_addr<br>)<br>)<br>;<br>server_addr.<br>sin_family<br>=<br>AF_INET<br>;<br>server_addr.<br>sin_port<br>=<br>htons<br>(<br>9999<br>)<br>;<br>server_addr.<br>sin_addr<br>.<br>s_addr<br>=<br>INADDR_ANY<br>;<br>//通配IP<br>//建立sock_fd套接字<br>if<br>(<br>(<br>sock_fd<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)</p>
<h2 id=""><a href="#" class="headerlink" title=")"></a>)</h2><p>1<br>)<br>{<br>perror<br>(<br>“setsockopt”<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>if<br>(<br>bind<br>(<br>sock_fd<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>server_addr<br>,<br>sizeof<br>(<br>server_addr<br>)</p>
<h1 id="-1"><a href="#-1" class="headerlink" title=")"></a>)</h1><p>-<br>1<br>)<br>{<br>perror<br>(<br>“bind error!<br>\n<br>“<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>if<br>(<br>listen<br>(<br>sock_fd<br>,<br>MAXCONN</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=")"></a>)</h2><p>1<br>)<br>{<br>perror<br>(<br>“listen error!<br>\n<br>“<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>printf<br>(<br>“listen port 9999<br>\n<br>“<br>)<br>;<br>conn_amount<br>=<br>0<br>;<br>sin_size<br>=<br>sizeof<br>(<br>client_addr<br>)<br>;<br>maxsock<br>=<br>sock_fd<br>;<br>while<br>(<br>1<br>)<br>{<br>//初始化文件描述符集合<br>FD_ZERO<br>(<br>&amp;<br>fdsr<br>)<br>;<br>//清除描述符集<br>FD_SET<br>(<br>sock_fd<br>,&amp;<br>fdsr<br>)<br>;<br>//把sock_fd加入描述符集<br>//超时的设定<br>tv.<br>tv_sec<br>=<br>30<br>;<br>tv.<br>tv_usec<br>=<br>0<br>;<br>//添加活动的连接<br>for<br>(<br>i<br>=<br>0<br>;<br>i<br>&lt;<br>MAXCONN<br>;<br>i<br>++<br>)<br>{<br>if<br>(<br>fd<br>[<br>i<br>]<br>!=<br>0<br>)<br>{<br>FD_SET<br>(<br>fd<br>[<br>i<br>]<br>,&amp;<br>fdsr<br>)<br>;<br>}<br>}<br>//如果文件描述符中有连接请求会做相应的处理，实现I/O的复用 多用户的连接通讯<br>ret<br>=<br>select<br>(<br>maxsock<br>+<br>1<br>,&amp;<br>fdsr<br>,<br>NULL<br>,<br>NULL<br>,&amp;<br>tv<br>)<br>;<br>if<br>(<br>ret<br>&lt;<br>0<br>)<br>//没有找到有效的连接 失败<br>{<br>perror<br>(<br>“select error!<br>\n<br>“<br>)<br>;<br>break<br>;<br>}<br>else<br>if<br>(</p>
<h1 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h1><p>0<br>)<br>// 指定的时间到，<br>{<br>printf<br>(<br>“timeout<br>\n<br>“<br>)<br>;<br>continue<br>;<br>}<br>//循环判断有效的连接是否有数据到达<br>for<br>(<br>i<br>=<br>0<br>;<br>i<br>&lt;<br>conn_amount<br>;<br>i<br>++<br>)<br>{<br>if<br>(<br>FD_ISSET<br>(<br>fd<br>[<br>i<br>]<br>,&amp;<br>fdsr<br>)<br>)<br>{<br>memset<br>(<br>buf<br>,<br>0<br>,<br>256<br>)<br>;<br>ret<br>=<br>recv<br>(<br>fd<br>[<br>i<br>]<br>,<br>buf<br>,<br>sizeof<br>(<br>buf<br>)<br>,<br>0<br>)<br>;<br>if<br>(<br>ret<br>&lt;=<br>0<br>)<br>//客户端连接关闭，清除文件描述符集中的相应的位<br>{<br>printf<br>(<br>“client[%d] close<br>\n<br>“<br>,<br>i<br>)<br>;<br>close<br>(<br>fd<br>[<br>i<br>]<br>)<br>;<br>FD_CLR<br>(<br>fd<br>[<br>i<br>]<br>,&amp;<br>fdsr<br>)<br>;<br>fd<br>[<br>i<br>]<br>=<br>0<br>;<br>conn_amount<br>–;<br>}<br>else<br>//否则有相应的数据发送过来 ，进行相应的处理<br>{<br>//buf[ret]=0;<br>printf<br>(<br>“%d<br>\n<br>“<br>,<br>ret<br>)<br>;<br>printf<br>(<br>“client[%d] send:%s<br>\n<br>“<br>,<br>i<br>,<br>buf<br>)<br>;<br>send<br>(<br>fd<br>[<br>i<br>]<br>,<br>buf<br>,<br>sizeof<br>(<br>buf<br>)<br>,<br>0<br>)<br>;<br>}<br>}<br>}<br>//for<br>if<br>(<br>FD_ISSET<br>(<br>sock_fd<br>,&amp;<br>fdsr<br>)<br>)<br>{<br>new_fd<br>=<br>accept<br>(<br>sock_fd<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>client_addr<br>,&amp;<br>sin_size<br>)<br>;<br>if<br>(<br>new_fd<br>&lt;=<br>0<br>)<br>{<br>perror<br>(<br>“accept error<br>\n<br>“<br>)<br>;<br>continue<br>;<br>}<br>//添加新的fd 到数组中 判断有效的连接数是否小于最大的连接数，如果小于的话，就把新的连接套接字加入集合<br>if<br>(<br>conn_amount<br>&lt;<br>MAXCONN<br>)<br>{<br>for<br>(<br>i<br>=<br>0<br>;<br>i<br>&lt;<br>MAXCONN<br>;<br>i<br>++<br>)<br>{<br>if<br>(<br>fd<br>[<br>i</p>
<h1 id="-3"><a href="#-3" class="headerlink" title="]"></a>]</h1><p>0<br>)<br>{<br>fd<br>[<br>i<br>]<br>=<br>new_fd<br>;<br>break<br>;<br>}<br>}<br>conn_amount<br>++;<br>printf<br>(<br>“new connection client[%d] %s:%d<br>\n<br>“<br>,<br>conn_amount<br>,<br>inet_ntoa<br>(<br>client_addr.<br>sin_addr<br>)<br>,<br>ntohs<br>(<br>client_addr.<br>sin_port<br>)<br>)<br>;<br>if<br>(<br>new_fd<br>&gt;<br>maxsock<br>)<br>{<br>maxsock<br>=<br>new_fd<br>;<br>}<br>}<br>else<br>{<br>printf<br>(<br>“max connections arrive ,exit<br>\n<br>“<br>)<br>;<br>send<br>(<br>new_fd<br>,<br>“bye”<br>,<br>4<br>,<br>0<br>)<br>;<br>close<br>(<br>new_fd<br>)<br>;<br>continue<br>;<br>}<br>}<br>}<br>//while<br>for<br>(<br>i<br>=<br>0<br>;<br>i<br>&lt;<br>MAXCONN<br>;<br>i<br>++<br>)<br>{<br>if<br>(<br>fd<br>[<br>i<br>]<br>!=<br>0<br>)<br>{<br>close<br>(<br>fd<br>[<br>i<br>]<br>)<br>;<br>}<br>}<br>exit<br>(<br>0<br>)<br>;<br>}</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码片段 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有用的代码小片段1–主机名->IP]]></title>
      <url>http://hackqiang.org/2010/11/19/e6-9c-89-e7-94-a8-e7-9a-84-e4-bb-a3-e7-a0-81-e5-b0-8f-e7-89-87-e6-ae-b51-e4-b8-bb-e6-9c-ba-e5-90-8d-ip/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>struct<br>hostent<br><em><br>host<br>;<br>struct<br>sockaddr_in serv_addr<br>;<br>host<br>=<br>gethostbyname<br>(<br>argv<br>[<br>1<br>]<br>)<br>)<br>;<br>serv_addr.<br>sin_family<br>=<br>AF_INET<br>;<br>serv_addr.<br>sin_port<br>=<br>htons<br>(<br>9999<br>)<br>;<br>serv_addr.<br>sin_addr<br>=
</em><br>(<br>(<br>struct<br>in_addr<br>*<br>)<br>host<br>-&gt;<br>h_addr<br>)<br>;<br>bzero<br>(<br>&amp;<br>(<br>serv_addr.<br>sin_zero<br>)<br>,<br>8<br>)<br>;</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 代码片段 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我发誓，以后不会再有类似的文章出现了。]]></title>
      <url>http://hackqiang.org/2010/11/19/e6-88-91-e5-8f-91-e8-aa-93-ef-bc-8c-e4-bb-a5-e5-90-8e-e4-b8-8d-e4-bc-9a-e5-86-8d-e6-9c-89-e7-b1-bb-e4-bc-bc-e7-9a-84-e6-96-87-e7-ab-a0-e5-87-ba-e7-8e-b0-e4-ba-86-e3-80-82/</url>
      <content type="html"><![CDATA[<p>自从开博刚开始的时候能持续的更新博客，已经很久很久没有打理了，一是因为工作了，虽然不是很忙，但是也没那心思天天写点什么了，二是女朋友周末都过来，更有心思了，O(∩_∩)O~<br>好吧，我必须承认，每隔一段时间我总会上来发一篇类似的文章，呵呵。<br>今天突然想到我可以把一些常用的代码小片段贴在这，这样不仅方便自己，也能给大家提供点方便。<br>另外，才发现LFS6.7发布了，昨天把包都下了，打算过两天在搞一次LFS。到时候一定要坚持在博客上记录全过程。<br>废话就不多说了，总之以后我会尽量多多更新博客，不然也对不起我的域名和主机钱，是吧？o(╯□╰)o</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[为gedit装上Symbol Browser插件]]></title>
      <url>http://hackqiang.org/2010/09/27/e4-b8-bagedit-e8-a3-85-e4-b8-8asymbol-browser-e6-8f-92-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>先安装包：<br>?<br>View Code<br>BASH<br>1<br>sudo<br>aptitude<br>install<br>exuberant-ctags libgnomeprintui2.2-<br>0<br>然后去主页下了安装：<br><a href="http://sourceforge.net/projects/symbol-browser/files/" target="_blank" rel="external">http://sourceforge.net/projects/symbol-browser/files/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gedit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[密码保护：最近，我迷失了。]]></title>
      <url>http://hackqiang.org/2010/09/10/e5-af-86-e7-a0-81-e4-bf-9d-e6-8a-a4-ef-bc-9a-e6-9c-80-e8-bf-91-ef-bc-8c-e6-88-91-e8-bf-b7-e5-a4-b1-e4-ba-86-e3-80-82/</url>
      <content type="html"><![CDATA[<p>这是一篇受密码保护的文章，您需要提供访问密码：<br>密码：</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[忠犬八公]]></title>
      <url>http://hackqiang.org/2010/09/03/e5-bf-a0-e7-8a-ac-e5-85-ab-e5-85-ac/</url>
      <content type="html"><![CDATA[<p>昨天晚上看了忠犬八公,很感人.<br>一条狗就这样守着主人,直到死掉.</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu9.10下配置apache支持CGI]]></title>
      <url>http://hackqiang.org/2010/08/16/ubuntu9-10-e4-b8-8b-e9-85-8d-e7-bd-aeapache-e6-94-af-e6-8c-81cgi/</url>
      <content type="html"><![CDATA[<p>我的apache安装好后默认的网页目录为：/var/www，我现在想要修改CGI目录到/var/www/cgi-bin/下，<br>首先，修改文件：/etc/apache2/sites-available/default<br>将其中的ScriptAlias /cgi-bin/段修改为：<br>ScriptAlias /cgi-bin/ /var/www/cgi-bin/</p>
<p><directory “="" var="" www="" cgi-bin="" ”=""><br>AllowOverride None<br>Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch<br>Order allow,deny<br>Allow from all<br></directory><br>然后，重启apache就可以了：<br>sudo /etc/init.d/apache2 restart</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apache </tag>
            
            <tag> cgi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近一段时间的学习计划]]></title>
      <url>http://hackqiang.org/2010/08/09/e6-9c-80-e8-bf-91-e4-b8-80-e6-ae-b5-e6-97-b6-e9-97-b4-e7-9a-84-e5-ad-a6-e4-b9-a0-e8-ae-a1-e5-88-92/</url>
      <content type="html"><![CDATA[<p>最近因为工作了，书看的少了，发现以前很熟络的东西也生疏了。最近一段时间的工作不是很忙，所以打算学点新东西，也巩固下以前的知识。<br>APUE，以前草草的翻了一遍，现在发现许多的问题还是一知半解。<br>python，半年前就学的差不多了，可是很久没用过了，现在已经忘的差不多了。<br>shell编程，一直没把shell当回事，现在工作了才发现shell也是很强大的。<br>我的计划是年前把上边3个东西吃透。要努力了！</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[前一段时间（2010.6.1-2010.8.7）的总结]]></title>
      <url>http://hackqiang.org/2010/08/07/e5-89-8d-e4-b8-80-e6-ae-b5-e6-97-b6-e9-97-b4-ef-bc-882010-6-1-2010-8-7-ef-bc-89-e7-9a-84-e6-80-bb-e7-bb-93/</url>
      <content type="html"><![CDATA[<p>前一段时间毕业了，工作了，很忙，一直没有时间打理自己的博客，今天抽空对前段时间做点总结。<br>生活：<br>没毕业在南京实习的时候一直住在同学寝室，每天到公司都要1个半小时，现在毕业了，就在离公司不远的地方租了个房，和房东住一起，感觉有点奇怪。现在对这个房子的价格不满意，预计过段时间还是要搬家的。每天早上做公交去公司，只要几分钟的车程，主要就是等公交有点慢。中午休息的时间一般都在打乒乓球，下午6点下班，在外边吃点东西就回住处了。一个人生活，花费不是很大。<br>工作：算起来，我工作也有快两个月了，工作主要是做了一个基于http协议的客户端软件，用到了libcurl和readline库，也学到了不少的东西。<br>感情：灵芝在毕业时来南京玩了几天后就回家去了，虽然我们偶尔的吵了几次架，但是感情还很稳定。<br>好了，大约就这么点事。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LFS之路1-关于恢复状态]]></title>
      <url>http://hackqiang.org/2010/07/25/lfs-e4-b9-8b-e8-b7-af1-e5-85-b3-e4-ba-8e-e6-81-a2-e5-a4-8d-e7-8a-b6-e6-80-81/</url>
      <content type="html"><![CDATA[<p>很久之前就下载了LFS的一些资料，也做过一段时间，但是当时没坚持，现在把台式机弄好了，打算再完整的做一次LFS，下载的ISO是6.3，参考的资料是：<br><a href="http://www.linuxsir.org/bbs/thread322894.html" target="_blank" rel="external">http://www.linuxsir.org/bbs/thread322894.html</a><br>我在这做一个自己的记录。<br>我不是用虚拟机装的 ，在自己的硬盘后面留了12G做LFS，用CD启动后运行cfdisk分区，分区完成后就开始做一些必要的准备工作。<br>挂载目标分区到/mnt/lfs；<br>在/mnt/lfs下面建立一下几个文件夹：<br>sources:存放源码<br>tools:工具链<br>prepare:我自己加的，用于存放一些恢复步骤的文件，主要有：<br>begin.sh:root用户时使用的一些初始化脚本，代码如下：<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>
<p>#!/bin/bash<br>swapon<br>/<br>dev<br>/<br>sda10<br>ln<br>-sv<br>/<br>mnt<br>/<br>lfs<br>/<br>tools<br>/<br>groupadd lfs<br>useradd<br>-s<br>/<br>bin<br>/<br>bash<br>-g<br>lfs<br>-m<br>-k<br>/<br>dev<br>/<br>null lfs<br>chown<br>-v<br>lfs<br>/<br>mnt<br>/<br>lfs<br>/<br>tools<br>chown<br>-v<br>lfs<br>/<br>mnt<br>/<br>lfs<br>/<br>sources<br>chown<br>-v<br>lfs<br>/<br>mnt<br>/<br>lfs<br>/<br>prepare<br>passwd<br>lfs<br>.bash_profile:<br>?<br>View Code<br>BASH<br>1<br>exec<br>env<br>-i<br>HOME<br>=<br>$HOME<br>TERM<br>=<br>$TERM<br>PS1<br>=<br>‘\u:\w \$’<br>/<br>bin<br>/<br>bash<br>.bashrc:<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5<br>6<br>set<br>+h<br>umask<br>022<br>LFS<br>=<br>/<br>mnt<br>/<br>lfs<br>LC_ALL<br>=POSIX<br>PATH<br>=<br>/<br>tools<br>/<br>bin:<br>/<br>bin:<br>/<br>usr<br>/<br>bin<br>export<br>LFS LC_ALL PATH<br>begin2.sh:切换为lfs用户运行的一个初始化脚本：<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5</p>
<p>#!/bin/bash<br>cp<br>/<br>mnt<br>/<br>lfs<br>/<br>prepare<br>/<br>.bash<br>*<br>~<br>/<br>source<br>~<br>/<br>.bash_profile<br>export<br>cd<br>$LFS<br>/<br>sources<br>这样，恢复就显得简单多了。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[__devexit_p的功能]]></title>
      <url>http://hackqiang.org/2010/07/14/devexit-p-e7-9a-84-e5-8a-9f-e8-83-bd/</url>
      <content type="html"><![CDATA[<p>看驱动的时候，时常会有如下代码：<br>.remove = <strong>devexit_p(XX_exit),<br>这里的</strong>devexit_p有什么作用呢？<br>我在include/linux/init.h中找到了它的定义：<br>/<em> Functions marked as <strong>devexit may be discarded at kernel link time, depending<br>on config options.  Newer versions of binutils detect references from<br>retained sections to discarded sections and flag an error.  Pointers to
</strong>devexit functions must use __devexit_p(function_name), the wrapper will<br>insert either the function_name or NULL, depending on the config options.
</em>/</p>
<p>#if defined(MODULE) || defined(CONFIG_HOTPLUG)</p>
<p>#define __devexit_p(x) x</p>
<p>#else</p>
<p>#define __devexit_p(x) NULL</p>
<p>#endif<br>注释已经说的狠明白了吧！</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[用mtrace()查看内存泄漏]]></title>
      <url>http://hackqiang.org/2010/06/30/e7-94-a8mtrace-e6-9f-a5-e7-9c-8b-e5-86-85-e5-ad-98-e6-b3-84-e6-bc-8f/</url>
      <content type="html"><![CDATA[<p>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10</p>
<p>#include &lt;mcheck.h&gt;</p>
<p>#include &lt;stdio.h&gt;</p>
<p>#include &lt;stdlib.h&gt;<br>int<br>main<br>(<br>void<br>)<br>{<br>setenv<br>(<br>“MALLOC_TRACE”<br>,<br>“./memleak.log”<br>,<br>1<br>)<br>;<br>mtrace<br>(<br>)<br>;<br>char<br>*<br>p<br>=<br>malloc<br>(<br>10<br>)<br>;<br>return<br>0<br>;<br>}<br>然后用mtrace命令就可以查看内存泄漏情况：<br>?<br>View Code<br>BASH<br>1<br>$ mtrace memleak.log</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内存泄漏 </tag>
            
            <tag> mtrace </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这个镜像网站不错！]]></title>
      <url>http://hackqiang.org/2010/06/27/e8-bf-99-e4-b8-aa-e9-95-9c-e5-83-8f-e7-bd-91-e7-ab-99-e4-b8-8d-e9-94-99-ef-bc-81/</url>
      <content type="html"><![CDATA[<p><a href="http://mirrors.sohu.com/" target="_blank" rel="external">http://mirrors.sohu.com/</a></p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 镜像 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu在图形化界面时为程序使用root权限打开]]></title>
      <url>http://hackqiang.org/2010/06/10/ubuntu-e5-9c-a8-e5-9b-be-e5-bd-a2-e5-8c-96-e7-95-8c-e9-9d-a2-e6-97-b6-e4-b8-ba-e7-a8-8b-e5-ba-8f-e4-bd-bf-e7-94-a8root-e6-9d-83-e9-99-90-e6-89-93-e5-bc-80/</url>
      <content type="html"><![CDATA[<p>在程序的启动命令前加上 gksu。<br>例如 gksu wireshark</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于毕业了。]]></title>
      <url>http://hackqiang.org/2010/06/01/e7-bb-88-e4-ba-8e-e6-af-95-e4-b8-9a-e4-ba-86-e3-80-82/</url>
      <content type="html"><![CDATA[<p>大学四年就这么结束了，和同学不知道吃了多少次散伙饭了，终于大家要各奔东西了，确实很舍不得许多兄弟。<br>愿大家今后都混的好。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Blog又关了段时间]]></title>
      <url>http://hackqiang.org/2010/05/16/blog-e5-8f-88-e5-85-b3-e4-ba-86-e6-ae-b5-e6-97-b6-e9-97-b4/</url>
      <content type="html"><![CDATA[<p>前段时间主机重装系统，把的我数据库搞坏了，之前一直忙着工作和答辩没管他的，今天抽了点时间修复了。<br>发现主机提供的还原数据库的方法不可靠，还原后还是不能正常使用BLOG，后来用phpmyadmin还原，结果就好了。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[解决kgdbwait不起作用]]></title>
      <url>http://hackqiang.org/2010/05/15/e8-a7-a3-e5-86-b3kgdbwait-e4-b8-8d-e8-b5-b7-e4-bd-9c-e7-94-a8/</url>
      <content type="html"><![CDATA[<p>给内核选上kgdb相关配置后，在grub的引导参数后加：<br>kgdbwait kgdboc=ttyS0,115200<br>重启后，系统竟然还正常启动了，经过分析，发现有造成这种现象可能有两个原因：<br>1.串口驱动没配置好；<br>2.kgdboc后的配置有问题。<br>我把串口驱动配置后，就可以了。<br>但是问题是我用的笔记本，压根就没有串口，用usb转串口貌似也不管用，有人能帮忙吗？</p>
]]></content>
      
        <categories>
            
            <category> kernel/drivers </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kgdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[今天第二次面试了]]></title>
      <url>http://hackqiang.org/2010/04/09/e4-bb-8a-e5-a4-a9-e7-ac-ac-e4-ba-8c-e6-ac-a1-e9-9d-a2-e8-af-95-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>这是我第二次面试了，关于第一次，哪天有心情了再说。因为我住的地方离面试公司特别远，怕迟到，今天早上十点就出发了，结果到的太早了，无奈，幸好旁边有个公园，在公园逛了会，看了看几个人钓鱼，晒着春光，沐浴着春风，还蛮舒服的，一点到了，好了，去面试了。<br>在那个公司的门口等了等，一个MM出来把我带进了会议室，然后拿了张试卷给我作，先是问答题，我觉得还挺简单，但有些基本概念却弄不明白，例如天天用的socket，还有大部分进程间通讯的题，接着就是编程题，被我用循环链表轻松解决，后来就是翻译题，关于remapping的，还好之前作了点翻译项目，最后又作了几个智力题，很轻松的解决了。<br>接下来就是一个感觉很有威力的人对我进行面试了，他拿着我的简历挨个问，幸好我的简历很真实，要不可要完了，最后有问了我点毕业设计的问题，这些对我来说当然是小case（感谢伟大的石院长）。<br>最后面试我的人对我说说人事部的人现在不在，让我等等，于是我太无聊便发了篇懒文。<br>祝我好运吧！<br>PS：人事部的人还没来，我就把我觉得最难的那道智力题弄出来让你们做作吧。<br>屋里有三盏灯由屋外的三个开关控制，屋外看不到屋内，只进屋内一次就分辨出三个灯都由哪个开关控制。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决ubuntu下gedit打开文件乱码问题]]></title>
      <url>http://hackqiang.org/2010/04/08/e8-a7-a3-e5-86-b3ubuntu-e4-b8-8bgedit-e6-89-93-e5-bc-80-e6-96-87-e4-bb-b6-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98/</url>
      <content type="html"><![CDATA[<p>终端输入gconf-editor调出gconf-edit<br>在apps-&gt;gedit-2-&gt;preferences－＞encodings 在右边的auto-detected中双击会弹出一个对话框，在那里加入一个GBK和GB2312，然后把这两个的优先级设置为最高（在下面点向上）。<br>OK了。<br>参考资料：<a href="http://www.ourys.com/" target="_blank" rel="external">http://www.ourys.com/</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> gedit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Ubuntu下Empathy无音效]]></title>
      <url>http://hackqiang.org/2010/04/06/e8-a7-a3-e5-86-b3ubuntu-e4-b8-8bempathy-e6-97-a0-e9-9f-b3-e6-95-88/</url>
      <content type="html"><![CDATA[<p>用的 EEEUBUNTU，装了empathy后发现没声音，找了个解决方法。<br>Empathy<br>用 的音效是ubuntu”預設”音效 (/usr/share/sounds/ubuntu/stereo)<br>只要那个目录有以下几个文件就可以：<br>“message-new-instant”<br>“message-sent-instant”<br>“service-login”<br>“service-logout”<br>“phone-incoming-call”<br>“phone-outgoing-calling”<br>“phone-hangup”<br>格式为”ogg”<br>参考网站：<br><a href="http://hi.baidu.com/%CF%EB%B2%BB%B3%F6%87%E5%B5%C4id%C1%CB/blog/item/67bede27ccbe2908908f9d4d.html" target="_blank" rel="external">http://hi.baidu.com/%CF%EB%B2%BB%B3%F6%87%E5%B5%C4id%C1%CB/blog/item/67bede27ccbe2908908f9d4d.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> empathy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下建立GTK2.0开发环境]]></title>
      <url>http://hackqiang.org/2010/03/08/ubuntu-e4-b8-8b-e5-bb-ba-e7-ab-8bgtk2-0-e5-bc-80-e5-8f-91-e7-8e-af-e5-a2-83/</url>
      <content type="html"><![CDATA[<p>之前的论文是在终端下实现的，现在打算作一个UI，因为是在用UBUNTU，所以打算用GTK2.0做。<br>下面是建立开发环境的详细步骤：<br>1。安装基本的库，开发包<br>sudo apt-get install libgtk2.0-dev<br>sudo apt-get install libgtk2.0-doc (可选)<br>sudo apt-get install gtk2-examples (可选)<br>2。安装UI设计工具glade。<br>sudo apt-get install glade</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gtk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql C API编程1]]></title>
      <url>http://hackqiang.org/2010/02/23/mysql-c-api-e7-bc-96-e7-a8-8b1/</url>
      <content type="html"><![CDATA[<p>本文参考资料：<br><a href="http://dev.csdn.net/article/59/59727.shtm" target="_blank" rel="external">http://dev.csdn.net/article/59/59727.shtm</a><br><a href="http://dev.mysql.com/doc/refman/5.0/en/c.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.0/en/c.html</a></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Mysql </tag>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个简单的连接Mysql的C程序]]></title>
      <url>http://hackqiang.org/2010/02/23/e4-b8-80-e4-b8-aa-e7-ae-80-e5-8d-95-e7-9a-84-e8-bf-9e-e6-8e-a5mysql-e7-9a-84c-e7-a8-8b-e5-ba-8f/</url>
      <content type="html"><![CDATA[<p>这段代码主要是为了测试Mysql C环境是不是安装好。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>//file name: dbtest.c</p>
<p>#include <stdio.h></stdio.h></p>
<p>#include <stdlib.h></stdlib.h></p>
<p>#include <mysql.h><br>int<br>main<br>(<br>)<br>{<br>MYSQL mysql<br>;<br>mysql_init<br>(<br>&amp;<br>mysql<br>)<br>;<br>return<br>0<br>;<br>}<br>接下来编译：<br>?<br>View Code<br>BASH<br>1<br>gcc<br>-lmysqlclient<br>dbtest.c<br>-o<br>dbtest<br>如果没有报错，应该就没问题了。</mysql.h></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建立Mysql C开发环境]]></title>
      <url>http://hackqiang.org/2010/02/21/e5-bb-ba-e7-ab-8bmysql-c-e5-bc-80-e5-8f-91-e7-8e-af-e5-a2-83/</url>
      <content type="html"><![CDATA[<p>之前安装了Mysql，现在开始建立C开发环境。<br>安装C语言编程接口：<br>?<br>View Code<br>BASH<br>1<br>sudo<br>apt-get<br>install<br>libmysqlclient15-dev<br>很简单，接口装好了，具体的接口函数可以参考这里：<br><a href="http://dev.mysql.com/doc/refman/5.0/en/c.html" target="_blank" rel="external">http://dev.mysql.com/doc/refman/5.0/en/c.html</a><br>相关mysql头文件和库文件安装在/usr/include/mysql/和/usr/lib/mysql目录<br>把lib和头文件拷贝到公用：<br>sudo cp /usr/lib/mysql/<em> /usr/lib/<br>sudo cp /usr/include/mysql/</em> /usr/include/<br>这样，就可以直接用：<br>?<br>View Code<br>C<br>1</p>
<p>#include <mysql.h><br>来替换<br>?<br>View Code<br>C<br>1</mysql.h></p>
<p>#include “/usr/include/mysql/mysql.h”<br>这篇文章的主要参考资料：<br><a href="http://feizf.blogbus.com/logs/30689586.html" target="_blank" rel="external">http://feizf.blogbus.com/logs/30689586.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Mysql </tag>
            
            <tag> C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为Ubuntu9.10安装配置Mysql]]></title>
      <url>http://hackqiang.org/2010/02/21/e4-b8-baubuntu9-10-e5-ae-89-e8-a3-85-e9-85-8d-e7-bd-aemysql/</url>
      <content type="html"><![CDATA[<p>今天早上在床上的时候突然想起要给论文程序里加上一个数据库，因为在Linux平台，于是很自然的想到了Mysql。<br>这篇文章主要介绍了在Ubuntu9.10上安装配置Mysql，并建立其C开发环境。<br>第一步<br>，安装Mysql，可以参考这里：<br><a href="http://wiki.ubuntu.org.cn/MySQL%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">http://wiki.ubuntu.org.cn/MySQL%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97</a><br>?<br>View Code<br>BASH<br>1<br>2<br>sudo<br>apt-get<br>install<br>mysql-server<br>sudo<br>apt-get<br>install<br>mysql-client<br>然后重启Mysql：<br>?<br>View Code<br>BASH<br>1<br>sudo<br>/<br>etc<br>/<br>init.d<br>/<br>mysql restart<br>非root用户可以通过以下命令进入Mysql：<br>?<br>View Code<br>BASH<br>1<br>mysql<br>-u<br>root<br>-p<br>第二步<br>，创建一个数据库，并赋予当前登录用户的权限。<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>4<br>5<br>mysql<br>-u<br>root<br>-p<br>mysql<br>&amp;<br>gt; create database dbforc;<br>mysql<br>&amp;<br>gt; grant all privileges on dbforc.<br>*<br>to qiang<br>@<br>localhost identified by<br>‘123’<br>;<br>(<br>我的登录名为qiang,密码设为<br>123<br>)<br>mysql<br>&amp;<br>gt; flush privileges;（刷新系统权限表）<br>mysql<br>&amp;<br>gt; quit;<br>现在，就可以用下面的命令进入Mysql：<br>?<br>View Code<br>BASH<br>1<br>mysql<br>-u<br>qiang<br>-p<br>详细的数据库操作命令在这就不多说了，给个地址参考参考：<br><a href="http://news.newhua.com/news1/program_database/2009/217/0921715343537K7H7IDI2CCI09JCI1DK8FJ4B07B3A04219G561C3JAB.html" target="_blank" rel="external">http://news.newhua.com/news1/program_database/2009/217/0921715343537K7H7IDI2CCI09JCI1DK8FJ4B07B3A04219G561C3JAB.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再次关于毕业论文]]></title>
      <url>http://hackqiang.org/2010/02/13/e5-86-8d-e6-ac-a1-e5-85-b3-e4-ba-8e-e6-af-95-e4-b8-9a-e8-ae-ba-e6-96-87/</url>
      <content type="html"><![CDATA[<p>之前计算的论文内容由于一点原因没有做，改成了“网络聊天软件”。这个程序早在许多天前就做好了，现在打算把它贴出来，再加上仔细的注释，就当为论文的开些做些资料吧。<br>程序的源代码可以在这里下载到：<br><a href="http://code.google.com/p/chatforthesis/" target="_blank" rel="external">http://code.google.com/p/chatforthesis/</a><br>以后我会慢慢分析代码。</p>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[注册免费的.TK域名]]></title>
      <url>http://hackqiang.org/2010/02/11/e6-b3-a8-e5-86-8c-e5-85-8d-e8-b4-b9-e7-9a-84-tk-e5-9f-9f-e5-90-8d/</url>
      <content type="html"><![CDATA[<p>首先我要承认，我确实是一个标题党，但是，往下看，你绝对不会失望。<br>晚上无聊在网上乱逛的时候发现了一个号东西，可以注册免费的TK域名，当然，你要不被我的标题给骗了，说是免费，其实也只是部分免费。注册网站为：<br><a href="http://my.dot.tk" target="_blank" rel="external">http://my.dot.tk</a><br>。<br>这个网站他会根据你所注册域名的价值进行收费，我试了几个，发现大部分的以中国人名拼音为域名都是免费的，例如我注册的 yuqiang.tk 就是免费的，但是，免费的域名还是有一个限制的，那就是 “所有在每九十天之内接受少于二十五次点击的域名，将被你的帐户里删除。”<br>怎么样，你已经等不及要去试试了吧。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些关于XMPP，Python和GAE的资料]]></title>
      <url>http://hackqiang.org/2010/02/11/e4-b8-80-e4-ba-9b-e5-85-b3-e4-ba-8exmpp-ef-bc-8cpython-e5-92-8cgae-e7-9a-84-e8-b5-84-e6-96-99/</url>
      <content type="html"><![CDATA[<p>因为最近想要做个一Gtalk机器人，所以找了一些资料，先存放在这，免得以后找。<br>一个回显的机器人：<br><a href="http://www.keakon.cn/bbs/thread-1622-1-1.html" target="_blank" rel="external">http://www.keakon.cn/bbs/thread-1622-1-1.html</a><br>一个查询词典机器人：<br><a href="http://www.kavingray.com/blog/miniblog-bot/" target="_blank" rel="external">http://www.kavingray.com/blog/miniblog-bot/</a><br>RFC3920：<br><a href="http://wiki.jabbercn.org/index.php?title=RFC3920&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.jabbercn.org/index.php?title=RFC3920&amp;variant=zh-cn</a><br>RFC3921：<br><a href="http://wiki.jabbercn.org/index.php?title=RFC3921&amp;variant=zh-cn" target="_blank" rel="external">http://wiki.jabbercn.org/index.php?title=RFC3921&amp;variant=zh-cn</a><br>XMPP Python API：<br><a href="http://code.google.com/intl/zh-CN/appengine/docs/python/xmpp/overview.html" target="_blank" rel="external">http://code.google.com/intl/zh-CN/appengine/docs/python/xmpp/overview.html</a><br>以后陆续增加。</p>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GAE </tag>
            
            <tag> Gtalk </tag>
            
            <tag> XMPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Ubuntu上安装配置python2.5]]></title>
      <url>http://hackqiang.org/2010/02/10/e5-9c-a8ubuntu-e4-b8-8a-e5-ae-89-e8-a3-85-e9-85-8d-e7-bd-aepython2-5/</url>
      <content type="html"><![CDATA[<p>最近在弄GAE,但是我的ubuntu上的python的版本为2.6,我需要的是2.5.<br>于是安装2.5<br>?<br>View Code<br>BASH<br>1<br>sudo<br>apt-get<br>install<br>python2.5<br>然后修改默认的连接<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>sudo<br>rm<br>/<br>usr<br>/<br>bin<br>/<br>python<br>sudo<br>ln<br>-s<br>/<br>usr<br>/<br>bin<br>/<br>python2.5<br>/<br>usr<br>/<br>bin<br>/<br>python<br>这样在终端中输入python默认就是 2.5版本了</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GAE </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近对Python和XMPP有点兴趣]]></title>
      <url>http://hackqiang.org/2010/02/10/e6-9c-80-e8-bf-91-e5-af-b9python-e5-92-8cxmpp-e6-9c-89-e7-82-b9-e5-85-b4-e8-b6-a3/</url>
      <content type="html"><![CDATA[<p>前段时间接触了google talk ,知道了XMPP协议.发现这个协议挺有意思.<br>上taobao上买了本书,开始研究.<br>由于C在网络方面不怎么好用,于是最近新学了Python,发觉这个语言有点象C++,而且正好与GAE对口上了.<br>过一段时间就在GAE上部署一个自己的应用.</p>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GAE </tag>
            
            <tag> XMPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wordpress站点自动转到安装页面]]></title>
      <url>http://hackqiang.org/2010/02/09/wordpress-e7-ab-99-e7-82-b9-e8-87-aa-e5-8a-a8-e8-bd-ac-e5-88-b0-e5-ae-89-e8-a3-85-e9-a1-b5-e9-9d-a2/</url>
      <content type="html"><![CDATA[<p>废话不多说,直接把数据库的前缀(默认wp<em>)改掉(在wp-config.php文件中),然后把数据库文件中的wp</em>替换成刚刚修改的值,最后还原数据库.<br>应该可以了吧?</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好久没用电脑写博了]]></title>
      <url>http://hackqiang.org/2009/11/12/e5-a5-bd-e4-b9-85-e6-b2-a1-e7-94-a8-e7-94-b5-e8-84-91-e5-86-99-e5-8d-9a-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>今天费了点劲把在GODADDY免费空间上的数据搬到了自己国内的主机上,虽然GODADDY的空间还很稳定,但是他的广告让我忍无可忍了,倒不是说我怕主页上多点广告,而是他的广告破坏了整个站点的样式,甚至造成后台混乱了,连写个文章还要用我那黑莓手机写…<br>数据搬来的同时把域名也挪过来了.同时发现自己确实很久没打理这个BLOG了.于是顺便把BLOG的一些插件升了级,把冗余的文件删了删,数据库和整个BLOG也做了备份.</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blackberry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于sizeof与strlen的问题]]></title>
      <url>http://hackqiang.org/2009/11/07/e5-85-b3-e4-ba-8esizeof-e4-b8-8estrlen-e7-9a-84-e9-97-ae-e9-a2-98/</url>
      <content type="html"><![CDATA[<p>今天开始作面试题了，准备找工作了。<br>关于sizeof和strlen的问题，以前就接触到了，现在再提一下。<br>先看看这个：<br>Char <em>a=”1234567890″;<br>Sizeof(a)=?<br>Strlen(a)=?<br>答案是<br>Sizeof(a)=4,它相当于sizeof(char </em>)<br>Strlen(a)=10<br>再看看这个：<br>Char a[]=”1234567890″;<br>Sizeof(a)=?<br>Strlen(a)=?<br>Sizeof(a)=11,它包含了自动生成的’\0′,<br>Strlen(a)=10.它并不包含那个’\0′.</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个很隐蔽的bug]]></title>
      <url>http://hackqiang.org/2009/10/31/e4-b8-80-e4-b8-aa-e5-be-88-e9-9a-90-e8-94-bd-e7-9a-84bug/</url>
      <content type="html"><![CDATA[<p>今天把以前看过的«C专家编程»找出来翻了一边，发现还是收获很多阿。<br>下面是一段有BUG的代码，你能看出来吗？<br>Int array[3]={1,2,3};</p>
<p>#define T (sizeof(array)/sizeof(array[0]))<br>Main()<br>{<br>Int d=-1;<br>If(d</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[好多天没更新]]></title>
      <url>http://hackqiang.org/2009/10/16/e5-a5-bd-e5-a4-9a-e5-a4-a9-e6-b2-a1-e6-9b-b4-e6-96-b0/</url>
      <content type="html"><![CDATA[<p>最近很忙，加上空间问题，没有更新blog.<br>因为域名的问题，现在不能访问我国内服务器的blog.幸好我在godaddy上有个免费空间，上面存放了我国内blog的备份。但因为免费空间广告的原因，新建文章很是麻烦。<br>因为今天在手机上更新了wordpress for blackberry,所以就用手机写了这篇文章，正好也试试这个新版本的软件。<br>备案的密码一直没时间拿回来，前天也刚刚把我那程序员的证书拿回来，强烈鄙视某些机关的办事效率，也不知道刚刚过的软设证书什么时候能拿到。<br>今天都星期五了，时间过的真快。开学到学校也有一个多月了，但感觉什么事都没作，论文也卡在一个地方有两星期了，主要是最近没怎么作它。<br>抓紧时间充电，过完年好找工作哦。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[这十一。。]]></title>
      <url>http://hackqiang.org/2009/10/03/e8-bf-99-e5-8d-81-e4-b8-80-e3-80-82-e3-80-82/</url>
      <content type="html"><![CDATA[<p>这个十一过的相当无聊。<br>看了阅兵，明显感觉武器现代化了。<br>今天是中秋，本来是决定回家的，结果因为某些原因没回成。挺想家的，尤其是我那可爱的小侄子。<br>我的那主机问题真是多，以后一定不贪图便宜了。</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LINUX下网络抓包:tcpdump命令的使用]]></title>
      <url>http://hackqiang.org/2009/09/29/linux-e4-b8-8b-e7-bd-91-e7-bb-9c-e6-8a-93-e5-8c-85tcpdump-e5-91-bd-e4-bb-a4-e7-9a-84-e4-bd-bf-e7-94-a8/</url>
      <content type="html"><![CDATA[<p>最近在作论文的网络代理方面遇到了点问题，去CHINAUNIX上询问，有人建议我用抓包工具查看数据，于是就知道了tcpdump这个抓包程序。<br>Tcpdump的使用<br>tcpdump采用命令行方式，它的命令格式为：<br>tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>[ -T 类型 ] [ -w 文件名 ] [表达式 ]<br>1. tcpdump的选项介绍<br>-a 　　　将网络地址和广播地址转变成名字；<br>-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出；<br>-dd 　　　将匹配信息包的代码以c语言程序段的格式给出；<br>-ddd 　　　将匹配信息包的代码以十进制的形式给出；<br>-e 　　　在输出行打印出数据链路层的头部信息；<br>-f 　　　将外部的Internet地址以数字的形式打印出来；<br>-l 　　　使标准输出变为缓冲行形式；<br>-n 　　　不把网络地址转换成名字；<br>-t 　　　在输出的每一行不打印时间戳；<br>-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；<br>-vv 　　　输出详细的报文信息；<br>-c 　　　在收到指定的包的数目后，tcpdump就会停止；<br>-F 　　　从指定的文件中读取表达式,忽略其它的表达式；<br>-i 　　　指定监听的网络接口；<br>-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；<br>-w 　　　直接将包写入文件中，并不分析和打印出来；<br>-T 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程 调用）和snmp（简单　　　　　　　网络管理协议；）<br>2. tcpdump的表达式介绍<br>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。<br>在表达式中一般如下几种类型的关键字，一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host。<br>第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。<br>第三种是协议的关键字，主要包括fddi,ip ,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名， fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。<br>除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 not ! , 与运算是and,&amp;&amp;;或运算 是or ,||；<br>这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。<br>(1)想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p>
<p>#tcpdump host 210.27.48.1<br>(2) 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用　　　括号时，一定要</p>
<p>#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 )<br>(3) 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>
<p>#tcpdump ip host 210.27.48.1 and ! 210.27.48.2<br>(4)如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>
<p>#tcpdump tcp port 23 host 210.27.48.<br>3. tcpdump 的输出结果介绍<br>下面我们介绍几种典型的tcpdump命令的输出信息<br>(1) 数据链路层头信息<br>使用命令#tcpdump –e host ice<br>ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A<br>H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；上一条命令的输出结果如下所示：<br>21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 &gt; ice.telne<br>t 0:0(0) ack 22535 win 8760 (DF)<br>分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该数据包，eth0 &gt;表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包. 0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60 是数据包的长度, h219.33357 &gt; ice.telnet 表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535 表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.<br>(2) ARP包的TCPDUMP输出信息<br>使用命令#tcpdump arp<br>得到的输出结果是：<br>22:32:42.802509 eth0 &gt; arp who-has route tell ice (0:90:27:58:af:1a)<br>22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)<br>分析: 22:32:42是时间戳, 802509是ID号, eth0 &gt;表明从主机发出该数据包, arp表明是ARP请求包, who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。 0:90:27:58:af:1a是主机ICE的MAC地址。<br>(3) TCP包的输出信息<br>用TCPDUMP捕获的TCP包的一般输出信息是：<br>src &gt; dst: flags data-seqno ack window urgent options<br>src &gt; dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R (RST) “.” (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号, window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.<br>(4) UDP包的输出信息<br>用TCPDUMP捕获的UDP包的一般输出信息是：<br>route.port1 &gt; ice.port2: udp lenth<br>UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth<br>tcpdump采用命令行方式，它的命令格式为：<br>tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>[ -T 类型 ] [ -w 文件名 ] [表达式 ]<br>1. tcpdump的选项介绍<br>-a 　　　将网络地址和广播地址转变成名字；<br>-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出；<br>-dd 　　　将匹配信息包的代码以c语言程序段的格式给出；<br>-ddd 　　　将匹配信息包的代码以十进制的形式给出；<br>-e 　　　在输出行打印出数据链路层的头部信息；<br>-f 　　　将外部的Internet地址以数字的形式打印出来；<br>-l 　　　使标准输出变为缓冲行形式；<br>-n 　　　不把网络地址转换成名字；<br>-t 　　　在输出的每一行不打印时间戳；<br>-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；<br>-vv 　　　输出详细的报文信息；<br>-c 　　　在收到指定的包的数目后，tcpdump就会停止；<br>-F 　　　从指定的文件中读取表达式,忽略其它的表达式；<br>-i 　　　指定监听的网络接口；<br>-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；<br>-w 　　　直接将包写入文件中，并不分析和打印出来；<br>-T 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程 调用）和snmp（简单网络管理协议；）<br>2. tcpdump的表达式介绍<br>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。<br>在表达式中一般如下几种类型的关键字，一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host。<br>第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。<br>第三种是协议的关键字，主要包括fddi,ip ,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名， fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。<br>除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 not ! , 与运算是and,&amp;&amp;;或运算 是or ,||；<br>这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。<br>(1)想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p>
<p>#tcpdump host 210.27.48.1<br>(2) 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用　　　括号时，一定要</p>
<p>#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 )<br>(3) 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>
<p>#tcpdump ip host 210.27.48.1 and ! 210.27.48.2<br>(4)如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>
<p>#tcpdump tcp port 23 host 210.27.48.<br>3. tcpdump 的输出结果介绍<br>下面我们介绍几种典型的tcpdump命令的输出信息<br>(1) 数据链路层头信息<br>使用命令#tcpdump –e host ice<br>ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A<br>H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；上一条命令的输出结果如下所示：<br>21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 &gt; ice.telne<br>t 0:0(0) ack 22535 win 8760 (DF)<br>分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该数据包，eth0 &gt;表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包. 0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60 是数据包的长度, h219.33357 &gt; ice.telnet 表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535 表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.<br>(2) ARP包的TCPDUMP输出信息<br>使用命令#tcpdump arp<br>得到的输出结果是：<br>22:32:42.802509 eth0 &gt; arp who-has route tell ice (0:90:27:58:af:1a)<br>22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)<br>分析: 22:32:42是时间戳, 802509是ID号, eth0 &gt;表明从主机发出该数据包, arp表明是ARP请求包, who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。 0:90:27:58:af:1a是主机ICE的MAC地址。<br>(3) TCP包的输出信息<br>用TCPDUMP捕获的TCP包的一般输出信息是：<br>src &gt; dst: flags data-seqno ack window urgent options<br>src &gt; dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R (RST) “.” (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号, window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.<br>(4) UDP包的输出信息<br>用TCPDUMP捕获的UDP包的一般输出信息是：<br>route.port1 &gt; ice.port2: udp lenth<br>UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth<br>示例:<br>下面的命令可以读取主机hostname发送的所有数据：<br>tcpdump -i eth0 src host hostname<br>下面的命令可以监视所有送到主机hostname的数据包：<br>tcpdump -i eth0 dst host hostname<br>我们还可以监视通过指定网关的数据包：<br>tcpdump -i eth0 gateway Gatewayname<br>如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：<br>tcpdump -i eth0 host hostname and port 80<br>该命令将显示从每个数据包传出的头和来自主机hostname对端口80的编址。端口80是系统默认的HTTP服务端口号。如果我们只需要列出送到80端口的数据包，用dst port；如果我们只希望看到返回80端口的数据包，用src port。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
            <tag> tcpdump </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GDB查看变量的输出格式]]></title>
      <url>http://hackqiang.org/2009/09/26/gdb-e6-9f-a5-e7-9c-8b-e5-8f-98-e9-87-8f-e7-9a-84-e8-be-93-e5-87-ba-e6-a0-bc-e5-bc-8f/</url>
      <content type="html"><![CDATA[<p>今天用GDB调试程序，发现了一个问题，就是查看变量的时候显示格式很不好看，就如我要看一个数组里所有成员的十六进制表示，那么要怎么设置呢？<br>其实在使用命令print 和 display的时候可以更改显示格式，例如：<br>display /x  var<br>表示把var用十六进制显示。<br>其他常用的输出格式有有：<br>x:十进制<br>u:无符号的十六进制<br>o:八进制<br>t:二进制<br>c:字符格式</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[由MSN断网门所想到的]]></title>
      <url>http://hackqiang.org/2009/09/23/e7-94-b1msn-e6-96-ad-e7-bd-91-e9-97-a8-e6-89-80-e6-83-b3-e5-88-b0-e7-9a-84/</url>
      <content type="html"><![CDATA[<p>前段时间，莫拉克给海底光缆造成了严重的破坏，导致了东亚大部分国家的网络服务中断。<br>目前，互联网的主根服务器在美国，而且其他13台根服务器没有一台在中国，中国只有镜象服务器。显然中国就没有管理权。这对中国的互联网安全造成了很大的威胁。<br>中国何时才能成为一个真正的大国！</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[socks5代理]]></title>
      <url>http://hackqiang.org/2009/09/23/socks5-e4-bb-a3-e7-90-86/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socks5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下的多线程]]></title>
      <url>http://hackqiang.org/2009/09/21/linux-e4-b8-8b-e7-9a-84-e5-a4-9a-e7-ba-bf-e7-a8-8b/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于能在LINUX下用淘宝了]]></title>
      <url>http://hackqiang.org/2009/09/14/e7-bb-88-e4-ba-8e-e8-83-bd-e5-9c-a8linux-e4-b8-8b-e7-94-a8-e6-b7-98-e5-ae-9d-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>今天无意间看了一篇文章，实现了在LINUX下用淘宝。<br>先下载:<br>支付宝安全控件 for Linux 平台 的 Firefox<br>( MD5:<br>02240053d32688ed996e3a4788042801<br>)<br>将下载的文件解压:<br>?<br>View Code<br>BASH<br>1<br>$<br>tar<br>-zxvf<br>aliedit.tar.gz<br>推荐校验 MD5 值：<br>?<br>View Code<br>BASH<br>1<br>$ md5sum aliedit.tar.gz<br>02240053d32688ed996e3a4788042801  aliedit.tar.gz<br>创建~/.mozilla/plugins目录<br>?<br>View Code<br>BASH<br>1<br>mkdir<br>~<br>/<br>.mozilla<br>/<br>plugins<br>并将这两个文件复制到 ~/.mozilla/plugins 目录：<br>?<br>View Code<br>BASH<br>1<br>$<br>cp<br>aliedit.so aliedit.xpt ~<br>/<br>.mozilla<br>/<br>plugins<br>重新启动 Firefox 即可。整个安装过程还是很简单的。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 淘宝 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于毕业论文]]></title>
      <url>http://hackqiang.org/2009/09/13/e5-85-b3-e4-ba-8e-e6-af-95-e4-b8-9a-e8-ae-ba-e6-96-87/</url>
      <content type="html"><![CDATA[<p>这段时间一直在学linux c和socket.一直没作什么项目，再过段时间就要作毕业论文了。打算作一个linux下socket开发，初步锁定在whois上。<br>主要技术应该包括：<br>1。多线程<br>2。系统日志<br>3。网络通讯<br>4。文件I/O<br>5。whois协议<br>废话不多说，今天就开始作。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[赞一下我的 blackberry 8310]]></title>
      <url>http://hackqiang.org/2009/09/09/e8-b5-9e-e4-b8-80-e4-b8-8b-e6-88-91-e7-9a-84-blackberry-8310/</url>
      <content type="html"><![CDATA[<p>8310不是我用的第一个黑莓手机,我用的第一个黑莓手机是7290，只花了不到400买的。不过觉得挺好用，所以在我前一个索爱手机坏掉后我就毫不犹豫的再次选择了黑莓。<br>用8310已经有段时间了，发现黑莓手机确实很强大。<br>1。全键盘的手感很好，刚到手可能会出现按错键的情况，用熟了就不会了。而且全键盘打字特别方便。<br>2。邮件功能，虽然我没用正宗的push mail，但是berrymail的pull mail也不错。<br>3。适合浏览网页。自带的浏览器就已经很好用了，我又下了一个opera，用来翻墙。<br>4。省电。一般情况下用2，3天没问题。<br>5。通话质量特别好。<br>6。优点太多说不完了。。。</p>
]]></content>
      
        <categories>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blackberry </tag>
            
            <tag> 8310 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于把域名给注册了]]></title>
      <url>http://hackqiang.org/2009/09/09/e7-bb-88-e4-ba-8e-e6-8a-8a-e5-9f-9f-e5-90-8d-e7-bb-99-e6-b3-a8-e5-86-8c-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>暑假的时候就看好了一个 域名，因为种种原因一直没注册，前几天终于把域名给注册了，花了15美元，我觉得还是值得的，不象某人，觉得是浪费。<br>顺便把送的免费空间也用上了，才发现LINUX主机确实比较强大，可惜我这空间已经预付了2年，这该死的WINDOWS主机。<br>最近这个主机不太老实。数据库时不时就出点问题，搞的我丢了不少的资料。郁闷阿。<br>关于网站备案的问题真是烦人。以后买个国外的主机算了。<br>哦对了我刚刚注册的域名是：qiang.ws。不错吧！</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用我的黑莓手机更新BLog]]></title>
      <url>http://hackqiang.org/2009/09/04/e7-94-a8-e6-88-91-e7-9a-84-e9-bb-91-e8-8e-93-e6-89-8b-e6-9c-ba-e6-9b-b4-e6-96-b0blog/</url>
      <content type="html"><![CDATA[<p>前两天给手机装了个”wordpress for blackberry”。开始用wap连接不能用，今天就换了net连接。终于可以用了。<br>感觉这个软件的功能还可以，就是没有摘要功能，不过无所谓了，有空用浏览器改改。<br>以后就可以用手机进行更新了。</p>
]]></content>
      
        <categories>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blackberry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[test for “wordpress for blackberry”]]></title>
      <url>http://hackqiang.org/2009/09/04/test-for-wordpress-for-blackberry/</url>
      <content type="html"><![CDATA[<p>This is a test for the soft “wordpress for blackberry”!</p>
]]></content>
      
        <categories>
            
            <category> 手机 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> blackberry </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Latika’s Theme]]></title>
      <url>http://hackqiang.org/2009/08/22/latikas-theme/</url>
      <content type="html"><![CDATA[<p>今天看电视,突然看到一个广告,她的旋律一下就把我吸引住了,没错,是那首Latika’s Theme.<br>虽然整首歌都没有一句歌词,但是那旋律,Rahman的轻哼,一下就把我拉回到了当初看&lt;&lt;贫民窟的百万富翁&gt;&gt;的时候.贾马与他兄弟萨利姆的手足之情,与恋人拉提卡的爱情深深的触动了我的心灵.<br>贾马与萨利姆四处寻找拉提卡的画面,配上这首Latika’s Theme,让我反反复复的看了不知多少遍,尤其是最终当贾马与拉提卡重逢时,熟悉的Latika’s Theme再次进入我的脑海,我完全沉醉于这样的画面,这个画面让我足足看了一个晚上.<br>继&lt;&lt;碧海蓝天&gt;&gt;后,&lt;&lt;贫民窟的百万富翁&gt;&gt;是唯一部让我有如此感触的电影.<br>这里插上最后的感人片段:<br>“I knew you’d be watching.”<br>“I thought we’d meet again only in death.”<br>“This is our destiny.”<br>“kiss me!”</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Rahman </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 程序来访问和设置环境变量]]></title>
      <url>http://hackqiang.org/2009/08/22/c-e7-a8-8b-e5-ba-8f-e6-9d-a5-e8-ae-bf-e9-97-ae-e5-92-8c-e8-ae-be-e7-bd-ae-e7-8e-af-e5-a2-83-e5-8f-98-e9-87-8f/</url>
      <content type="html"><![CDATA[<p>对于 C 程序的用户来说,可以使用下列三个函数来设置或访问一个环境变量。<br>◆ getenv()访问一个环境变量。输入参数是需要访问的变量名字,返回值是一个字符串。如果所访问的环境变量不存在,则会返回 NULL。<br>◆ setenv()在程序里面设置某个环境变量的函数。<br>◆ unsetenv()清除某个特定的环境变量的函数。<br>另外,还有一个指针变量 environ,它指向的是包含所有的环境变量的一个列表。下面的程序可以打印出当前运行环境里面的所有环境变量:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p>
<p>#include <stdio.h><br>extern<br>char<br><strong><br>environ<br>;<br>int<br>main<br>(<br>)<br>{<br>char
</strong><br>var<br>;<br>for<br>(<br>var<br>=<br>environ<br>;<em><br>var<br>!=<br>NULL<br>;++<br>var<br>)<br>printf<br>(<br>“%s<br>\n<br>“<br>,</em><br>var<br>)<br>;<br>return<br>0<br>;<br>}<br>还可以通过修改一些相关的环境定义文件来修改环境变量,比如对于 Red Hat 等 Linux 发行版本,与环境相关的文件有/etc/profile 和~/.bashrc 等。修改完毕后重新登录一次就生效了。<br>以上总结自《开源》杂志。</stdio.h></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下用rar命令分卷压缩文件]]></title>
      <url>http://hackqiang.org/2009/08/19/ubuntu-e4-b8-8b-e7-94-a8rar-e5-91-bd-e4-bb-a4-e5-88-86-e5-8d-b7-e5-8e-8b-e7-bc-a9-e6-96-87-e4-bb-b6/</url>
      <content type="html"><![CDATA[<p>今天下了个文档，DOC格式，用openoffic直接输出为pdf文档。传上论坛给大家共享，因为论坛的附件大小限制，必须分卷压缩。<br>之前在UBUNTU上装了RAR，所以打算用RAR命令进行压缩。于是先man了下rar，结果没有rar的man文档，于是上网找资料。<br>最后终于弄会了。这里给大家说说。<br>可以用这个命令：<br>rar a -v<size>(k,b) archives files<br>假如我在Desktop目录下有个大小为5M的文档 file.pdf, 现在要把它压缩为大小为2000k的几个部分，文件名为file.part1.rar ,file.part2.rar …<br>就可以用下面的命令：<br>?<br>View Code<br>BASH<br>1<br>$ rar a<br>-v2000k<br>file<br>file.pdf<br>OK,这就行了。</size></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令技巧 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这几天…今天…]]></title>
      <url>http://hackqiang.org/2009/08/17/e8-bf-99-e5-87-a0-e5-a4-a9-e4-bb-8a-e5-a4-a9/</url>
      <content type="html"><![CDATA[<p>这几天忙着买火车票,准备回学校了.<br>这几天天气又开始热了起来.<br>这几天为了paypal的帐号搞的头昏脑胀.<br>这几天发现我原先的GMAIL邮箱帐号被盗了.<br>这几天比较浮躁,没看书.没学习,也没玩游戏.<br>今天把火车票买了,没买到卧铺,买了张硬座,TNND该死的火车站,把好票都没着,只卖垃圾票,BS…<br>今天洗了2次澡,热的不行了,我诅咒这该死的天气(不过相对与往年,今年的天气还是可以的)…<br>今天把相关的证明材料传到paypal客服了,现在焦急的等待结果…<br>今天又新申请了个GMAIL帐号,同时诅咒那个盗我号的垃圾…<br>今天接着无所事事,上来写了篇博文.发发牢骚.<br>好了,牢骚都发完了.</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于学习笔记]]></title>
      <url>http://hackqiang.org/2009/08/16/e5-85-b3-e4-ba-8e-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</url>
      <content type="html"><![CDATA[<p>这几天突然发现之前做了不少的学习笔记,但是仔细的看看还有不少错误,我也懒得去改了.<br>看到这么多的学习笔记,我发现了一个问题,有些内容根本就没必要记录的我也记下来了.有的即使记下来了我也不懂.<br>我好象是在为了记笔记而学习,而不是为了掌握知识而学习.<br>所以,以后还是少记学习笔记吧.多记些自己生活方面的东西.</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[paypal那一堆事]]></title>
      <url>http://hackqiang.org/2009/08/16/paypal-e9-82-a3-e4-b8-80-e5-a0-86-e4-ba-8b/</url>
      <content type="html"><![CDATA[<p>昨天去申请了一个paypal帐户,然后通过淘宝给帐户冲了11美圆.<br>打算在godaddy上买个域名,结果支付的时候却要paypal的帐户认证.<br>于是开始认证.这下麻烦可来了,因为我在注册paypal帐户的时候全部用的拼音,而银行卡用的是中文,搞成了帐户名和银行户名不一致,而且paypal只支持三个银行,我还没那银行帐号.<br>现在好了,要去申请改名字了,改名字可就麻烦多了,要很多的证明材料,算了.晚上再说吧.</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> paypal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[历尽一个月，看完Linux socket]]></title>
      <url>http://hackqiang.org/2009/08/13/e5-8e-86-e5-b0-bd-e4-b8-80-e4-b8-aa-e6-9c-88-ef-bc-8c-e7-9c-8b-e5-ae-8clinux-socket/</url>
      <content type="html"><![CDATA[<p>一个月过去了，我也差不多把LINUX SOCKET 过了一遍。<br>其中暴露了我许多问题，这里总结一下：<br>首先，对一些函数的掌握很不熟练，往往一个简单的函数都要翻书看MAN。<br>其次，复习不到位，往往学了后面的就忘掉前面的。<br>最后，学习只停留在书本表面，没有深入研究。<br>暑假也快结束了，我打算到学校了好好的再把这本书深入的研究研究，同时要再把《UNIX环境高级编程》配合着操作系统好好的看看。哦对了还有编译原理也要在复习复习。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记22-带外数据2]]></title>
      <url>http://hackqiang.org/2009/08/08/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b022-e5-b8-a6-e5-a4-96-e6-95-b0-e6-8d-ae2/</url>
      <content type="html"><![CDATA[<p>如果要使用这种模式，那么要设置SO_OOBINLINE套接口选项：<br>srtsocket(s,SOL_SOCKET,SO_OOBINLINE,&amp;oobinline,sizeof(oobinline));<br>既然带内数据在普通数据中间，那么怎么知道具体在哪呢，这就需要用函数ioctl(2)确定紧急指针的位置。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7</p>
<p>#include<sys ioctl.h=""><br>int<br>flag<br>;<br>//如果被标记则为TRUE<br>z<br>=<br>ioctl<br>(<br>s<br>,<br>SIOCATMARK<br>,&amp;<br>amp<br>;<br>flag<br>)<br>;<br>//成功返回0<br>下面是内嵌带内数据的主要代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>z<br>=<br>srtsocket<br>(<br>s<br>,<br>SOL_SOCKET<br>,<br>SO_OOBINLINE<br>,<br>&amp;<br>amp<br>;<br>oobinline<br>,<br>sizeof<br>(<br>oobinline<br>)<br>)<br>;<br>for<br>(<br>;;<br>)<br>{<br>ioctl<br>(<br>s<br>,<br>SIOCATMARK<br>,&amp;<br>amp<br>;<br>flag<br>)<br>;<br>recv<br>(<br>s<br>,<br>buf<br>,<br>sizeof<br>(<br>buf<br>)<br>,<br>0<br>)<br>;<br>}</sys></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 带外数据 </tag>
            
            <tag> 紧急指针 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记21-带外数据1]]></title>
      <url>http://hackqiang.org/2009/08/07/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b021-e5-b8-a6-e5-a4-96-e6-95-b0-e6-8d-ae1/</url>
      <content type="html"><![CDATA[<p>带外数据的概念<br>套接口API提供了一种机制，它可以让一束数据加速从常规数据之前到达接收方，这束数据就是所谓的带外数据。<br>带外数据的必要性<br>有时候我们需要处理紧急情况，这时候就需要用带外数据来实现，例如客户端想要终止正在发送的一段数据，服务器的程序还没有来的及读取这段程序，这时客户端需要发送带外数据来取消数据的发送，这样就能减少服务器的负担。<br>发送和接收带外数据<br>在发送带外数据时需要把函数send的flags参数设置为MSG_OOB。<br>接收带外数据分为两种情况：<br>单独读取带外数据<br>与带内数据一起读<br>如果采用分开读取的方式，那么带内数据到达时必须通知接收进程，同样，接收带内数据要把函数recv的flags参数设置为MSG_OOB。<br>下面是实现的部分代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>/*</p>
<ul>
<li>SIGURG signal handler :<br><em>/<br>static<br>void<br>sigurg<br>(<br>int<br>signo<br>)<br>{<br>int<br>n<br>;<br>char<br>buf<br>[<br>256<br>]<br>;<br>n<br>=<br>recv<br>(<br>s<br>,<br>buf<br>,<br>sizeof<br>buf<br>,<br>MSG_OOB<br>)<br>;<br>if<br>(<br>n<br>&amp;<br>lt<br>;<br>0<br>)<br>bail<br>(<br>“recv(2)”<br>)<br>;<br>buf<br>[<br>n<br>]<br>=<br>0<br>;<br>printf<br>(<br>“URG ‘%s’ (%d)<br>\n<br>“<br>,<br>buf<br>,<br>n<br>)<br>;<br>signal<br>(<br>SIGURG<br>,<br>sigurg<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br>**<br>argv<br>)<br>{<br>int<br>z<br>;<br>/</em> Status <em>/<br>char<br>buf<br>[<br>256<br>]<br>;<br>/</em></li>
<li>。。。<br>＊建立连接等等。。<br>*/<br>//取得套接口的所有权<br>z<br>=<br>fcntl<br>(<br>s<br>,<br>F_SETOWN<br>,<br>getpid<br>(<br>)<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“fcntl(2)”<br>)<br>;<br>/*</li>
<li>Catch SIGURG :<br>*/<br>signal<br>(<br>SIGURG<br>,<br>sigurg<br>)<br>;<br>for<br>(<br>;;<br>)<br>{<br>z<br>=<br>recv<br>(<br>s<br>,<br>buf<br>,<br>sizeof<br>buf<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="z-1"><a href="#z-1" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“recv(2)”<br>)<br>;<br>if<br>(<h1 id="z-2"><a href="#z-2" class="headerlink" title="z"></a>z</h1>0<br>)<br>break<br>;<br>buf<br>[<br>z<br>]<br>=<br>0<br>;<br>printf<br>(<br>“rcv ‘%s’ (%d)<br>\n<br>“<br>,<br>buf<br>,<br>z<br>)<br>;<br>}<br>close<br>(<br>s<br>)<br>;<br>return<br>0<br>;<br>}<br>这里要注意，其实紧急数据在TCP中的处理和普通的带外数据是有所区别的，这里有一个紧急指针的问题，具体的看书。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 带外数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC的简单使用教程下]]></title>
      <url>http://hackqiang.org/2009/08/06/gcc-e7-9a-84-e7-ae-80-e5-8d-95-e4-bd-bf-e7-94-a8-e6-95-99-e7-a8-8b-e4-b8-8b/</url>
      <content type="html"><![CDATA[<p>编译加速<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>-pipe<br>foo.c<br>-o<br>foo<br>文件扩展名<br>.c C 原始程序;<br>.C C++原始程序;<br>.cc C++原始程序;<br>.cxx C++原始程序;<br>.m Objective-C 原始程序;<br>.i 已经过预处理的 C 原始程序;<br>.ii 已经过预处理之 C++原始程序;<br>.s 组合语言原始程序;<br>.S 组合语言原始程序;<br>.h 预处理文件(标头文件);<br>.o 目标文件;<br>.a 存档文件。<br>GCC 常用选项<br>-c 通知 GCC 取消链接步骤,即编译源码并在最后生成目标文件;<br>-Dmacro 定义指定的宏,使它能够通过源码中的#ifdef 进行检验;<br>-E 不经过编译预处理程序的输出而输送至标准输出;<br>-g3 获得有关调试程序的详细信息,它不能与-o 选项联合使用;<br>-Idirectory 在包含文件搜索路径的起点处添加指定目录;<br>-llibrary 提示链接程序在创建最终可执行文件时包含指定的库;<br>-O、-O2、-O3 将优化状态打开,该选项不能与-g 选项联合使用;<br>-S 要求编译程序生成来自源代码的汇编程序输出;<br>-v 启动所有警报;<br>-Wall 在发生警报时取消编译操作,即将警报看作是错误;<br>-Werror 在发生警报时取消编译操作,即把报警当作是错误;<br>-w 禁止所有的报警。<br>代码优化<br>GCC 提供的代码优化功能非常强大,它通过编译选项-On 来控制优化代码的生成,其<br>中 n 是一个代表优化级别的整数。对于不同版本的 GCC 来讲,n 的取值范围及其对<br>应的优化效果可能并不完全相同,比较典型的范围是从 0 变化到 2 或 3。<br>后记：这篇文章是在我看了《开源》杂志第四期里的一篇文章改写的。作者是肖文鹏。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GCC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记20-UDP广播客户端]]></title>
      <url>http://hackqiang.org/2009/08/06/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b020-udp-e5-b9-bf-e6-92-ad-e5-ae-a2-e6-88-b7-e7-ab-af/</url>
      <content type="html"><![CDATA[<p>下面是客户端代码，它接收服务器端的消息：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>/* srv.c:</p>
<ul>
<li>Example Stock Index Broadcast :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <time.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>/</arpa></netinet></sys></sys></time.h></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em></li>
<li>This function reports the error and</li>
<li>exits back to the shell :<br><em>/<br>static<br>void<br>bail<br>(<br>const<br>char
</em><br>on_what<br>)<br>{<br>fputs<br>(<br>strerror<br>(<br>errno<br>)<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>“: “<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>on_what<br>,<br>stderr<br>)<br>;<br>fputc<br>(<br>‘<br>\n<br>‘<br>,<br>stderr<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br><em>*<br>argv<br>)<br>{<br>char<br>buf<br>[<br>128<br>]<br>;<br>int<br>z<br>;<br>/</em> Status return code <em>/<br>int<br>s<br>;<br>/</em> Socket <em>/<br>struct<br>sockaddr_in addr<br>;<br>static<br>int<br>so_reuseaddr<br>=<br>1<br>;<br>int<br>len<br>=<br>sizeof<br>(<br>addr<br>)<br>;<br>memset<br>(<br>&amp;<br>addr<br>,<br>0<br>,<br>len<br>)<br>;<br>addr.<br>sin_port<br>=<br>htons<br>(<br>9999<br>)<br>;<br>addr.<br>sin_family<br>=<br>AF_INET<br>;<br>addr.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>“127.255.255.255”<br>)<br>;<br>/</em></li>
<li>Create a UDP socket to use :<br>*/<br>s<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_DGRAM<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="s"><a href="#s" class="headerlink" title="s"></a>s</h1>-<br>1<br>)<br>bail<br>(<br>“socket()”<br>)<br>;<br>/*</li>
<li>Allow broadcasts :<br>*/<br>z<br>=<br>setsockopt<br>(<br>s<br>,<br>SOL_SOCKET<br>,<br>SO_REUSEADDR<br>,<br>&amp;<br>so_reuseaddr<br>,<br>sizeof<br>so_reuseaddr<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“setsockopt(so_reuseaddr)”<br>)<br>;<br>/*</li>
<li>Bind a address to our socket, so that</li>
<li>client programs can listen to this</li>
<li>server:<br><em>/<br>z<br>=<br>bind<br>(<br>s<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>addr<br>,<br>len<br>)<br>;<br>if<br>(<h1 id="z-1"><a href="#z-1" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“bind()”<br>)<br>;<br>for<br>(<br>;;<br>)<br>{<br>z<br>=<br>recvfrom<br>(<br>s<br>,<br>buf<br>,<br>sizeof<br>(<br>buf<br>)<br>,<br>0<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>addr<br>,<br>&amp;<br>len<br>)<br>;<br>if<br>(<h1 id="z-2"><a href="#z-2" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“recvfrom()”<br>)<br>;<br>printf<br>(<br>“%s”<br>,<br>buf<br>)<br>;<br>}<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 广播 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记19-UDP广播服务器端]]></title>
      <url>http://hackqiang.org/2009/08/06/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b019-udp-e5-b9-bf-e6-92-ad-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-ab-af/</url>
      <content type="html"><![CDATA[<p>在实际的网络应用中，只实现两点之间的的通讯是远远不够的。广播是能够同时实现多点通信的一种模式，这种通讯模式可以同时将信息发布到许多接收端点。<br>用于广播地址的约定是将IP所有的主机位都设置为1。例如127.255.255.255、192.168.0.255等。<br>下面是一段服务器的代码，它的作用是每隔4秒广播一次当前时间：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>/* srv.c:</p>
<ul>
<li>Example Stock Index Broadcast :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <time.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>/</arpa></netinet></sys></sys></time.h></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em></li>
<li>This function reports the error and</li>
<li>exits back to the shell :<br><em>/<br>static<br>void<br>bail<br>(<br>const<br>char
</em><br>on_what<br>)<br>{<br>fputs<br>(<br>strerror<br>(<br>errno<br>)<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>“: “<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>on_what<br>,<br>stderr<br>)<br>;<br>fputc<br>(<br>‘<br>\n<br>‘<br>,<br>stderr<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br><em>*<br>argv<br>)<br>{<br>time_t td<br>;<br>int<br>n<br>;<br>char<br>buf<br>[<br>128<br>]<br>;<br>int<br>z<br>;<br>/</em> Status return code <em>/<br>int<br>s<br>;<br>/</em> Socket <em>/<br>struct<br>sockaddr_in addr_srv<br>;<br>/</em> AF_INET <em>/<br>int<br>len_srv<br>;<br>/</em> length  <em>/<br>struct<br>sockaddr_in addr_bc<br>;<br>/</em> AF_INET <em>/<br>int<br>len_bc<br>;<br>/</em> length  <em>/<br>static<br>int<br>so_broadcast<br>=<br>1<br>;<br>len_srv<br>=<br>sizeof<br>(<br>addr_srv<br>)<br>;<br>len_bc<br>=<br>sizeof<br>(<br>addr_bc<br>)<br>;<br>memset<br>(<br>&amp;<br>addr_srv<br>,<br>0<br>,<br>len_srv<br>)<br>;<br>addr_srv.<br>sin_port<br>=<br>0<br>;<br>addr_srv.<br>sin_family<br>=<br>AF_INET<br>;<br>addr_srv.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>“127.0.0.1”<br>)<br>;<br>memset<br>(<br>&amp;<br>addr_bc<br>,<br>0<br>,<br>len_bc<br>)<br>;<br>addr_bc.<br>sin_port<br>=<br>htons<br>(<br>9999<br>)<br>;<br>addr_bc.<br>sin_family<br>=<br>AF_INET<br>;<br>addr_bc.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>“127.255.255.255”<br>)<br>;<br>/</em></li>
<li>Create a UDP socket to use :<br>*/<br>s<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_DGRAM<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="s"><a href="#s" class="headerlink" title="s"></a>s</h1>-<br>1<br>)<br>bail<br>(<br>“socket()”<br>)<br>;<br>/*</li>
<li>Allow broadcasts :<br>*/<br>z<br>=<br>setsockopt<br>(<br>s<br>,<br>SOL_SOCKET<br>,<br>SO_BROADCAST<br>,<br>&amp;<br>so_broadcast<br>,<br>sizeof<br>so_broadcast<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“setsockopt(SO_BROADCAST)”<br>)<br>;<br>/*</li>
<li>Bind a address to our socket, so that</li>
<li>client programs can listen to this</li>
<li>server:<br><em>/<br>z<br>=<br>bind<br>(<br>s<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>addr_srv<br>,<br>len_srv<br>)<br>;<br>if<br>(<h1 id="z-1"><a href="#z-1" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“bind()”<br>)<br>;<br>for<br>(<br>;;<br>)<br>{<br>time<br>(<br>&amp;<br>td<br>)<br>;<br>strftime<br>(<br>buf<br>,<br>sizeof<br>(<br>buf<br>)<br>,<br>“ %Y %b %d %H:%M:%S<br>\n<br>“<br>,<br>localtime<br>(<br>&amp;<br>td<br>)<br>)<br>;<br>printf<br>(<br>“%s<br>\n<br>“<br>,<br>buf<br>)<br>;<br>z<br>=<br>sendto<br>(<br>s<br>,<br>buf<br>,<br>strlen<br>(<br>buf<br>)<br>,<br>0<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>addr_bc<br>,<br>len_bc<br>)<br>;<br>if<br>(<h1 id="z-2"><a href="#z-2" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“sendto()”<br>)<br>;<br>sleep<br>(<br>4<br>)<br>;<br>}<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 广播 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC的简单使用教程上]]></title>
      <url>http://hackqiang.org/2009/08/04/gcc-e7-9a-84-e7-ae-80-e5-8d-95-e4-bd-bf-e7-94-a8-e6-95-99-e7-a8-8b-e4-b8-8a/</url>
      <content type="html"><![CDATA[<p>GCC(GNU Compiler Collection)是LINUX平台下最强大的编译器，它不仅能编译<br>C，C++，object c,它还可以通过不同的前端模块来支持各种语言,如 Java、Fortran、<br>Pascal、Modula-3 和 Ada 等。<br>编译过程<br>在使用 GCC 编译程序时,编译过程可以被细分为四个阶段:<br>◆ 预处理(Pre-Processing)<br>◆ 编译(Compiling)<br>◆ 汇编(Assembling)<br>◆ 链接(Linking)<br>下面我们来看一段简单的代码”:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6</p>
<p>#include<br>int<br>main<br>(<br>void<br>)<br>{<br>printf<br>(<br>“Hello world !<br>\n<br>“<br>)<br>;<br>return<br>0<br>;<br>}<br>现在编译执行：<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>$<br>gcc<br>hello.c<br>-o<br>hello<br>$ .<br>/<br>hello<br>Hello world<br>!<br>为了弄清楚编译的过程，我们现在把编译分成几个单独的步骤：<br>第一步是进行预编译,使用-E 参数可以让 GCC 在预处理结束后停止编译过程:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>-E<br>hello.c<br>-o<br>hello.i<br>此时若查看 hello.cpp 文件中的内容,会发现 stdio.h 的内容确实都插到文件里去了,而其它应当被预处理的宏定义也都做了相应的处理。下一步是将 hello.i 编译为目标代码,这可以通过使用-c 参数来完成:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>-c<br>hello.i<br>-o<br>hello.o<br>GCC 默认将.i 文件看成是预处理后的 C 语言源代码,因此上述命令将自动跳过预处<br>理步骤而开始执行编译过程,也可以使用-x 参数让 GCC 从指定的步骤开始编译。最<br>后一步是将生成的目标文件链接成可执行文件:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>hello.o<br>-o<br>hello<br>在采用模块化的设计思想进行软件开发时,通常整个程序是由多个源文件组成的,相<br>应地也就形成了多个编译单元,使用 GCC 能够很好地管理这些编译单元。假设有一<br>个由 foo1.c 和 foo2.c 两个源文件组成的程序,为了对它们进行编译,并最终生成可执<br>行程序 foo,可以使用下面这条命令:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>foo1.c foo2.c<br>-o<br>foo<br>如果同时处理的文件不止一个,GCC 仍然会按照预处理、编译和链接的过程依次进<br>行。如果深究起来,上面这条命令大致相当于依次执行如下三条命令:<br>?<br>View Code<br>BASH<br>1<br>2<br>3<br>$<br>gcc<br>-c<br>foo1.c<br>-o<br>foo1.o<br>$<br>gcc<br>-c<br>foo2.c<br>-o<br>foo2.o<br>$<br>gcc<br>foo1.o foo2.o<br>-o<br>foo<br>警告提示功能<br>GCC 包含完整的出错检查和警告提示功能,它们可以帮助 Linux 程序员写出更加专<br>业和优美的代码。常用的警告选项有：<br>-pedantic ：使用了扩展语法的地方将产生相应的警告信息。<br>-Wall ：使用它能够使 GCC 产生尽可能多的警告信息。<br>-Werror：它要求 GCC 将所有的警告当成错误进行处理。<br>库依赖<br>GCC 采用搜索目录的办法来查找所需要的文件,-I 选项可以向 GCC 的头文件搜索路<br>径中添加新的目录。例如,如果在/home/xiaowp/include/目录下有编译时所需要的头<br>文件,为了让 GCC 能够顺利地找到它们,就可以使用-I 选项:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>foo.c<br>-I<br>/<br>home<br>/<br>xiaowp<br>/<br>include<br>-o<br>foo<br>同样,如果使用了不在标准位置的库文件,那么可以通过-L 选项向 GCC 的库文件搜索路径中添加新的目录。例如,如果在/home/xiaowp/lib/目录下有链接时所需要的库文<br>件 libfoo.so,为了让 GCC 能够顺利地找到它,可以使用下面的命令:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>foo.c<br>-L<br>/<br>home<br>/<br>xiaowp<br>/<br>lib<br>-lfoo<br>-o<br>foo<br>值得好好解释一下的是-l 选项,它指示 GCC 去连接库文件 libfoo.so。Linux 下的库文<br>件在命名时有一个约定,那就是应该以 lib 三个字母开头,由于所有的库文件都遵循了<br>同样的规范,因此在用-l 选项指定链接的库文件名时可以省去 lib 三个字母,也就是说<br>GCC 在对-lfoo 进行处理时,会自动去链接名为libfoo.so 的文件。<br>Linux 下的库文件分为两大类分别是动态链接库(通常以.so 结尾)和静态链接库(通常<br>以.a 结尾),两者的差别仅在程序执行时所需的代码是在运行时动态加载的,还是在编<br>译时静态加载的。默认情况下,GCC 在链接时优先使用动态链接库,只有当动态链接<br>库不存在时才考虑使用静态链接库,如果需要的话可以在编译时加上-static 选项,强制<br>使用静态链接库。例如,如果在/home/xiaowp/lib/目录下有链接时所需要的库文件<br>libfoo.so 和 libfoo.a,为了让 GCC 在链接时只用到静态链接库,可以使用下面的命令:<br>?<br>View Code<br>BASH<br>1<br>$<br>gcc<br>foo.c<br>-L<br>/<br>home<br>/<br>xiaowp<br>/<br>lib<br>-static<br>-lfoo<br>-o<br>foo<br>后记：这篇文章是在我看了《开源》杂志第四期里的一篇文章改写的。作者是肖文鹏。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GCC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记18-定义缓冲操作]]></title>
      <url>http://hackqiang.org/2009/08/03/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b018-e5-ae-9a-e4-b9-89-e7-bc-93-e5-86-b2-e6-93-8d-e4-bd-9c/</url>
      <content type="html"><![CDATA[<p>使用stdio(3)时,通常会用到缓冲技术.从而提高整个系统的I/O效率.<br>Linux中的FILE流有三种基本的饿缓冲模式:<br>全缓冲(“块缓冲”)<br>线形缓冲<br>无缓冲<br>用于缓冲控制的函数:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>
<p>#include<stdio.h><br>int<br>setbuf<br>(<br>FILE<br><em><br>stream<br>,<br>char
</em><br>buf<br>)<br>;<br>int<br>setbuffer<br>(<br>FILE<br><em><br>stream<br>,<br>char
</em><br>buf<br>,<br>size_t size<br>)<br>;<br>int<br>setlinebuf<br>(<br>FILE<br><em><br>stream<br>)<br>;<br>int<br>setvbuf<br>(<br>FILE
</em><br>stream<br>,<br>char<br>*<br>buf<br>,<br>int<br>mode<br>,<br>size_t size<br>)<br>;<br>setvbuf中mode的取值有:<br>_IOFBF:全缓冲<br>_IOLBF:线形缓冲<br>_IONBF:无缓冲</stdio.h></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> I/O </tag>
            
            <tag> 缓冲 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记17-标准I/O的关闭]]></title>
      <url>http://hackqiang.org/2009/08/02/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b017-e6-a0-87-e5-87-86io-e7-9a-84-e5-85-b3-e9-97-ad/</url>
      <content type="html"><![CDATA[<p>当打开多个文件描述符时就不能再简单的使用shutdown()函数了,因为shutdown()函数是不考虑套接口上打开的文件描述符个数的.<br>当连接建立后,我们需要考虑3种情况:<br>(在只关闭写端的情况下)进程只等待接收数据,而不再写数据.<br>(在只关闭读端的情况下)进程只试探写数据,而不再接收数据.<br>(同时关闭读写端的情况下)进程不进行读写操作.<br>第一中情况用源码表示:<br>fflush(wx);<br>shutdown(fileno(wx),SHUT_WR);<br>fclose(wx);<br>在关闭之前要先清除输出流,使用函数fflush().fileno()函数用于获得文件描述符.<br>第二中情况用源码表示:<br>shutdown(fileno(rx),SHUT_RD);<br>fclose(rx);<br>第三中情况用源码表示:<br>fclose(wx);<br>shutdown(fileno(rx),SHUT_DOWN);<br>fclose(rx);</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> I/O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记16-套接口上的标准I/O]]></title>
      <url>http://hackqiang.org/2009/08/01/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b016-e5-a5-97-e6-8e-a5-e5-8f-a3-e4-b8-8a-e7-9a-84-e6-a0-87-e5-87-86io/</url>
      <content type="html"><![CDATA[<p>采用标准的I/O可以增强程序的可移植性,可以提高程序的性能.<br>fdopen(3)可以为套接口打开stdio(3)调用.</p>
<p>#include<br>FILE fdopen(int files,const char <em>mode);<br>files为文件描述符,mode为打开的模式.与函数fopen中的模式一样.<br>如果调用成功返回一个FILE结构指针,否则返回一个空指针,错误信息在errno中.<br>下面是一个示例:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>int<br>s<br>;<br>FILE
</em><br>io<br>;<br>s<br>=<br>socket<br>(<br>…<br>)<br>;<br>io<br>=<br>fdopen<br>(<br>s<br>,<br>“w+”<br>)<br>;<br>if<br>(</p>
<h1 id="io"><a href="#io" class="headerlink" title="io"></a>io</h1><p>NULL<br>)<br>{<br>fprintf<br>(<br>stderr<br>,<br>“%s:fdopen<br>\n<br>“<br>,<br>strerror<br>(<br>errno<br>)<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>一般情况下为了让程序更加安全个高效,常常采用分开使用读写流的方式.<br>下面是一个示例:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>int<br>s<br>;<br>FILE<br><em><br>rx<br>;<br>//读流<br>FILE
</em><br>wx<br>;<br>//写流<br>s<br>=<br>socket<br>(<br>…<br>)<br>;<br>rx<br>=<br>fdopen<br>(<br>s<br>,<br>“r”<br>)<br>;<br>if<br>(</p>
<h1 id="rx"><a href="#rx" class="headerlink" title="rx"></a>rx</h1><p>NULL<br>)<br>{<br>……..<br>}<br>wx<br>=<br>fdopen<br>(<br>dup<br>(<br>s<br>)<br>,<br>“r”<br>)<br>;<br>if<br>(</p>
<h1 id="wx"><a href="#wx" class="headerlink" title="wx"></a>wx</h1><p>NULL<br>)<br>{<br>……..<br>}<br>建立两个流后,用户就可以安全的在rx流上使用fgetc()和fgets()等输入函数,在wx流上使用fputc()和fpuuts()等输出函数.<br>当不再使用时就调用fclose()关闭这些流.</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket </tag>
            
            <tag> I/O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用GDB时设置观察点]]></title>
      <url>http://hackqiang.org/2009/07/31/e4-bd-bf-e7-94-a8gdb-e6-97-b6-e8-ae-be-e7-bd-ae-e8-a7-82-e5-af-9f-e7-82-b9/</url>
      <content type="html"><![CDATA[<p>调试程序的时候除了要设置断点，有时还需要设置观察点，即监视一个变量，当他的值改变时程序暂停。<br>设置观察点的命令为：watch.<br>例如watch  var即为变量var设置一个观察点。<br>下面是几个经常用到的命令：<br>i watchpoints:显示所有观察点。<br>x var：打印变量var起始地址一段区域的内存，以字节为单位。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记15-主机名和网络名的查询]]></title>
      <url>http://hackqiang.org/2009/07/31/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b015-e4-b8-bb-e6-9c-ba-e5-90-8d-e5-92-8c-e7-bd-91-e7-bb-9c-e5-90-8d-e7-9a-84-e6-9f-a5-e8-af-a2/</url>
      <content type="html"><![CDATA[<p>相对于IP来说，人们更倾向于使用名字。<br>下面就学习几个常用的关于主机名和IP地址等相关的函数：<br>gethostname(2)：获取当前主机名。<br>定义：<br>＃include<sys utsname.h=""><br>int gethostname(char *name,size_t len);<br>参数说明：<br>name用于接受主机名信息，len为name的最大长度。<br>成功返回0；否则返回－1，错误信息保存在errno中。<br>getdomainname(2):获取主机上的NIS域名。<br>用法与函数gethostname几乎一样。<br>gethostbyname(2)<br>这个函数的输入参数是想要查询的主机名，返回值是一个指向结构hostent的指针。<br>定义：</sys></p>
<p>#include<netdb.h><br>extern int h_errno;<br>struct hostent <em>gethostbyname(const  char </em>name);<br>struct hostent{<br>char h_name;//主机官方名<br>char <strong>h_aliases;//别名清单<br>int h_addrtype;//地址类型<br>int h_length;//地址长度<br>char </strong>h_addr_list;//地址清单<br>};</netdb.h></p>
<p>#define h_addr h_addr_list[0]<br>gethostbyaddr(3):用IP地址查找主机信息。<br>定义：</p>
<p>#include <sys socket.h=""><br>struct hostent <em>gethostbyaddr(<br>const char </em>addr,<br>int len,<br>int type);</sys></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记14-TCP/IP协议实现的服务器端]]></title>
      <url>http://hackqiang.org/2009/07/30/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b014-tcpip-e5-8d-8f-e8-ae-ae-e5-ae-9e-e7-8e-b0-e7-9a-84-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-ab-af/</url>
      <content type="html"><![CDATA[<p>服务器端的基本工作步骤为：<br>建立套接口。<br>绑定地址接口。<br>监听。<br>接受连接请求。<br>与客户端通讯。<br>关闭。<br>监听所用的函数为listen(2):<br>定义：</p>
<p>#include <sys socket.h=""><br>int listen(int s, int backlog);<br>s为监听的套接口，backlog为连接队列的长度。<br>如果调用成功返回0；负责返回－1，错误信息在变量errno中。<br>接受连接请求使用函数accept(2):<br>定义：</sys></p>
<p>#include <sys socket.h=""></sys></p>
<p>#include <sys types.h=""><br>int accept(int s, struct sockaddr <em>addr,int </em>len);<br>s必须为之前的监听套接口，addr为接受客户套接口的地址，len指向接受套接口地址缓存最大长度的指针。<br>如果调用成功返回一个新的套接口描述符；负责返回－1，错误信息在变量errno中。<br>下面一段是提供daytime服务的服务器代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>/* server.c:</sys></p>
<ul>
<li>Example daytime server :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <time.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>#include <netdb.h><br>static<br>void<br>bail<br>(<br>const<br>char
</netdb.h></arpa></netinet></sys></sys></time.h></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em><br>on_what<br>)<br>{<br>if<br>(<br>errno<br>!=<br>0<br>)<br>{<br>fputs<br>(<br>strerror<br>(<br>errno<br>)<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>“: “<br>,<br>stderr<br>)<br>;<br>}<br>fputs<br>(<br>on_what<br>,<br>stderr<br>)<br>;<br>fputc<br>(<br>‘<br>\n<br>‘<br>,<br>stderr<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br><em>*<br>argv<br>)<br>{<br>int<br>z<br>;<br>char
</em><br>srvr_addr<br>=<br>NULL<br>;<br>char<br><em><br>srvr_port<br>=<br>“13”<br>;<br>struct<br>sockaddr_in adr_srvr<br>;<br>/</em> AF_INET <em>/<br>struct<br>sockaddr_in adr_clnt<br>;<br>/</em> AF_INET <em>/<br>int<br>len_inet<br>;<br>/</em> length  <em>/<br>int<br>s<br>;<br>/</em> Socket <em>/<br>int<br>c<br>;<br>/</em> Client socket <em>/<br>int<br>n<br>;<br>/</em> bytes <em>/<br>time_t td<br>;<br>/</em> Current date&amp;time <em>/<br>char<br>dtbuf<br>[<br>128<br>]<br>;<br>/</em> Date/Time info <em>/<br>/</em></li>
<li>Create a TDP/IP socket to use :<br>*/<br>s<br>=<br>socket<br>(<br>PF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="s"><a href="#s" class="headerlink" title="s"></a>s</h1>-<br>1<br>)<br>bail<br>(<br>“socket()”<br>)<br>;<br>/*</li>
<li>Create a server socket address:<br><em>/<br>memset<br>(<br>&amp;<br>adr_srvr<br>,<br>0<br>,<br>sizeof<br>adr_srvr<br>)<br>;<br>adr_srvr.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_srvr.<br>sin_port<br>=<br>htons<br>(<br>atoi<br>(<br>srvr_port<br>)<br>)<br>;<br>adr_srvr.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>“127.0.0.1”<br>)<br>;<br>/</em></li>
<li>Bind the server address:<br><em>/<br>len_inet<br>=<br>sizeof<br>adr_srvr<br>;<br>z<br>=<br>bind<br>(<br>s<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_srvr<br>,<br>len_inet<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“bind(2)”<br>)<br>;<br>/*</li>
<li>Make it a listening socket:<br>*/<br>z<br>=<br>listen<br>(<br>s<br>,<br>10<br>)<br>;<br>if<br>(<h1 id="z-1"><a href="#z-1" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“listen(2)”<br>)<br>;<br>/*</li>
<li>Start the server loop :<br><em>/<br>for<br>(<br>;;<br>)<br>{<br>/</em></li>
<li>Wait for a connect :<br><em>/<br>len_inet<br>=<br>sizeof<br>adr_clnt<br>;<br>c<br>=<br>accept<br>(<br>s<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_clnt<br>,<br>&amp;<br>len_inet<br>)<br>;<br>if<br>(<h1 id="c"><a href="#c" class="headerlink" title="c"></a>c</h1>-<br>1<br>)<br>bail<br>(<br>“accept(2)”<br>)<br>;<br>/*</li>
<li>Generate a time stamp :<br><em>/<br>time<br>(<br>&amp;<br>td<br>)<br>;<br>n<br>=<br>(<br>int<br>)<br>strftime<br>(<br>dtbuf<br>,<br>sizeof<br>dtbuf<br>,<br>“%A %b %d %H:%M:%S %Y<br>\n<br>“<br>,<br>localtime<br>(<br>&amp;<br>td<br>)<br>)<br>;<br>/</em></li>
<li>Write result back to the client :<br>*/<br>z<br>=<br>write<br>(<br>c<br>,<br>dtbuf<br>,<br>n<br>)<br>;<br>if<br>(<h1 id="z-2"><a href="#z-2" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“write(2)”<br>)<br>;<br>close<br>(<br>c<br>)<br>;<br>}<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记13-TCP/IP协议实现的客户端]]></title>
      <url>http://hackqiang.org/2009/07/29/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b013-tcpip-e5-8d-8f-e8-ae-ae-e5-ae-9e-e7-8e-b0-e7-9a-84-e5-ae-a2-e6-88-b7-e7-ab-af/</url>
      <content type="html"><![CDATA[<p>要基于TCP/IP协议进行通信，客户端需要进行以下几个步骤：<br>建立套接口。<br>连接到服务器。<br>进行通讯。<br>关闭连接。<br>其中进行通讯使用read(2)和write(2)函数。<br>下面这段客户端的代码与服务器进行通讯，取得服务器时间。用到的服务为daytime,端口号为13，使用的协议为TCP/IP协议。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>/* daytime.c:</p>
<ul>
<li>Example daytime client :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>#include <netdb.h><br>static<br>void<br>bail<br>(<br>const<br>char
</netdb.h></arpa></netinet></sys></sys></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em><br>on_what<br>)<br>{<br>fputs<br>(<br>strerror<br>(<br>errno<br>)<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>“: “<br>,<br>stderr<br>)<br>;<br>fputs<br>(<br>on_what<br>,<br>stderr<br>)<br>;<br>fputc<br>(<br>‘<br>\n<br>‘<br>,<br>stderr<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br><em>*<br>argv<br>)<br>{<br>int<br>z<br>;<br>struct<br>sockaddr_in adr_srvr<br>;<br>/</em> AF_INET <em>/<br>int<br>len_inet<br>;<br>/</em> length  <em>/<br>int<br>s<br>;<br>/</em> Socket <em>/<br>char<br>dtbuf<br>[<br>128<br>]<br>;<br>/</em> Date/Time info <em>/<br>/</em></li>
<li>Create a server socket address:<br><em>/<br>memset<br>(<br>&amp;<br>amp<br>;<br>adr_srvr<br>,<br>0<br>,<br>sizeof<br>adr_srvr<br>)<br>;<br>adr_srvr.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_srvr.<br>sin_port<br>=<br>htons<br>(<br>13<br>)<br>;<br>adr_srvr.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>“127.0.0.1”<br>)<br>;<br>len_inet<br>=<br>sizeof<br>adr_srvr<br>;<br>/</em></li>
<li>Create a TDP/IP socket to use :<br>*/<br>s<br>=<br>socket<br>(<br>PF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="s"><a href="#s" class="headerlink" title="s"></a>s</h1>-<br>1<br>)<br>bail<br>(<br>“socket()”<br>)<br>;<br>/*</li>
<li>Connect to the server:<br>*/<br>z<br>=<br>connect<br>(<br>s<br>,&amp;<br>amp<br>;<br>adr_srvr<br>,<br>len_inet<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“connect(2)”<br>)<br>;<br>/*</li>
<li>Read the date/time info:<br>*/<br>z<br>=<br>read<br>(<br>s<br>,&amp;<br>amp<br>;<br>dtbuf<br>,<br>sizeof<br>dtbuf<br>-<br>1<br>)<br>;<br>if<br>(<h1 id="z-1"><a href="#z-1" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“read(2)”<br>)<br>;<br>/*</li>
<li>Report the Date &amp; Time :<br><em>/<br>dtbuf<br>[<br>z<br>]<br>=<br>0<br>;<br>/</em> null terminate string <em>/<br>printf<br>(<br>“Date &amp; Time is: %s<br>\n<br>“<br>,<br>dtbuf<br>)<br>;<br>/</em></li>
<li>Close the socket and exit:<br>*/<br>close<br>(<br>s<br>)<br>;<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记12-面向连接的协议]]></title>
      <url>http://hackqiang.org/2009/07/28/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b012-e9-9d-a2-e5-90-91-e8-bf-9e-e6-8e-a5-e7-9a-84-e5-8d-8f-e8-ae-ae/</url>
      <content type="html"><![CDATA[<p>之前学了面向非连接的协议UDP协议，现在开始学习另一个重要的面向连接的协议－－TCP/IP协议。相对于UDP协议，TCP/IP协议将能很好的处理以下几个问题：<br>分组的丢失<br>超时和重发<br>接收顺序的混乱<br>流控<br>在学习TCP/IP协议之前我们先要了解几个属于Internet服务的TCP/IP附属设施。<br>/etc/services文件<br>这个文件将某个特定的Internet服务名映射到协议的端口号。<br>/etc/protocols文件<br>这个文件包含了已定义的Internet协议值。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GDB中断点的设置]]></title>
      <url>http://hackqiang.org/2009/07/28/gdb-e4-b8-ad-e6-96-ad-e7-82-b9-e7-9a-84-e8-ae-be-e7-bd-ae/</url>
      <content type="html"><![CDATA[<p>在进行调试程序的时候会经常需要设置断点，GDB很好的支持了断点。<br>设置一个断点的命令是break(b).后面加行数或函数名，生成的每个断点都有一个编号。下面列出几个在设置断点时常用到的函数：<br>continue(c):从当前位置连续运行，直到遇到断点。<br>run(r):从程序开始处连续运行，直到断点。<br>info(i) breakpoints :显示所有断点。<br>delete breakpoints X:删除编号为x的断点。<br>disable/enable breakpoints x :使编号为x的断点失效/生效。<br>display s:跟踪查看变量s的值。<br>undisplay s:取消变量s的跟踪。<br>此外，GDB还可以让一个断点在满足一定的条件才有效。例如：</p>
<blockquote>
<p>break 5 if x&gt;0<br>它的意思是在第5行设置一个断点，但只当x&gt;0时断点才生效。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用GDB调试时常用的几个命令]]></title>
      <url>http://hackqiang.org/2009/07/27/e7-94-a8gdb-e8-b0-83-e8-af-95-e6-97-b6-e5-b8-b8-e7-94-a8-e7-9a-84-e5-87-a0-e4-b8-aa-e5-91-bd-e4-bb-a4/</url>
      <content type="html"><![CDATA[<p>要使用GDB进行调试，要在编译的时候加上“-g”选项：<br>例：<br>?<br>View Code<br>BASH<br>1<br>2<br>$<br>gcc<br>-g<br>main.c<br>-o<br>main<br>$<br>gdb<br>main<br>以下是几个常用命令：<br>help:帮助命令，可以直接在help后加要查询的命令。<br>list:列出源代码，一次列十行。也可以在后面加上函数名查询函数。<br>start:开始调试，程序运行到main函数入口等待操作。<br>next(n):单步调试，不进入函数。<br>setp(s):单步调试，如有函数进入。<br>backtrack(bt):查看函数调用帧栈。<br>info locals:查看局部变量的值。<br>frame:选择帧栈。<br>print(p):打出指定变量值。<br>print(p) var=x:将变量var的值设置为x。<br>set var=x:功能同上。<br>finish:一直运行到当前函数返回为止。</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记11-一个基于UDP协议的实例]]></title>
      <url>http://hackqiang.org/2009/07/27/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b011-e4-b8-80-e4-b8-aa-e5-9f-ba-e4-ba-8eudp-e5-8d-8f-e8-ae-ae-e7-9a-84-e5-ae-9e-e4-be-8b/</url>
      <content type="html"><![CDATA[<p>要使用UDP协议进行通讯，需要以下几个步骤：<br>服务器端（接收着端）：<br>创建套接字。<br>将创建的套接字绑定到本地的地址和端口上。<br>等待接收数据。<br>关闭套接字。<br>客户端（发送端）：<br>创建套接字。<br>向服务器端发送数据。<br>关闭套接字。<br>服务器端代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>/*</p>
<ul>
<li>server :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <time.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br>**<br>argv<br>)<br>{<br>int<br>z<br>;<br>char
</arpa></netinet></sys></sys></time.h></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em><br>srvr_addr<br>=<br>NULL<br>;<br>struct<br>sockaddr_in adr_inet<br>;<br>/<em> AF_INET </em>/<br>struct<br>sockaddr_in adr_clnt<br>;<br>/<em> AF_INET </em>/<br>int<br>len_inet<br>;<br>/<em> length  </em>/<br>int<br>s<br>;<br>/<em> Socket </em>/<br>char<br>dgram<br>[<br>512<br>]<br>;<br>/<em> Recv buffer </em>/<br>char<br>dtfmt<br>[<br>512<br>]<br>;<br>/<em> Date/Time Result </em>/<br>srvr_addr<br>=<br>“127.0.0.23”<br>;<br>/*</li>
<li>Create a UDP socket to use :<br><em>/<br>s<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_DGRAM<br>,<br>0<br>)<br>;<br>/</em></li>
<li>Create a socket address, for use</li>
<li>with bind(2) :<br><em>/<br>memset<br>(<br>&amp;<br>adr_inet<br>,<br>0<br>,<br>sizeof<br>adr_inet<br>)<br>;<br>adr_inet.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_inet.<br>sin_port<br>=<br>htons<br>(<br>9090<br>)<br>;<br>adr_inet.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>srvr_addr<br>)<br>;<br>len_inet<br>=<br>sizeof<br>adr_inet<br>;<br>/</em></li>
<li>Bind a address to our socket, so that</li>
<li>client programs can contact this</li>
<li>server:<br><em>/<br>z<br>=<br>bind<br>(<br>s<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_inet<br>,<br>len_inet<br>)<br>;<br>/*</li>
<li>Now wait for requests:<br><em>/<br>for<br>(<br>;;<br>)<br>{<br>/</em></li>
<li>Block until the program receives a</li>
<li>datagram at our address and port:<br><em>/<br>len_inet<br>=<br>sizeof<br>adr_clnt<br>;<br>z<br>=<br>recvfrom<br>(<br>s<br>,<br>/</em> Socket <em>/<br>dgram<br>,<br>/</em> Receiving buffer <em>/<br>sizeof<br>dgram<br>,<br>/</em> Max recv buf size <em>/<br>0<br>,<br>/</em> Flags: no options <em>/<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_clnt<br>,<br>/<em> Addr </em>/<br>&amp;<br>len_inet<br>)<br>;<br>/<em> Addr len, in &amp; out </em>/<br>/*</li>
<li>Process the request :<br><em>/<br>dgram<br>[<br>z<br>]<br>=<br>0<br>;<br>/</em> null terminate <em>/<br>printf<br>(<br>“%s:%s<br>\n<br>“<br>,<br>inet_ntoa<br>(<br>adr_clnt.<br>sin_addr<br>)<br>,<br>dgram<br>)<br>;<br>fputs<br>(<br>“Enter:”<br>,<br>stdout<br>)<br>;<br>if<br>(<br>!<br>fgets<br>(<br>dtfmt<br>,<br>sizeof<br>dtfmt<br>,<br>stdin<br>)<br>)<br>break<br>;<br>z<br>=<br>sendto<br>(<br>s<br>,<br>/</em> Socket to send result <em>/<br>dtfmt<br>,<br>/</em> The datagram result to snd <em>/<br>strlen<br>(<br>dtfmt<br>)<br>,<br>/</em> The datagram lngth <em>/<br>0<br>,<br>/</em> Flags: no options <em>/<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_clnt<br>,<br>/<em> addr </em>/<br>len_inet<br>)<br>;<br>/<em> Client address length </em>/<br>}<br>/*</li>
<li>Close the socket and exit:<br><em>/<br>close<br>(<br>s<br>)<br>;<br>return<br>0<br>;<br>}<br>客户端代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>/</em></li>
<li>client :<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <time.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>#include <arpa inet.h=""><br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br>**<br>argv<br>)<br>{<br>int<br>z<br>;<br>int<br>x<br>;<br>char
</arpa></netinet></sys></sys></time.h></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em><br>srvr_addr<br>=<br>NULL<br>;<br>struct<br>sockaddr_in adr_srvr<br>;<br>/<em> AF_INET </em>/<br>struct<br>sockaddr_in adr<br>;<br>/<em> AF_INET </em>/<br>int<br>len_inet<br>;<br>/<em> length  </em>/<br>int<br>s<br>;<br>/<em> Socket </em>/<br>char<br>dgram<br>[<br>512<br>]<br>;<br>/<em> Recv buffer </em>/<br>srvr_addr<br>=<br>“127.0.0.23”<br>;<br>/*</li>
<li>Create a socket address, to use</li>
<li>to contact the server with:<br><em>/<br>memset<br>(<br>&amp;<br>adr_srvr<br>,<br>0<br>,<br>sizeof<br>adr_srvr<br>)<br>;<br>adr_srvr.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_srvr.<br>sin_port<br>=<br>htons<br>(<br>9090<br>)<br>;<br>adr_srvr.<br>sin_addr<br>.<br>s_addr<br>=<br>inet_addr<br>(<br>srvr_addr<br>)<br>;<br>len_inet<br>=<br>sizeof<br>adr_srvr<br>;<br>/</em></li>
<li>Create a UDP socket to use :<br><em>/<br>s<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_DGRAM<br>,<br>0<br>)<br>;<br>for<br>(<br>;;<br>)<br>{<br>/</em></li>
<li>Prompt user for a date format string:<br><em>/<br>fputs<br>(<br>“Enter:”<br>,<br>stdout<br>)<br>;<br>if<br>(<br>!<br>fgets<br>(<br>dgram<br>,<br>sizeof<br>dgram<br>,<br>stdin<br>)<br>)<br>break<br>;<br>/</em> EOF */<br>z<br>=<br>strlen<br>(<br>dgram<br>)<br>;<br>if<br>(<br>z<br>&gt;<br>0<br>&amp;&amp;<br>dgram<h2 id=""><a href="#" class="headerlink" title="["></a>[</h2>z<h1 id="-1"><a href="#-1" class="headerlink" title="]"></a>]</h1>‘<br>\n<br>‘<br>)<br>dgram<br>[<br>z<br>]<br>=<br>0<br>;<br>/<em> Stomp out newline </em>/<br>/*</li>
<li>Send format string to server:<br><em>/<br>z<br>=<br>sendto<br>(<br>s<br>,<br>/</em> Socket to send result <em>/<br>dgram<br>,<br>/</em> The datagram result to snd <em>/<br>strlen<br>(<br>dgram<br>)<br>,<br>/</em> The datagram lngth <em>/<br>0<br>,<br>/</em> Flags: no options <em>/<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr_srvr<br>,<br>/<em> addr </em>/<br>len_inet<br>)<br>;<br>/<em> Server address length </em>/<br>/*</li>
<li>Wait for a response :<br><em>/<br>x<br>=<br>sizeof<br>adr<br>;<br>z<br>=<br>recvfrom<br>(<br>s<br>,<br>/</em> Socket <em>/<br>dgram<br>,<br>/</em> Receiving buffer <em>/<br>sizeof<br>dgram<br>,<br>/</em> Max recv buf size <em>/<br>0<br>,<br>/</em> Flags: no options <em>/<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>adr<br>,<br>/<em> Addr </em>/<br>&amp;<br>x<br>)<br>;<br>/<em> Addr len, in &amp; out </em>/<br>dgram<br>[<br>z<br>]<br>=<br>0<br>;<br>/<em> null terminate </em>/<br>printf<br>(<br>“%s:%s<br>\n<br>“<br>,<br>inet_ntoa<br>(<br>adr.<br>sin_addr<br>)<br>,<br>dgram<br>)<br>;<br>}<br>/*</li>
<li>Close the socket and exit:<br>*/<br>close<br>(<br>s<br>)<br>;<br>return<br>0<br>;<br>}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
            <tag> UDP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记10-面向非连接的协议(UDP)]]></title>
      <url>http://hackqiang.org/2009/07/26/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b010-e9-9d-a2-e5-90-91-e9-9d-9e-e8-bf-9e-e6-8e-a5-e7-9a-84-e5-8d-8f-e8-ae-aeudp/</url>
      <content type="html"><![CDATA[<p>UDP协议相对于TCP/IP协议主要有下面几个优点：<br>简单：不需要建立连接。<br>灵活：每一次的消息都可以发送给不同的人。<br>高效：没有复杂的“三次握手”。<br>具有广播能力：一个消息可以同时发给多个接收者。<br>当然，它也有显著的缺点：<br>不可靠。<br>信息无序性。<br>消息的大小有限制。<br>在具体实现UDP连接之前，先看看下面两个函数：<br>sendto(2)用来将数据由指定的socket传给对方主机。<br>定义：</p>
<p>#include &lt; sys/types.h &gt;</p>
<p>#include &lt; sys/socket.h &gt;<br>int sendto ( int s ,const void <em> msg,int len, unsigned int flags,conststruct sockaddr </em> to , int tolen ) ;<br>参数说明：<br>参数s为已建好连线的socket,如果利用UDP协议则不需经过连线操作。参数msg指向欲连线的数据内容，参数flags 一般设0。参数to用来指定欲传送的网络地址。参数tolen为sockaddr的结果长度。<br>返回值<br>成功则返回实际传送出去的字符数，失败返回－1，错误原因存于errno 中。<br>recvfrom(2)用来接收远程主机经指定的socket 传来的数据。<br>定义:</p>
<p>#include<sys types.h=""></sys></p>
<p>#include<sys socket.h=""><br>int recvfrom(int s,void <em>buf,int len,unsigned int flags ,struct sockaddr </em>from ,int *fromlen);<br>参数说明：<br>接收数据存到由参数buf 指向的内存空间，参数len 为可接收数据的最大长度。参数flags 一般设0。参数from用来指定欲传送的网络地址。参数fromlen为sockaddr的结构长度。<br>返回值：<br>成功则返回接收到的字符数，失败则返回-1，错误原因存于errno中。</sys></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket </tag>
            
            <tag> UDP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下不带缓冲的I/O操作函数3]]></title>
      <url>http://hackqiang.org/2009/07/26/linux-e4-b8-8b-e4-b8-8d-e5-b8-a6-e7-bc-93-e5-86-b2-e7-9a-84io-e6-93-8d-e4-bd-9c-e5-87-bd-e6-95-b03/</url>
      <content type="html"><![CDATA[<p>fcntl函数可以改变已打开的文件的性质：</p>
<p>#include<unistd.h></unistd.h></p>
<p>#include<fcntl.h><br>int fcntl(int fd , int cmd);<br>int fcntl(int fd,int cmd,long arg);<br>int fcntl(int fd,int cmd,struct flock * lock);<br>参数fd代表欲设置的文件描述词，参数cmd代表欲操作的指令。<br>fcntl有5个功能：<br>cmd=F_DUPFD:复制现有的描述符。<br>cmd=F_GETFD或F_SETFD:获得/设置文件描述符标记。<br>cmd=F_GETFL或F_SETFL:获得/设置文件状态标志。<br>cmd=F_GETOWN或F_SETOWN:获得/设置异步I/O所有权。<br>cmd=F_GETLK或F_SETLK:获得/设置记录锁。<br>下面的两个函数可以用来复制一个现存的文件描述符：</fcntl.h></p>
<p>#include<unistd.h><br>int dup(int file);<br>int dup2(int file,int file2);<br>成功返回新描述符，否则返回－1。<br>调用dup(file)等效于：<br>fcntl(file,F_DUPFD,0);<br>调用dup2(file,file2)等效于：<br>close(file2);<br>fcntl(file,F_DUPFD,file2);<br>但dup2是原子操作。</unistd.h></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下不带缓冲的I/O操作函数2]]></title>
      <url>http://hackqiang.org/2009/07/26/linux-e4-b8-8b-e4-b8-8d-e5-b8-a6-e7-bc-93-e5-86-b2-e7-9a-84io-e6-93-8d-e4-bd-9c-e5-87-bd-e6-95-b02/</url>
      <content type="html"><![CDATA[<p>原子操作是指由多步组成的操作，这些操作要不全不发生，要不全发生。这对于文件系统的读写是非常重要的。<br>pread和pwrite是两个典型的原子操作函数。</p>
<p>#include <unistd.h><br>ssize_t  pread(int file,void <em>buf,size_t nbytes,off_t offset);<br>//成功返回读到的字符数，若读到尾返回0，出错返回－1。<br>ssize_t  pwrite(int file,const void </em>buf,size_t nbytes,off_t offset);<br>//成功返回已写字节数，出错返回－1。<br>pread相当于顺寻调用lseek和read,但是无法中断它们的操作。<br>pwrite类似。</unistd.h></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> 原子操作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下不带缓冲的I/O操作函数1]]></title>
      <url>http://hackqiang.org/2009/07/25/linux-e4-b8-8b-e4-b8-8d-e5-b8-a6-e7-bc-93-e5-86-b2-e7-9a-84io-e6-93-8d-e4-bd-9c-e5-87-bd-e6-95-b01/</url>
      <content type="html"><![CDATA[<p>首先了解“文件描述符”：对于内核而言，所有打开的文件都是通过文件描述符引用。它是一个非负整数，它的范围是0～OPEN_MAX。<br>Linux系统下大多数文件I/O操作只要5个函数就可以：<br>open<br>read<br>write<br>lseek<br>close<br>调用函数open可以打开或创建一个文件。</p>
<p>#include<fcntl.h><br>int open(const char <em>filename,int flag,/</em>mode_t mode*/);<br>这里的第三个参数只在创建文件时才有。关于flag的取值，可以man一下。<br>如果成功返回文件描述符，否则返回－1。<br>调用creat可以创建一个新文件。</fcntl.h></p>
<p>#include<fcntl.h><br>int creat(const char *filename,int flag,mode_t mode);<br>其实它就等效于open(filename,O_WRONLY | O_CREAT | O_TRUNC,mode);<br>如果成功返回为文件只写打开的文件描述符，否则返回－1。<br>调用close函数关闭一个打开的文件。<br>＃include<unistd.h><br>int close(int file);<br>如果成功返回0，否则返回－1。<br>关于函数lseek<br>每打开一个文件都有一个于之对应的“当前文件偏移量”，系统默认打开一个文件的偏移量为0。函数lseek可以设置这个偏移量。</unistd.h></fcntl.h></p>
<p>#include<unistd.h><br>off_t lseek(int file,off_t offset,int whence);<br>参数offseet的解释与whence有关：<br>若whence是SEEK_SET,则将文件的偏移量设置为据文件开始处offset个字节处。<br>若whence是SEEK_CUR,则将文件的偏移量设置为当前值加offset。<br>若whence是SEEK_END,则将文件的偏移量设置为文件长度加offset。<br>如果函数成功执行，返回新的偏移量，否则返回－1，错误信息可以查看errno。<br>调用read函数从打开的文件中读取数据。</unistd.h></p>
<p>#include<unistd.h><br>ssize_t read(int file,void *buf,size_t nbytes);<br>如果调用成功，返回读到的字节数，如已读到文件尾则返回0，出错就返回－1。<br>调用write函数向打开的文件写数据。</unistd.h></p>
<p>#include<unistd.h><br>ssize_t write(int file,const char *buf,size_t nbytes);<br>若调用成功返回已写字节数，失败返回－1，通常返回值如果与nbytes相同，则表示出错。</unistd.h></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> I/O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记8-bind(2)函数]]></title>
      <url>http://hackqiang.org/2009/07/25/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b08-bind2-e5-87-bd-e6-95-b0/</url>
      <content type="html"><![CDATA[<p>之前学了创建套接口的函数socket().创建好套接口后第二步就是地址绑定,用函数bind(2)实现.<br>函数定义：<br>?<br>View Code<br>C<br>1<br>2<br>3</p>
<p>#include<sys types.h=""></sys></p>
<p>#include<sys socket.h=""><br>int<br>bind<br>(<br>int<br>sockfd<br>,<br>struct<br>sockaddr<br>*<br>addr<br>,<br>int<br>addrlen<br>)<br>;<br>参数说明：<br>之前学了创建套接口的函数socket().创建好套接口后第二步就是地址绑定,用函数bind(2)实现.<br>函数定义：<br>?<br>View Code<br>C<br>1<br>2<br>3</sys></p>
<p>#include<sys types.h=""></sys></p>
<p>#include<sys socket.h=""><br>int<br>bind<br>(<br>int<br>sockfd<br>,<br>struct<br>sockaddr<br><em><br>addr<br>,<br>int<br>addrlen<br>)<br>;<br>参数说明：<br>sockfd:套接口描述符。<br>addr:套接口地址。<br>addrlen:地址结构的长度。<br>返回值：<br>如果调用成功返回0，否则返回－1，出错信息在errno中查看。<br>注意这里的套接口地址是通用结构，我们在使用时一般要进行强制转换。<br>下面是一段关于bind2的示例代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>…..<br>int<br>sockfd<br>;<br>struct<br>sockaddr_in addr<br>;<br>int<br>len_addr<br>=<br>sizeof<br>(<br>addr<br>)<br>;<br>addr.<br>sin_family<br>=<br>AF_INET<br>;<br>addr.<br>sin_port<br>=<br>hton<br>(<br>8888<br>)<br>;<br>inet_aton<br>(<br>“127.0.0.44”<br>,&amp;<br>amp<br>;<br>addr.<br>sin_addr<br>)<br>;<br>sockfd<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)<br>;<br>bind<br>(<br>sockfd<br>,<br>(<br>struct<br>sockaddr
</em><br>)<br>&amp;<br>amp<br>;<br>addr<br>,<br>len_addr<br>)<br>;<br>….<br>sockfd:套接口描述符。<br>addr:套接口地址。<br>addrlen:地址结构的长度。<br>返回值：<br>如果调用成功返回0，否则返回－1，出错信息在errno中查看。<br>注意这里的套接口地址是通用结构，我们在使用时一般要进行强制转换。<br>下面是一段关于bind2的示例代码：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>…..<br>int<br>sockfd<br>;<br>struct<br>sockaddr_in addr<br>;<br>int<br>len_addr<br>=<br>sizeof<br>(<br>addr<br>)<br>;<br>addr.<br>sin_family<br>=<br>AF_INET<br>;<br>addr.<br>sin_port<br>=<br>hton<br>(<br>8888<br>)<br>;<br>inet_aton<br>(<br>“127.0.0.44”<br>,&amp;<br>amp<br>;<br>addr.<br>sin_addr<br>)<br>;<br>sockfd<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)<br>;<br>bind<br>(<br>sockfd<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>amp<br>;<br>addr<br>,<br>len_addr<br>)<br>;<br>….</sys></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
            <tag> bind </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VC++复习笔记2-简单的MFC运行机理]]></title>
      <url>http://hackqiang.org/2009/07/24/vc-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b02-e7-ae-80-e5-8d-95-e7-9a-84mfc-e8-bf-90-e8-a1-8c-e6-9c-ba-e7-90-86/</url>
      <content type="html"><![CDATA[<p>本来是不想做这个笔记的,因为MFC的运行过程太复杂了.我琢磨了一下午还只是弄懂了点皮毛.现在把我弄懂的部分记录下.<br>首先程序建立一个全局对象theApp,调用父类的构造函数,再调用派生类的构造函数.<br>接着就进入了WinMain()函数,调用AfxWinMain,再调用InitInstance()函数,完成窗口创建显示.<br>然后进入PreCreateWindow()函数,调用AfxEndDeferRegisterClass()函数,完成窗口注册.<br>最后进入Run()函数,进行消息队列.<br>我现在就弄懂这些,再深点就不明白了.</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> VC++ </tag>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下的出错处理]]></title>
      <url>http://hackqiang.org/2009/07/24/linux-e4-b8-8b-e7-9a-84-e5-87-ba-e9-94-99-e5-a4-84-e7-90-86/</url>
      <content type="html"><![CDATA[<p>在Linux出错时，常常返回一个负值，全局整型变量errno的值就代表了出错代码。<br>这个全局变量包含在errno.h中，它的定义是：<br>extern int errno;<br>在多线程环境下，它被定义成：<br>extern int *__errno_location(void);</p>
<p>#define errno (<em>__errno_location())<br>下面有两个函数帮忙打印出错信息：<br>1。＃include<string.h><br>char </string.h></em>strerror(int errnum);<br>这个函数将errnum（也就是errno）映射为一个出错信息的字符串。<br>2。#include<stdio.h><br>void perror(const char *msg);<br>这个函数首先输出由msg指出的字符串，然后是冒号，一个空格，接着是对应errno值的出错信息，最后是一个换行符。</stdio.h></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> errno </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VC++复习笔记1-Windows程序的运行机制]]></title>
      <url>http://hackqiang.org/2009/07/23/vc-e5-a4-8d-e4-b9-a0-e7-ac-94-e8-ae-b01-windows-e7-a8-8b-e5-ba-8f-e7-9a-84-e8-bf-90-e8-a1-8c-e6-9c-ba-e5-88-b6/</url>
      <content type="html"><![CDATA[<p>没用VC++很久了,趁这个暑假有时间复习一下吧.<br>看了孙鑫老师的视频,感觉很多地方都生疏了.今天就复习第一章,Windows程序的运行机制.<br>先说一下大致的结构:<br>首先是入口函数WinMain,然后定义一个窗口类,接着注册窗口类,再创建窗口,显示窗口,编写消息循环机制,编写回调函数.<br>下面是一个简单的Windows程序的C代码:<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61</p>
<p>#include <windows.h></windows.h></p>
<p>#include <stdio.h><br>LRESULT CALLBACK WinProc<br>(<br>HWND hwnd<br>,<br>// handle to window<br>UINT uMsg<br>,<br>// message identifier<br>WPARAM wParam<br>,<br>// first message parameter<br>LPARAM lParam<br>// second message parameter<br>)<br>;<br>int<br>WINAPI WinMain<br>(<br>HINSTANCE hInstance<br>,<br>// handle to current instance<br>HINSTANCE hPrevInstance<br>,<br>// handle to previous instance<br>LPSTR lpCmdLine<br>,<br>// command line<br>int<br>nCmdShow<br>// show state<br>)<br>{<br>WNDCLASS wndcls<br>;<br>wndcls.<br>lpfnWndProc<br>=<br>WinProc<br>;<br>//注意这：回调函数名<br>wndcls.<br>lpszClassName<br>=<br>“WinClass”<br>;<br>//注意：类名<br>…</stdio.h></p>
<p>RegisterClass<br>(<br>&amp;<br>amp<br>;<br>wndcls<br>)<br>;<br>//注册窗口类<br>HWND hwnd<br>;<br>hwnd<br>=<br>CreateWindow<br>(<br>“WinClass”<br>,<br>“这是标题”<br>,<br>WS_OVERLAPPEDWINDOW<br>,<br>0<br>,<br>0<br>,<br>600<br>,<br>400<br>,<br>NULL<br>,<br>NULL<br>,<br>hInstance<br>,<br>NULL<br>)<br>;<br>//具体参数参阅MSDN<br>ShowWindow<br>(<br>hwnd<br>,<br>SW_SHOWNORMAL<br>)<br>;<br>//显示窗口<br>UpdateWindow<br>(<br>hwnd<br>)<br>;<br>//刷新窗口<br>MSG msg<br>;<br>while<br>(<br>GetMessage<br>(<br>&amp;<br>amp<br>;<br>msg<br>,<br>NULL<br>,<br>0<br>,<br>0<br>)<br>)<br>{<br>TranslateMessage<br>(<br>&amp;<br>amp<br>;<br>msg<br>)<br>;<br>//翻译消息<br>DispatchMessage<br>(<br>&amp;<br>amp<br>;<br>msg<br>)<br>;<br>//将消息交给回调函数处理<br>}<br>return<br>0<br>;<br>}<br>LRESULT CALLBACK WinSunProc<br>(<br>//回调函数<br>HWND hwnd<br>,<br>// handle to window<br>UINT uMsg<br>,<br>// message identifier<br>WPARAM wParam<br>,<br>// first message parameter<br>LPARAM lParam<br>// second message parameter<br>)<br>{<br>switch<br>(<br>uMsg<br>)<br>//消息处理<br>{<br>case<br>WM_CLOSE<br>:<br>DestroyWindow<br>(<br>hwnd<br>)<br>;<br>break<br>;<br>case<br>WM_DESTROY<br>:<br>PostQuitMessage<br>(<br>0<br>)<br>;<br>break<br>;<br>default<br>:<br>return<br>DefWindowProc<br>(<br>hwnd<br>,<br>uMsg<br>,<br>wParam<br>,<br>lParam<br>)<br>;<br>}<br>return<br>0<br>;<br>}<br>这里要注意窗口类里的lpfnWndProc和lpszClassName两个参数是与回调函数和CreateWindow里的参数是对应的.</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> VC++ </tag>
            
            <tag> 回调函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记8-socket(2)函数]]></title>
      <url>http://hackqiang.org/2009/07/23/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b08-socket2-e5-87-bd-e6-95-b0/</url>
      <content type="html"><![CDATA[<p>之前用过函数socket,但是没做说明,今天就好好研究下这个函数.<br>语法定义:</p>
<p>#include</p>
<p>#Incldue<br>int socket(int domain,int type,int protocol);<br>参数说明:<br>domain:协议族.一般有两个值:PF_LOCAL和PF_INET.<br>type:套接口类型.一般用到两个:SOCK_STREAM和SOCK_DGRAM.<br>protocol:使用的协议.我们一般设置它为0.<br>简单的说SOCK_STREAM是用的TCP协议，<br>SOCK_DGRAM是使用UDP协议。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日食]]></title>
      <url>http://hackqiang.org/2009/07/23/e6-97-a5-e9-a3-9f/</url>
      <content type="html"><![CDATA[<p>好久之前就知道今天，不，是昨天有日食，早上起来刷牙洗脸吃饭都结束就8点了。<br>网上google了一下，知道时间大约是8点20开始，于是我就上了阁楼，爬到了屋顶，等待日食。<br>终于来了，和我想象的一样，慢慢变化。。。<br>本来以为能看个全食，没想到太阳只剩一丁点的时候又慢慢变大了。。。结果就看了偏食。<br>看了一个小时就下去了。唉，日食，不过如此嘛！</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日食 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记7–一些地址转换函数]]></title>
      <url>http://hackqiang.org/2009/07/22/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b07-e4-b8-80-e4-ba-9b-e5-9c-b0-e5-9d-80-e8-bd-ac-e6-8d-a2-e5-87-bd-e6-95-b0/</url>
      <content type="html"><![CDATA[<p>主要的地址转换函数有:<br>inet_addr(3)<br>inet_aton(3)<br>inet_ntoa(3)<br>inet_network(3)<br>inet_lnaof(3)<br>inet_netof(3)<br>inet_makeaddr(3)<br>inet_addr(3)<br>它的作用是把字符串转换为点分十进制IP地址,这个函数现在已经很少使用,但是之前文件中用的很多.现在可以用inet_aton(3)取代它.<br>定义:</p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>unsigned long inet_addr(const char *string);<br>如果成功就返回一个32位二进制(网络字节序),失败返回INADDR_NONE.<br>inet_aton(3)<br>这个函数是函数inet_addr的改进.<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>int inet_aton(const char <em>string,struct in_addr </em>addr);<br>输出参数addr是被更新的结构,如果成功返回非0值,否则返回0.<br>inet_ntoa(3)<br>它的作用和函数inet_aton正好相反.<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>char *inet_ntoa(struct in_addr addr);<br>注意点:inet_ntoa的返回值在下一次调用之前有效.<br>inet_network(3)<br>这个函数的作用是把点十进制的IP地址转换成主机序的32位二进制IP地址.<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>unsigned long inet_network(const char *addr);<br>如果参数不正确,返回值为0xFFFFFFFF.<br>inet_lnaof(3)<br>这个函数的作用是把套接口地址中的IP地址(网络字节序)转换为没有网络位的主机ID(主机字节序).<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>unsigned long inet_lnaof(struct in_addr addr);<br>inet_netof(3)<br>这个函数的作用是把套接口地址中的IP地址(网络字节序)转换为没有网络位的网络ID(主机字节序).<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>unsigned long inet_netof(struct in_addr addr);<br>注意这个函数的返回值是右端对齐,主机位被移出.<br>inet_makeaddr(3)<br>它的作用是将网络位和主机位合并组成一个新的IP地址.<br>定义:</arpa></p>
<p>#include<sys socket.h=""></sys></p>
<p>#include<netinet in.h=""></netinet></p>
<p>#include<arpa inet.h=""><br>struct in_addr inet_makeaddr(int net,int host);</arpa></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C判断IP地址的分类]]></title>
      <url>http://hackqiang.org/2009/07/20/c-e5-88-a4-e6-96-adip-e5-9c-b0-e5-9d-80-e7-9a-84-e5-88-86-e7-b1-bb/</url>
      <content type="html"><![CDATA[<p>IP协议中，IP地址被分为5类，即A，B，C，D，E类。其中只有A，B，C类定义了主机的地址。<br>A类地址中以0开头，网络位为7位，主机位为24位。默认子网掩码为255.0.0.0。<br>B类地址中以10开头，网络位为14位，主机位为16位。默认子网掩码为255.255.0.0。<br>C类地址中以110开头，网络位为21位，主机位为8位。默认子网掩码为255.255.255.0。<br>D类地址中以1110开头，网络位为28位，主机位为0位。默认子网掩码为255.255.255.255。<br>E类地址中以11110开头，网络位为27位，主机位为0位。默认子网掩码为255.255.255.255。<br>下面用一个C程序来检验一个IP地址的类别。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>/* netmask.c:</p>
<ul>
<li>Classify an IP address:<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <sys types.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br>**<br>argv<br>)<br>{<br>int<br>x<br>;<br>/</netinet></sys></sys></stdlib.h></unistd.h></stdio.h></em> Index variable <em>/<br>struct<br>sockaddr_in adr_inet<br>;<br>/</em> AF_INET <em>/<br>int<br>len_inet<br>;<br>/</em> length  <em>/<br>unsigned<br>msb<br>;<br>/</em> Most significant byte <em>/<br>char<br>class<br>;<br>char
</em><br>netmask<br>;<br>static<br>struct<br>{<br>unsigned<br>char<br>ip<br>[<br>4<br>]<br>;<br>}<br>addresses<br>[<br>]<br>=<br>{<br>{<br>{<br>44<br>,<br>135<br>,<br>86<br>,<br>12<br>}<br>}<br>,<br>{<br>{<br>127<br>,<br>0<br>,<br>0<br>,<br>1<br>}<br>}<br>,<br>{<br>{<br>172<br>,<br>16<br>,<br>23<br>,<br>95<br>}<br>}<br>,<br>{<br>{<br>192<br>,<br>168<br>,<br>9<br>,<br>1<br>}<br>}<br>}<br>;<br>for<br>(<br>x<br>=<br>0<br>;<br>x<br>&lt;<br>4<br>;<br>++<br>x<br>)<br>{<br>/*</li>
<li>Set up the socket address, to</li>
<li>demonstrate how to classify it:<br><em>/<br>memset<br>(<br>&amp;<br>adr_inet<br>,<br>0<br>,<br>sizeof<br>adr_inet<br>)<br>;<br>adr_inet.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_inet.<br>sin_port<br>=<br>htons<br>(<br>9000<br>)<br>;<br>memcpy<br>(<br>&amp;<br>adr_inet.<br>sin_addr<br>.<br>s_addr<br>,<br>addresses<br>[<br>x<br>]<br>.<br>ip<br>,<br>4<br>)<br>;<br>len_inet<br>=<br>sizeof<br>adr_inet<br>;<br>/</em></li>
<li>Classify this address:<br>*</li>
<li>1. Get the Most Significant Byte</li>
<li>2. Classify by that byte<br><em>/<br>msb<br>=
</em><br>(<br>unsigned<br>char<br>*<br>)<br>&amp;<br>adr_inet.<br>sin_addr<br>.<br>s_addr<br>;<br>if<br>(<br>(<br>msb<br>&amp;<br>0x80<h1 id=""><a href="#" class="headerlink" title=")"></a>)</h1>0x00<br>)<br>{<br>class<br>=<br>‘A’<br>;<br>netmask<br>=<br>“255.0.0.0”<br>;<br>}<br>else<br>if<br>(<br>(<br>msb<br>&amp;<br>0xC0<h1 id="-1"><a href="#-1" class="headerlink" title=")"></a>)</h1>0x80<br>)<br>{<br>class<br>=<br>‘B’<br>;<br>netmask<br>=<br>“255.255.0.0”<br>;<br>}<br>else<br>if<br>(<br>(<br>msb<br>&amp;<br>0xE0<h1 id="-2"><a href="#-2" class="headerlink" title=")"></a>)</h1>0xC0<br>)<br>{<br>class<br>=<br>‘C’<br>;<br>netmask<br>=<br>“255.255.255.0”<br>;<br>}<br>else<br>if<br>(<br>(<br>msb<br>&amp;<br>0xF0<h1 id="-3"><a href="#-3" class="headerlink" title=")"></a>)</h1>0xE0<br>)<br>{<br>class<br>=<br>‘D’<br>;<br>netmask<br>=<br>“255.255.255.255”<br>;<br>}<br>else<br>{<br>class<br>=<br>‘E’<br>;<br>netmask<br>=<br>“255.255.255.255”<br>;<br>}<br>printf<br>(<br>“Address %u.%u.%u.%u is class %c “<br>“netmask %s<br>\n<br>“<br>,<br>addresses<br>[<br>x<br>]<br>.<br>ip<br>[<br>0<br>]<br>,<br>addresses<br>[<br>x<br>]<br>.<br>ip<br>[<br>1<br>]<br>,<br>addresses<br>[<br>x<br>]<br>.<br>ip<br>[<br>2<br>]<br>,<br>addresses<br>[<br>x<br>]<br>.<br>ip<br>[<br>3<br>]<br>,<br>class<br>,<br>netmask<br>)<br>;<br>}<br>return<br>0<br>;<br>}<br>其实这个程序很简单，我之所以写到这里是因为存IP的定义对我启发很大：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>static<br>struct<br>{<br>unsigned<br>char<br>ip<br>[<br>4<br>]<br>;<br>}<br>addresses<br>[<br>]<br>=<br>{<br>{<br>{<br>44<br>,<br>135<br>,<br>86<br>,<br>12<br>}<br>}<br>,<br>{<br>{<br>127<br>,<br>0<br>,<br>0<br>,<br>1<br>}<br>}<br>,<br>{<br>{<br>172<br>,<br>16<br>,<br>23<br>,<br>95<br>}<br>}<br>,<br>{<br>{<br>192<br>,<br>168<br>,<br>9<br>,<br>1<br>}<br>}<br>}<br>;</li>
</ul>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记6–初始化Internet地址]]></title>
      <url>http://hackqiang.org/2009/07/19/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b06-e5-88-9d-e5-a7-8b-e5-8c-96internet-e5-9c-b0-e5-9d-80/</url>
      <content type="html"><![CDATA[<p>Internet地址又可以分为通配地址和特定地址。<br>通配地址主要是为了适应一台电脑有多块网卡或一张网卡上邦定了多个地址的情况。<br>下面是初始化一个具有通配地址和通配端口号的AF_INET地址。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>struct<br>sockaddr_in adr_inet<br>;<br>int<br>addr_len<br>;<br>menset<br>(<br>&amp;<br>amp<br>;<br>adr_inet<br>,<br>0<br>,<br>sizeof<br>(<br>adr_inef<br>)<br>)<br>;<br>addr_inet.<br>sin_family<br>=<br>AF_INET<br>;<br>addr_inet.<br>sin_port<br>=<br>ntohs<br>(<br>0<br>)<br>;<br>addr_inet.<br>sin_addr<br>.<br>s_addr<br>=<br>ntohl<br>(<br>INADDR_ANY<br>)<br>;<br>adr_len<br>=<br>sizeof<br>(<br>adr_inet<br>)<br>;<br>千万要注意这里用的 是函数ntohl()和ntols()。<br>现在学习初始化一个特定的Internet地址。现看代码吧：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>/*</p>
<ul>
<li>Establishing a Specific AF_INET</li>
<li>Socket Address:<br><em>/<br>#include <stdio.h><br>#include <unistd.h><br>#include <stdlib.h><br>#include <errno.h><br>#include <string.h><br>#include <sys types.h=""><br>#include <sys stat.h=""><br>#include <sys socket.h=""><br>#include <netinet in.h=""><br>/</netinet></sys></sys></sys></string.h></errno.h></stdlib.h></unistd.h></stdio.h></em></li>
<li>This function reports the error and</li>
<li>exits back to the shell :<br><em>/<br>static<br>void<br>bail<br>(<br>const<br>char
</em><br>on_what<br>)<br>{<br>perror<br>(<br>on_what<br>)<br>;<br>exit<br>(<br>1<br>)<br>;<br>}<br>int<br>main<br>(<br>int<br>argc<br>,<br>char<br><strong><br>argv<br>,<br>char
</strong><br>envp<br>)<br>{<br>int<br>z<br>;<br>/<em> Status return code </em>/<br>int<br>sck_inet<br>;<br>/<em> Socket  </em>/<br>struct<br>sockaddr_in adr_inet<br>;<br>/<em> AF_INET </em>/<br>int<br>len_inet<br>;<br>/<em> length  </em>/<br>const<br>unsigned<br>char<br>IPno<br>[<br>]<br>=<br>{<br>127<br>,<br>0<br>,<br>0<br>,<br>23<br>/<em> Local loopback </em>/<br>}<br>;<br>/<em> Create an IPv4 Internet Socket </em>/<br>sck_inet<br>=<br>socket<br>(<br>AF_INET<br>,<br>SOCK_STREAM<br>,<br>0<br>)<br>;<br>if<br>(<h1 id="sck-inet"><a href="#sck-inet" class="headerlink" title="sck_inet"></a>sck_inet</h1>-<br>1<br>)<br>bail<br>(<br>“socket()”<br>)<br>;<br>/<em> Create an AF_INET address </em>/<br>memset<br>(<br>&amp;<br>amp<br>;<br>adr_inet<br>,<br>0<br>,<br>sizeof<br>adr_inet<br>)<br>;<br>adr_inet.<br>sin_family<br>=<br>AF_INET<br>;<br>adr_inet.<br>sin_port<br>=<br>htons<br>(<br>9000<br>)<br>;<br>memcpy<br>(<br>&amp;<br>amp<br>;<br>adr_inet.<br>sin_addr<br>.<br>s_addr<br>,<br>IPno<br>,<br>4<br>)<br>;<br>len_inet<br>=<br>sizeof<br>adr_inet<br>;<br>/<em> Now bind the address to the socket </em>/<br>z<br>=<br>bind<br>(<br>sck_inet<br>,<br>(<br>struct<br>sockaddr<br>*<br>)<br>&amp;<br>amp<br>;<br>adr_inet<br>,<br>len_inet<br>)<br>;<br>if<br>(<h1 id="z"><a href="#z" class="headerlink" title="z"></a>z</h1>-<br>1<br>)<br>bail<br>(<br>“bind()”<br>)<br>;<br>/<em> Display all of our bound sockets </em>/<br>system<br>(<br>“netstat -pa –tcp 2&gt;/dev/null | “<br>“sed -n ‘1,/^Proto/p;/af_inet/p’”<br>)<br>;<br>close<br>(<br>sck_inet<br>)<br>;<br>return<br>0<br>;<br>}<br>这也要注意，用的函数是htonl()。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
            <tag> 地址结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu上优化SSD]]></title>
      <url>http://hackqiang.org/2009/07/19/ubuntu-e4-b8-8a-e4-bc-98-e5-8c-96ssd/</url>
      <content type="html"><![CDATA[<p>前几天在笔记本上装上了UBUNTU，因为是SSD硬盘，所以上网找了点资料，优化SSD。在这记录一下。<br>第一步：<br>编辑fstab文件：<br>前几天在笔记本上装上了UBUNTU，因为是SSD硬盘，所以上网找了点资料，优化SSD。在这记录一下。<br>第一步：<br>编辑fstab文件：<br>?<br>View Code<br>BASH<br>1<br>sudo<br>gedit<br>/<br>etc<br>/<br>fstab<br>把relatime都改成noatime.<br>第二步，建立一个虚拟磁盘<br>在fstab最后加上这一行：<br>tmps /tmp tmps default, noatime,mode=1777 00 0<br>这样就在每次开机的时候挂载了一个由内存构成的虚拟分区/tmp。<br>最后，把一些程序的cache都移到这个虚拟分区。<br>举个例子，把firefox的缓存移到/tmp：<br>打开firefox,输入about:config打开设置。添加一个新字符串，名称为：browser.cache.disk.parent_directory，值为/tmp。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
            <tag> SSD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WordPress默认主题的修改]]></title>
      <url>http://hackqiang.org/2009/07/18/wordpress-e9-bb-98-e8-ae-a4-e4-b8-bb-e9-a2-98-e7-9a-84-e4-bf-ae-e6-94-b9/</url>
      <content type="html"><![CDATA[<p>装上WordPress后就开始寻找主题,以前用Z-BLOG的时候就羡慕WordPress的主题,可现在用上了WordPress后却发现WordPress的主题没想象的好.找来找去也没发现中意的.最后还是觉得默认主题看着舒服.<br>但是默认主题主要有两个缺点.<br>1.主页上没有自动显示摘要,导致了页面太长.<br>2.分页不实用（这貌似是通病）.<br>3.没有留言（这貌似也是通病）.<br>先解决分页问题,下载wp-pageavi插件,安装.然后打开主题的index.php文件.<br>把代码:<br>?<br>View Code<br>PHP<br>1<br>2<br>3<br>4<br>&lt;<br>div<br>class<br>=<br>“navigation”<br>&gt;<br>&lt;<br>div<br>class<br>=<br>“alignleft”</p>
<blockquote>
<p><!--
p next_posts_link
(
__
(
'&laquo; Older Entries'
,
'kubrick'
)
)
;-->&lt;/<br>div</p>
<p>&lt;<br>div<br>class<br>=<br>“alignright”<br><!--
p previous_posts_link
(
__
(
'Newer Entries &raquo;'
,
'kubrick'
)
)
;-->&lt;/<br>div</p>
<p>&lt;/<br>div</p>
<p>修改为:<br>?<br>View Code<br>PHP<br>1<br>&lt;<br>div<br><!--
p
if
(
function_exists
(
'qiang_pagenavi'
)
)
{
qiang_pagenavi
(
)
;
}
-->&lt;/<br>div</p>
<p>这样分页就解决了,如果想要居中显示,在div里加上“align=”center””属性.<br>首页摘要显示的修改：<br>打开index.php。<br>找到代码：<br>?<br>View Code<br>PHP<br>1<br>注意the_content()函数中可能会有参数，不过可以无视它。<br>修改为：<br>?<br>View Code<br>PHP<br>1<br>最后再加上“read more”的按钮：<br>?<br>View Code<br>PHP<br>1<br>2<br>3<br>&lt;<br>div<br>class<br>=<br>“details”</p>
<p>&lt;<br>div<br>class<br>=<br>“inside”<br>&lt;<br>a href<br>=<br>“&lt;?php the_permalink() ?&gt;”</p>
<p>Read More »<br>&lt;/<br>a<br>&lt;/<br>div</p>
<p>&lt;/<br>div</p>
<p>这样，不能显示摘要的问题也解决了。<br>最后解决留言板的问题。<br>先复制一份single.php，改名为guestbook.php<br>在guestbook.php的顶部加上下面的代码:<br>?<br>View Code<br>PHP<br>1<br>最后，新建一个页面，在页面编辑器的底部，找到页面模板这个选项，从中选择刚才建立的Guestbook,保存就可以了.<br>但是问题还没完。还要美化一下。<br>在guestbook.php中把下面的代码删掉：<br>?<br>View Code<br>PHP<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>&lt;<br>div</p>
<p>id<br>=<br>“post-“<br>&amp;<br>gt<br>;<br>&lt;<br>div<br>class<br>=<br>“entry”</p>
<p>‘ . __(‘<br>Read the rest of this entry »<br>‘, ‘<br>kubrick<br>‘) . ‘<br>‘); ?&gt;<br>‘<br>&lt;<br>strong</p>
<p>‘ . __(‘<br>Pages<br>:<br>‘, ‘<br>kubrick<br>‘) . ‘<br>&lt;/<br>strong</p>
<p>‘, ‘<br>after<br>‘ =&gt; ‘<br>‘, ‘<br>next_or_number<br>‘ =&gt; ‘<br>number<br>‘)); ?&gt;</p>
</blockquote>
<p>trackback from your own site.’<br>,<br>‘kubrick’<br>)<br>,<br>trackback_url<br>(<br>false<br>)<br>)<br>;<br>?<br>&amp;<br>gt<br>;&lt;/<br>div<br>&gt;<br>&lt;/<br>div<br>&gt;<br>为留言，也就是评论分页：下载wp-commentnavi插件，用法和wp-pagenavi差不多，这就不多说了。<br>用同样的方法可以修改search.php,archivers.php等等。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> 主题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记5–网络字节序]]></title>
      <url>http://hackqiang.org/2009/07/17/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b05-e7-bd-91-e7-bb-9c-e5-ad-97-e8-8a-82-e5-ba-8f/</url>
      <content type="html"><![CDATA[<p>对于多字节的数据，不同的CPU有不同的处理方法，主要有以下两种方法：<br>1.小端字节序。就是把低位字节存储在起始位置。<br>2.大端字节序。就是把高位字节存储在起始位置。<br>intel的cpu采用的是小端字节序，而motorola的CPU则用的是大端字节序，如果intel的cpu和motorola的CPU进行直接的通讯，就会产生错误。<br>现在网络上采用的标准方式是大端字节序。<br>下面提供几个大／小端字节序相互转换的函数。<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p>
<p>#include &lt;netinet/in.h&gt;<br>unsigned<br>long<br>htonl<br>(<br>unsigned<br>long<br>hostlong<br>)<br>;<br>unsigned<br>short<br>htons<br>(<br>unsigned<br>short<br>hostshort<br>)<br>;<br>unsigned<br>long<br>ntohl<br>(<br>unsigned<br>long<br>netlong<br>)<br>;<br>unsigned<br>short<br>ntohs<br>(<br>unsigned<br>short<br>netshort<br>)<br>;<br>这里有个记忆诀窍：”h”代表host,”n”代表network,”s”代表”short”,”l”代表”long”.</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
            <tag> 地址结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux Socket 学习笔记4–地址结构]]></title>
      <url>http://hackqiang.org/2009/07/17/linux-socket-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b04-e5-9c-b0-e5-9d-80-e7-bb-93-e6-9e-84/</url>
      <content type="html"><![CDATA[<p>每一种通信协议都对网络地址格式做了明确的规定，地址族的作用就是指明使用哪一种地址类型。<br>BSD定义了一个通用的地址结构：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>struct<br>sockaddr<br>{<br>sa_family_t   sa_family<br>;<br>char<br>sa_data<br>[<br>14<br>]<br>;<br>}<br>;<br>其中sa_family_t是一个无符号的整形。虽然这个通用结构对编程者来说没什么用处，但是它为其他的地址结构提供了一个 重要的参考。<br>在linux中，使用最普遍的地址族是AF_INET,TCP/IP协议就使用具有IPv4地址的套接口，下面是C语言描述的结构sockaddr_in：<br>?<br>View Code<br>C<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>＃include<br>&amp;<br>lt<br>;<br>netinet<br>/<br>in.<br>h<br>&amp;<br>gt<br>;<br>struct<br>sockaddr_in<br>{<br>sa_family_t      sin_family<br>;<br>//地址族<br>unit16_t           sin_port<br>;<br>//端口号<br>struct<br>in_addr   sin_addr<br>;<br>//Internet地址<br>unsigned<br>sin_zero<br>[<br>8<br>]<br>;<br>//占位字节<br>}<br>;<br>struct<br>in_addr<br>{<br>unit32_t        s_addr<br>;<br>}<br>;<br>在TCP/IP协议中，sin_family将被初始化为AF_INET，sin_zero[8]的 作用仅仅是对齐，实际使用时不用初始化。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> socket </tag>
            
            <tag> 地址结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你想的通吗–关于fork(2)函数]]></title>
      <url>http://hackqiang.org/2009/07/17/e4-bd-a0-e6-83-b3-e7-9a-84-e9-80-9a-e5-90-97-e5-85-b3-e4-ba-8efork2-e5-87-bd-e6-95-b0/</url>
      <content type="html"><![CDATA[<p>今天看socket编程，遇到了fork函数，以前学过linux编程，对fork了解一点。可是都说它有两个返回值我就想不通了。<br>后来我又琢磨了会，查了查man手册，终于被我搞清楚了。fork既然是创建子进程的，那么说它返回两个值不如说是程序执行了两次：一次是父进程在执行，另一次是子进程在执行。<br>看看下面的代码：<br>?<br>View Code<br>CPP<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17</p>
<p>#include <unistd.h></unistd.h></p>
<p>#include <stdio.h><br>int<br>main<br>(<br>)<br>{<br>pid_t pid<br>;<br>if<br>(<br>(<br>pid<br>=<br>fork<br>(<br>)<br>)<br>&lt;<br>0<br>)<br>{<br>printf<br>(<br>“fork error<br>\n<br>“<br>)<br>;<br>return<br>;<br>}<br>else<br>if<br>(</stdio.h></p>
<h1 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h1><p>0<br>)<br>printf<br>(<br>“output from child:%d<br>\n<br>“<br>,getpid<br>(<br>)<br>)<br>;<br>else<br>printf<br>(<br>“output from parent:%d<br>\n<br>“<br>,getpid<br>(<br>)<br>)<br>;<br>printf<br>(<br>“output %d<br>\n<br>“<br>,pid<br>)<br>;<br>return<br>0<br>;<br>}<br>编译执行，结果如下：<br>output from child:4694<br>output 0<br>output from parent:4693<br>output 4694<br>可以很明显的看出，这个程序执行了两次，第一次fork返回了0，相当于是pid=4694的子进程在执行，第二次返回值为4694，也就是返回了子进程的pid，相当于是父进程在执行。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fork </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于把WordPress给用上了]]></title>
      <url>http://hackqiang.org/2009/07/16/e7-bb-88-e4-ba-8e-e6-8a-8awordpress-e7-bb-99-e7-94-a8-e4-b8-8a-e4-ba-86/</url>
      <content type="html"><![CDATA[<p>之前一直在用Z-blog,一个基于ASP的Blog.一直都有一种不知道是不是事实的错觉–ASP不安全(貌似不是错觉),但是这不是我要换WordPress的原因,我的主要原因是….呃,不能说.<br>言归正传,其实换个Blog程序主要是为了让我有点新鲜感,希望这新鲜感能支持我把我的Blog写下去,要知道我那之前的Z-blog有8个月没更新啦.8个月啊!<br>废话不多说.这这么着吧.</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wordpress </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那个女孩有点冷(一)]]></title>
      <url>http://hackqiang.org/2006/10/19/e9-82-a3-e4-b8-aa-e5-a5-b3-e5-ad-a9-e6-9c-89-e7-82-b9-e5-86-b7-e4-b8-80/</url>
      <content type="html"><![CDATA[<p>高考终于结束。<br>我在没有任何准备的情况下被湖北一所学校录取了。<br>在老爸的陪同下来到了学校报道，开始了我的大学生活。<br>报名是个很复杂烦琐让人疲惫不堪的过程，我用了一整天时间才搞定。第二天送走老爸后，我一个人走在陌生的街上，看到了一个理发店，我立即头脑发热，进去把头发染成了红色，出来后又打了个耳洞–其实我已经蓄谋已久了。<br>接下来军训开始了。<br>高中的军训我就没参加，有点后悔了，毕竟比别人少了一段记忆–虽然这记忆不是甜的。所以我打算参加这次军训。<br>我们物理系1班和2班组成了一个集体–九连。我们有两个教官，不多说他们了。<br>我们一起训练了大半个月就开始准备阅兵了，于是教官开始发狂的监督我们走正步，齐步。我快受不了了撒，这时教官说要抽人去军体拳方列打拳，开始是自己要求自愿参加的，但是到了最后教官要那些正步走不好的去，于是乎我们教官就开始一排排的挑人，因为我铁了心要到军体拳方列，所以我在教官说了”向左看齐”时我把头扭向了右边，如此几个回合后我很是”光荣”的第一的成了军体拳方列的成员。虽然教官后来知道我是故意的时候很生气的对我说了句”没上进心”,可我还是觉得不以为然.。<br>到了军体拳方列是比九连轻松了不少,整天和体育系的那帮猛男在后山上聊天，日子就这样一天天的溜了。<br>突然有一天我们系要一起上军事理论课，所以我就回到了九连和原来的战友（就是同学嘛）一起去上课。<br>我们走在去上课的路上是我发现了一个奇怪的女孩(注意注意,女主人公上场啦!)–你无法在她的脸上找到任何表情，那种感觉，好象是看到了一座冰山。我当时就被那种”气质”吸引了。<br>我开始留心这个女孩，到了我们上课的地方，其实那就是一个足球场，场地上光滑的就象秃子的头顶，当然也象溜冰场，不同的是场地上还覆盖了一层黄土，在我们刚刚踏上足球场的一瞬间立刻尘土飞扬，那景观，你要说它不壮观我要跟你急的！再看我们，一个个蒙着脸，艰难的走着。那时我的我在想打仗要是就来这是不是可以节约掉烟雾弹的钱?­<br>此刻我又看到了那座冰山，在别人怨声载道时她还是那么面无表情，她是人么？我在心里开始嘀咕了。<br>晚上我回到寝室就打听到了那个女孩的名字–灵，先这么叫吧。<br>第二天的早上我找到了我姐(我学姐，是军训的那天认识的，她负责教我们校歌，我们关系很不错)，问我姐要了灵的号码，姐告诉我后后意味深长的对我说“她很冷的，你别怪我没警告你，碰了钉子我可不管”“没事，我会把这座冰山一点一点化掉的”我脱口而出。<br>我马上发了第一条短信给灵“喂，你是不是XX旁边的叫灵的呀？”<br>到了晚上她回了一条和她本人一样冷的短信“抱歉手机没带在身上，你找我有事吗？是不是要我帮你替XX传话呀？对了，你还是先说说你是谁吧，如果你不介意的话。”­<br>我立刻回了一条“你怎么那么冷呀，说话直来直去的。你知道你们班上叫强的么？”­<br>好久她回才回“我这人就这样，不好意思不认识。”<br>我碰了一鼻子灰，只得说“没事，预料之中的，郁闷，你怎么对我那么冷呀”­<br>她依旧很冷的说“你到底有没有事，我可要睡了”<br>她越是冷，我越是感兴趣。对任何事都感兴趣，是我最大的缺点和优点。<br>之后的几天就这么着无心的和她聊着，有一天她问我是怎么知道她手机号的，我当然不能说是我姐告诉我的，所以我说”乱拨的号，没想到是你”。她当然不信“以前也有人这么对我这么说，你们男生怎么都这样，没一个值得信赖的。”<br>我突然紧张了起来，是人都能看的出她的这句话包含了很多含义，她很有可能是被人伤害过会所以对人这么冷。<br>我立马回“你是不是被伤害过呀？人可以回忆过去，但不能活在过去，你明白?”<br>没想到她这次回的挺快“你才被伤害过呢，不要改的自己怎么都知道似的，晚安”<br>我知道她说过晚安后就不会再回了，于是我便没再发短信。<br>(未完待续)</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[杂感]]></title>
      <url>http://hackqiang.org/2006/10/19/e6-9d-82-e6-84-9f/</url>
      <content type="html"><![CDATA[<p>ps：这篇文章是我今天（2011-12-19）中午看自己的qq空间找到的，记下，回忆一下2006年的我：<br>好久没静下心来想想自己的感受了.<br>来这有2个月了吧,感觉由刚开始的沉闷变成现在的愉快.<br>刚刚来的时候整天都很无聊,现在不同了,我找到了自己的生活,我开始变的充实起来.<br>我似乎找到了自己真正喜欢的女孩,但我不敢肯定,我连自己在想什么都不清楚,别人说我很花心,我无力否认,但我相信一旦我找到了自己爱的人,我将会彻底改变–给人的承诺就一定要实现.<br>我想改掉自己身上的坏毛病,我不想再一副痞子的德行,不想再吊儿郎当,不想再给别人没有安全感的样子.<br>痞习惯了…<br>痞习惯了…<br>难道真的是这样?</p>
]]></content>
      
        <categories>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[追光少年（上）]]></title>
      <url>http://hackqiang.org/2005/12/19/e8-bf-bd-e5-85-89-e5-b0-91-e5-b9-b4-ef-bc-88-e4-b8-8a-ef-bc-89/</url>
      <content type="html"><![CDATA[<p>ps：这是我高三时的一些记忆。<br>新华社报道 今天凌晨在310国道发生一起重大交通事故，造成2辆桑塔纳2000追尾飞出道路，一辆大奔报销，但无人身亡。<br>事后经查造成这一重大事故的罪魁祸首竟是一学生，在记者几天的明查暗访后得知，肇事者系江苏省某中学高三学生，几翻周折后记者找到了当事人俞某，俞某非常郁闷的交代了事情的经过。原来是俞某在看完电影《无极》后十分羡慕昆仑的速度，在研究完爱因斯坦的《相对论》后便萌发了超越光速的想法，企图回到过去。于是每天到310国道练起了跑步，但在今天俞某的速度达到299999999米每秒时对面来了一辆大奔，结果就造成了这起交通事故。<br>为了杜绝此类事件的再次发生，交管部门根据有关法律给以俞某5天监禁，20元罚款的处分 ，并且禁止俞某在5年之内踏上310国道。<br>但事情并未结束，国家宣传部又对电影《无极》进行了调查，结果发现此电影中含有大量色情片断，于是对其导演陈凯歌处以10天监禁，50元罚款的措施。<br>国际诺贝尔物理学奖研究委员会全体人员在看完电影《无极》后授予演员昆仑“2006年诺贝尔物理学奖”，因为他成功的证明了爱因斯坦《相对论》的正确性。<br>一场车祸引起了这么多的事件，真是令人叹为观止！<br>追光少年（下）中记者将会继续采访俞某，将会系统的说明俞某为何会如此渴望回到过去。<br>敬请关注。</p>
]]></content>
      
        <categories>
            
            <category> 乱七八糟 </category>
            
            <category> 心情琐事 </category>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
